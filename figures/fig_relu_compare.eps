%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig_relu_compare.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Harry Zhao
%%CreationDate: 5/15/2019
%%BoundingBox: 0 0 355 279
%%HiResBoundingBox: 0 0 354.6221 278.8912
%%CropBox: 0 0 354.6221 278.8912
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.2 x274 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 8644 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFA8FFA8A8A8FD7AFF7DA87D7D7DA8FFFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD04FF7DA87DA87DFFA8FD17FF
%A8FD45FFA8FD17FFA8FD06FFA8FDC0FFA8FFFFFFA8FD07FFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FD42FFA8FFA8FFFFFFA8FFFFFFA8FD0FFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0CFFA8FD
%37FFA8FD0DFFA8A87DFFFFA87DA87DFFFFA8A8FD21FFA8FD0CFFA8FD37FF
%AFFD0BFF7D7DA8A87D7D7DA87D5252FF7DA8FD22FFA8FD0AFFA8FD37FFAF
%CAC3CAC3CAC3CAC3CACACAFF7DA8FFA8A852FFFFFFA8A87DFFA8FD21FFA8
%FD0CFFA1BCCAFD35FFA8CACACAC3CACACAC3CACAFF7D7DFF7D527D7DFFA8
%A8FFA852A8FD2EFFCAFCB5FD42FF7D7D7DA8FF7D7DA852A8FF7DA8FD23FF
%A8FD0BFFC3FCC3FD6EFFA8FD0EFFCAB5B5FD71FFA8FD0BFFCAB5B5CAFD4D
%FFA8A8FD05FFA8A8A8FD16FFA8FD05FFA8A8A87DA87DFFA8FFCABCB5C3FD
%32FFA8FD0DFF7DA8A8FD0BFF52FD05FF52A852FD17FFA8FD04FF7DA8A87D
%7DA8A9FFA8FFB5BCB5FD33FFA8CACAFFFFFFCACACAFFFFFF527DA87D527D
%A8A852A152A87DA8527D527DA87DA87DA87DFD18FFA8FD04FFA8A87DA87D
%FD04FFBCBCBCFD32FFAFCAB5BCC3FFFFC3B5BCFD04FFA87D7D7DA87D7DFF
%52FD047DA87DFF52A852A17DA87DFD24FFAFFFBCC3B5CAFD32FFA8FD0BFF
%A8A87D7D52A852527D7DA8527D76FF527D7D527D527D7D52A8FD25FFC3C3
%BCC3FD3FFF7DFD08A8FFA8FFA8FFA8A8FFFFA8A87DA8A8FD19FFA8FD0CFF
%BCC3BCBCFD6CFFA8FD0FFFC3B5CAB5FD57FFA8FD17FFA8FD0CFFC3B5CAB5
%CAFD3DFF7D7D527DFD0EFFA8A8FD05FF7D7DFF7D7DFF7DA8FD05FF52FD07
%FFA8FD0CFFA8FFFFFFB5FFB5CAFD30FFA8FD0DFF7D7DA87D7D7DA8A87D7D
%7DA8FF7D7DA87DA827A8A8A8FFA852A8FFA852A8A8A87D7D7DA87D7DA8A8
%7DA87DA87DFFA8FD0CFFA8FFCABCCABCBCFD31FFA8FD0ABCC3FFA87DFF52
%FD057D52A8527DA8A87D527D7D7D5252FD047DFFA8527DFFA152A87D7DA8
%7D7D7DA8527D7DA8FFFFA8FD0AFFA8FFFFFFB5FFC3BCFD30FFAFFFC3CAC3
%CAC3CAC3CAC3C3CAFF7D7DFF7DA1A8527D7D7DA87D52A8A87D527D7D7D52
%FF7DA87D7DFFA8527D7DA852FFA87DFF7D527DA8A8A87DFFFFA8FD0CFFA8
%FFFFB5C3CAB5FD31FFAFFD0CFFA87DFF7DA8FF7D7DA87DA87DA87DA87DFD
%06A8FF7DA87DFF7DA8FFA87D7DFFFF7DFF7DA87D7DFFFF7DFD12FFB5C3CA
%B5CAFD5FFF7DFD0DFFA8FFFFA8A87DA87DA8FD05FFBCB5FFFCC3FD30FFA8
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05
%FFA87DA87DA87DFFA8FFFFFFC3BCFFBCBCFD31FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8A87D7D7DA8FF
%FFA8FFFFC3B5FFBCB5CAFD6BFFA8FD06FFA8FFFFFFA8FFFFFFC3B5FFCAFC
%CAFD77FFA8FFFFCAFCCACAB5BCFD6BFFA8FD0AFFA8FFFFFFCAB5C3FFB5BC
%FD77FFA8FFFFFFFCBCFFC3FCCAFD6AFFA8FD0FFFBCBCFFCAB5BCFD6BFFA8
%FD0EFFBCB5CAFFB5B5C3FD79FFC3FCFFFFC3FCC3FD6AFFA8FD0EFFC3FCC3
%FFCAB5B5FD74FFA8FD05FFFCC3FFFFBCB5C3FD74FFA8FFFFFFCAB5BCFFFF
%CAFCC3CAFD67FFA8FD0AFFA8FD05FFBCBCCAFFCAB5B5CAFD6DFF7DA87DA8
%FFFFA8FD04FFBCFCCAFFFFBCB5C3FD67FFA8FD05FF7D7DA87EFFA8FD05FF
%C3FCBCFFFFCAB5C3C3FD67FFA8FD04FF7DA87DA8FD07FFCAFCB5CAFFCAB5
%B5C3CAFD76FFCAB5B5C3FFFFC3B5BCCAFD66FFA8FD10FFB5B5BCCAFFCABC
%B5BCC3C3FD6EFFA8FD06FFC3FCBCC3FFCAC3B5B5C3C3CAFFC3FD6CFFA8FD
%05FFC3B5FCC3CACAC3C3FCBCC3CACAC3CAFFCAFD0DFFCACAFFFFFFCACAFD
%49FFA8FD0AFFA8FD06FFCABCB5B5BCBCCABCC3FCBCC3CABCCACAC3C3FFCA
%FD0AFFCAC3FFFFFFC3CAFD55FFA8FD05FFCAC3FCB5BCBCBCC3BCB5FCB5BC
%B5B5C3BCBCBCC3CAC3BCCACAC3BCCAFFFFC3C3C3CAC3C3C3FFCACAFFCAC3
%CAFD04FFCAFFCACAFD3AFFA8FD12FFCABCB5BCBCBCC3C3BCBCFCB5FCB5FD
%04BCB5FD04BCC3B5BCBCFFCAFD0AC3CAC3C3C3CAC3CAFFFD04C3FD3BFFA8
%FD12FFBCB5FCB5B5FD04BCB5FCB5FCBCB5B5B5BCB5BCB5BCB5FD04BCC3BC
%B5C3C3C3BCBCC3C3C3BCC3C3C3BCFD07C3CAFD4DFFCAB5B5FCB5BCBCB5B5
%BCBCFCFCB5B5FCFD05B5BCBCFCBCBCC3C3B5FCBCFCB5FCB5C3C3BCCABCB5
%BCCAC3C3C3B5BCCAC3CAFD3AFFA8FD13FFBCB5BCFCFD04B5BCB5BCB5FCB5
%BCFD05FCB5FCB5FCB5B5B5BCC3FCC3BCC3FD04B5FCB5B5B5FCB5B5B5FCB5
%B5B5C3FD3FFFFD04A8FFA8FD09FFCABCB5BCB5B5B5FD04BCC3FD04BCB5BC
%B5BCB5BCBCBCB5B5B5FD04C3CAC3C3BCC3C3BCC3CAC3BCC3C3B5C3B5B5B5
%BCCAFD3EFF537D7DA8FFFFA8FD09FFC3C3B5BCB5B5FCB5B5FD05BCB5BCB5
%BCB5BCB5BCB5BCB5FCB5C3C3CAFD08C3BCC3C3C3BCFD05C3FCC3FD38FFA8
%FD05FF7D7DA87DFFA8FD0CFFCAC3C3BCBCBCB5B5C3BCCACAC3C3CABCCAC3
%CACABCBCBCB5BCC3CAFFCACACAC3CAC3C3CAFFC3C3C3CACAFFC3C3C3BCB5
%FD3EFFA8FFA8FD11FFCAC3BCC3BCBCB5BCC3FFCACAFFCAFFCACAFFC3FFC3
%C3BCCACAFFCAFFFFFFCAFFCAFFFFFFCAFD04FFCAC3CABCB5C3FD54FFCAFF
%C3C3B5BCC3FD0BFFCAC3C3FD11FFCAFFFFCAB5BCCAFD37FFA8FD1EFFCACA
%BCB5C3FD0BFFC3B5CAFD13FFCAC3FCC3CAFD58FFBCBCCAFD0BFFFCC3FD14
%FFCAB5B5CAFD36FFA8FD22FFB5B5CAFD0AFFBCFCFD15FFC3B5BCFD40FFA8
%FD18FFCAB5BCCAFD09FFCAC3CAFD15FFB5B5CAFD40FFA8FD18FFCAB5BCCA
%FD09FFC3C3CAFD13FFCAC3FCC3CAFD33FFA8FD0AFFA8FD1AFFCAB5C3FD09
%FFCAB5FD15FFCAB5B5FD40FFA8FD1AFFC3B5CAFD08FFCAB5BCFD15FFBCB5
%C3FD33FFA8FD27FFBCB5CAFD08FFBCB5CAFD14FFCAB5BCCAFD33FFA8FD26
%FFC3B5B5CAFD07FFCABCCAFD14FFCABCFCC3FD39FFA8A87DFD1FFFC3BCBC
%FD08FFCAC3FD15FFCAB5BCFD33FFA8FD04FF527DA8A8A8FFA8FD1DFFC3B5
%C3FD07FFCABCBCFD15FFBCB5C3FD31FFA8FD05FFA87DA87DFFA8FD1FFFBC
%B5CAFD07FFBCFCC3FD14FFCAB5BCCAFD38FFA8FFFFFFA8FD1EFFCAB5B5CA
%FD07FFB5BCFD14FFCABCFCC3FD30FFA8FD0AFFA8FD21FFBCBCCAFD06FFCA
%BCCAFD14FFC3B5BCFD3CFFA8FD20FFCAB5BCCAFD05FFCAC3BCFD14FFCABC
%B5C3FD2FFFA8FD2EFFB5BCCAFD05FFCAB5BCFD14FFCAB5BCCAFD2FFFA8FD
%2DFFCAB5BCCAFD05FFB5FCC3FD13FFCABCFCC3CAFD5DFFCAB5C3FD06FFB5
%C3FD14FFCAB5B5FD2FFFA8FD2FFFCAB5BCCAFD04FFCABCCAFD14FFC3FCBC
%FD38FFA8FD26FFCAB5BCFD05FFC3BCCAFD14FFBCB5C3FD38FFA8FD26FFCA
%B5BCCAFFFFFFCAB5FCCAFD13FFCAB5B5CAFD2BFFA8FD0AFFA8FD29FFB5BC
%CAFFFFFFC3B5BCFD14FFCAFCC3FD31FFFD04A8FD2CFFB5B5C3FFFFFFC3C3
%C3FD14FFC3FCC3FD31FF7DA87DFFA8FD2BFFBCB5C3FFFFFFC3C3C3FD13FF
%CABCFCCAFD2AFFA8FD04FFFD047DFFFFA8FD2BFFBCB5BCFFFFFFBCFCC3FD
%13FFCAB5FCC3FD28FFA8FD06FFA8FFA8FD2FFFC3BCBCFFFFFFB5B5C3FD13
%FFCABCFCCAFD28FFA8FD38FFCABCB5C3FFFFBCC3C3FD13FFCABCFCC3CAFD
%30FFA8FD30FFC3B5C3FFFFCABCBCFD13FFCABCFCBCFD31FFA8FD30FFCAB5
%BCC3FFC3FCFCC3CAFD11FFCAC3FCBCCAFD23FFA8FD0AFFA8FD33FFC3BCB5
%C3C3BCBCC3CAFD12FFCAFCB5C3FD2EFFA8FD34FFC3B5BCC3C3C3BCC3FD12
%FFCABCB5B5C3CAFD1FFFA8FD42FFC3BCB5BCB5B5BCFD13FFCAC3B5B5BCFD
%1FFFA8FD42FFCACABCBCFCB5BCCACAFD13FFC3B5FCBCBCCAFD61FFCAC3B5
%BCB5B5B5CAFD13FFCABCB5FCB5BCCACAFD17FFA8FD48FFC3C3B5FCFCBCBC
%C3C3CAFD11FFCAC3BCB5B5B5BCC3CACAFD1CFFA8FD41FFCAC3BCBCFCFCFC
%BCC3FD04CAFFFD05CAFFCAFFCAFFFFFFCAFFCACABCFD04B5BCBCC3C3FD06
%CAFFCAFFCACACAFFCAFD06FF7DA8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFAFFFA8CAA1C39ABC
%93B58CBC93BC8CB593BC9ABC8CB593BC9AB58CBC9ABC93B58CBC93B58CFC
%8CB58CFC8CB58CB58CFC8CB58CA8FD05FFA8A8A8FFA8FD17FFA8FD3BFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFFFFFCAFFFFFFCAFFCAFFCAFFCA
%FFA8FD08FF7DA8FD81FFA8FD15FFA8FFA8FD17FFA8FD15FFA8FFA8FD2DFF
%A8FFA8FD06FFA87DA8FD14FFA87D7D7DFD13FFA87D7D7DA8FD13FF7DA87D
%A8FD13FFA8527E7DA8FD12FF7DA8FD047DFD06FFA87DA8FD14FFA8A87DA8
%FD13FFA852A87DA8FD13FF7D7DA8A8FD13FFA87D7DA8A8FD13FF7DA87DA8
%7DFD06FFA8A8A8FD14FFFD04A8FD14FFFD04A8FD13FFA8A87EA8FD14FFA8
%A87DFD13FFA8FFFD04A8FDFCFFFFFFFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-05-15T01:00:16-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7rqOm+e1m46fMZ7YarFc&#xA;u09z6Uz2ym3JjXhG6iHabmnwnw5VIZVEeWbfzDYafqUt7HcJcLEhiF7cfWg9xHG3qyx0lk4RO9KJ&#xA;VafyjFWSKmocRymiLdyImA+71DirfC+/37F/yLb/AKqYq7hff79i/wCRbf8AVTFXcL7/AH7F/wAi&#xA;2/6qYq7hff79i/5Ft/1UxVbIuohRwkiJqtQY26Eip/vOwxVdwvv9+xf8i2/6qYq7hff79i/5Ft/1&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 7.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>arial.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>BookAntiqua</stFnt:fontName>
                  <stFnt:fontFamily>Book Antiqua</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.35</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>BKANT.TTF</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -278.891 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 278.891 li
354.622 278.891 li
354.622 0 li
cp
clp
20.875 261.519 mo
346.375 261.519 li
346.375 4.64404 li
20.875 4.64404 li
20.875 261.519 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
24.1299 26.6621 mo
24.1299 26.6621 li
24.1299 26.6621 li
26.8999 31.6353 mo
25.105 28.4131 li
25.2632 28.2261 li
26.4771 28.7402 li
26.5962 29.5542 li
26.3481 29.8472 li
26.4438 29.9282 li
26.5698 30.895 li
26.7871 30.8662 li
26.8999 31.6353 li
27.4038 32.6772 mo
27.3848 32.5073 li
27.1479 32.0811 li
27.7002 32 li
27.7759 32.6279 li
27.4038 32.6772 li
27.811 36.4048 mo
27.6069 34.541 li
28.001 34.4893 li
28.2261 36.3511 li
27.811 36.4048 li
28.1509 39.5142 mo
28.0151 38.27 li
28.4512 38.2129 li
28.6011 39.4482 li
28.1509 39.5142 li
28.626 43.8633 mo
28.4512 42.2593 li
28.6841 43.855 li
28.626 43.8633 li
29.0342 47.5913 mo
28.8301 45.7271 li
28.9551 45.7109 li
29.1362 46.9502 li
29.501 46.896 li
29.5762 47.52 li
29.0342 47.5913 li
29.4409 51.3198 mo
29.2368 49.4561 li
29.8008 49.3823 li
30.0259 51.2432 li
29.4409 51.3198 li
29.8462 55.0249 mo
29.645 53.1841 li
30.251 53.105 li
30.3979 54.3208 li
30.0908 54.355 li
30.1641 54.9922 li
29.8462 55.0249 li
30.2529 58.7529 mo
30.0498 56.8892 li
30.376 56.855 li
30.5869 58.7183 li
30.2529 58.7529 li
30.6582 62.481 mo
30.6401 62.292 li
30.457 60.6172 li
30.7988 60.582 li
30.939 61.8071 li
31.1528 61.7832 li
31.2129 62.4243 li
30.6582 62.481 li
31.0088 66.2153 mo
30.833 64.3481 li
31.3892 64.291 li
31.564 66.1572 li
31.0088 66.2153 li
31.3599 69.9492 mo
31.1841 68.082 li
31.7393 68.0239 li
31.854 69.252 li
31.7861 69.2593 li
31.8589 69.897 li
31.3599 69.9492 li
31.7109 73.6821 mo
31.5352 71.8149 li
32.0698 71.7603 li
32.1831 72.7471 li
32.2651 73.625 li
31.7109 73.6821 li
32.062 77.416 mo
31.8862 75.5493 li
32.4409 75.4922 li
32.6162 77.3589 li
32.062 77.416 li
43.1279 135.656 mo
40.4048 134.595 li
37.1499 116.699 li
33.895 96.9121 li
32.2378 79.2832 li
32.791 79.2251 li
32.9658 81.0923 li
32.4229 81.1489 li
32.6162 83.0142 li
33.1421 82.959 li
33.3169 84.8262 li
32.8101 84.8789 li
32.8999 85.7549 li
32.9111 85.8291 li
33.0869 86.8071 li
33.4961 86.7339 li
33.6719 88.6069 li
33.4189 88.6528 li
33.752 90.498 li
33.8481 90.481 li
33.895 90.98 li
34.1719 92.3281 li
34.084 92.3433 li
34.416 94.189 li
34.5498 94.165 li
34.9268 96.002 li
34.749 96.0342 li
35.0811 97.8789 li
35.3052 97.8389 li
35.6821 99.6763 li
35.4141 99.7251 li
35.7461 101.57 li
36.0601 101.513 li
36.438 103.35 li
36.0781 103.415 li
36.166 103.902 li
36.165 103.894 li
36.3989 105.255 li
36.814 105.183 li
37.1499 106.817 li
37.1909 107.021 li
36.7168 107.103 li
37.0352 108.95 li
37.5571 108.86 li
37.9238 110.7 li
37.354 110.798 li
37.6719 112.646 li
38.291 112.539 li
38.6582 114.379 li
37.9902 114.494 li
38.3081 116.342 li
39.0239 116.218 li
39.3911 118.058 li
38.627 118.189 li
38.9448 120.037 li
39.7578 119.897 li
40.124 121.737 li
39.2632 121.885 li
39.4199 122.793 li
39.6128 123.234 li
40.1958 123.989 li
40.5322 123.729 li
43.1279 135.656 li
50.1699 151.352 mo
47.6792 145.481 li
50.1699 147.669 li
53.4248 150.525 li
53.7158 150.895 li
53.4248 150.789 li
50.1699 151.352 li
66.2612 157.575 mo
63.1899 155.441 li
59.9351 154.869 li
58.1392 153.274 li
59.9351 151.563 li
63.1899 152.259 li
66.2612 157.575 li
76.0391 152.808 mo
74.9849 154.508 li
75.6138 154.897 li
76.3462 155.537 li
77.6621 154.031 li
76.8682 153.337 li
76.7368 153.24 li
76.0391 152.808 li
79.0742 155.264 mo
77.7578 156.771 li
78.8071 157.687 li
79.0542 157.846 li
79.4932 158.044 li
80.3149 156.221 li
80.0112 156.084 li
79.0742 155.264 li
82.0249 156.991 mo
81.2021 158.815 li
82.2402 159.282 li
82.731 159.601 li
83.8188 157.923 li
83.2642 157.563 li
83.1309 157.49 li
82.0249 156.991 li
85.3921 158.942 mo
84.3042 160.621 li
85.3018 161.267 li
85.542 161.559 li
87.085 160.286 li
86.7461 159.876 li
86.519 159.673 li
85.3921 158.942 li
88.2778 161.732 mo
86.7358 163.005 li
87.9292 164.451 li
89.4722 163.179 li
88.2778 161.732 li
90.667 164.608 mo
89.1392 165.899 li
90.3491 167.332 li
91.877 166.041 li
90.667 164.608 li
93.0869 167.473 mo
91.5591 168.763 li
91.7212 168.955 li
91.7632 169.002 li
92.8872 170.174 li
94.3311 168.791 li
93.229 167.641 li
93.0869 167.473 li
95.6279 170.143 mo
94.1851 171.527 li
94.9888 172.366 li
95.3828 172.854 li
96.9399 171.599 li
96.5181 171.077 li
96.4619 171.012 li
95.6279 170.143 li
98.1162 173.059 mo
96.5601 174.314 li
97.7368 175.774 li
99.293 174.518 li
98.1162 173.059 li
100.453 176.068 mo
98.8218 177.225 li
99.9072 178.755 li
101.538 177.597 li
100.453 176.068 li
102.623 179.126 mo
100.992 180.284 li
101.435 180.907 li
101.479 180.965 li
102.186 181.821 li
103.728 180.548 li
103.044 179.719 li
102.623 179.126 li
104.922 181.995 mo
103.379 183.268 li
104.572 184.714 li
106.115 183.441 li
104.922 181.995 li
107.342 184.776 mo
105.881 186.141 li
107.16 187.511 li
108.622 186.146 li
107.342 184.776 li
109.919 187.625 mo
108.336 188.846 li
109.481 190.332 li
111.064 189.11 li
109.919 187.625 li
112.21 190.594 mo
110.626 191.816 li
111.223 192.59 li
111.259 192.634 li
111.846 193.312 li
113.358 192.003 li
112.79 191.347 li
112.21 190.594 li
114.585 193.421 mo
113.073 194.73 li
114.3 196.148 li
115.812 194.839 li
114.585 193.421 li
117.051 196.213 mo
115.572 197.559 li
116.834 198.946 li
118.313 197.6 li
117.051 196.213 li
119.55 198.917 mo
118.166 200.36 li
119.52 201.657 li
120.904 200.213 li
119.55 198.917 li
122.257 201.51 mo
120.874 202.954 li
121.063 203.136 li
122.102 204.278 li
123.581 202.932 li
122.52 201.765 li
122.472 201.716 li
122.257 201.51 li
124.843 204.319 mo
123.364 205.666 li
124.295 206.689 li
124.304 206.698 li
124.639 207.057 li
126.101 205.692 li
125.771 205.339 li
124.843 204.319 li
127.381 207.062 mo
125.919 208.427 li
127.198 209.798 li
128.66 208.433 li
127.381 207.062 li
129.957 209.686 mo
128.595 211.151 li
129.968 212.428 li
131.33 210.963 li
129.957 209.686 li
132.676 212.147 mo
131.437 213.718 li
132.908 214.879 li
134.147 213.309 li
132.676 212.147 li
135.705 214.602 mo
134.243 215.967 li
135.522 217.337 li
136.984 215.972 li
135.705 214.602 li
138.264 217.342 mo
136.802 218.708 li
137.324 219.267 li
137.409 219.348 li
138.257 220.064 li
139.548 218.537 li
138.746 217.859 li
138.264 217.342 li
140.98 219.748 mo
139.689 221.275 li
140.664 222.1 li
140.69 222.121 li
141.159 222.492 li
142.398 220.921 li
141.942 220.562 li
140.98 219.748 li
143.87 222.083 mo
142.631 223.653 li
143.945 224.69 li
143.959 224.701 li
144.119 224.823 li
145.33 223.231 li
145.178 223.115 li
143.87 222.083 li
146.823 224.367 mo
145.611 225.958 li
147.103 227.093 li
148.315 225.502 li
146.823 224.367 li
149.802 226.672 mo
148.563 228.242 li
150.035 229.404 li
151.274 227.834 li
149.802 226.672 li
152.746 228.966 mo
151.535 230.558 li
153.027 231.693 li
154.238 230.102 li
152.746 228.966 li
155.727 231.212 mo
154.544 232.825 li
156.057 233.933 li
157.239 232.32 li
155.727 231.212 li
158.736 233.385 mo
157.616 235.042 li
159.169 236.092 li
160.289 234.435 li
158.736 233.385 li
161.821 235.446 mo
160.766 237.146 li
162.36 238.134 li
163.414 236.434 li
161.821 235.446 li
164.92 237.308 mo
164.097 239.131 li
165.807 239.902 li
166.629 238.079 li
164.92 237.308 li
168.404 238.963 mo
167.385 240.684 li
168.999 241.639 li
170.018 239.918 li
168.404 238.963 li
171.564 240.763 mo
170.741 242.586 li
172.451 243.357 li
173.273 241.534 li
171.564 240.763 li
175.03 242.407 mo
174.048 244.15 li
175.682 245.07 li
176.664 243.328 li
175.03 242.407 li
178.204 244.064 mo
177.516 245.942 li
179.276 246.587 li
179.965 244.709 li
178.204 244.064 li
181.739 245.388 mo
181.005 247.248 li
182.749 247.937 li
183.483 246.076 li
181.739 245.388 li
220.818 259.337 mo
219.43 259.285 li
216.175 258.713 li
212.92 258.469 li
209.665 257.592 li
206.41 257.054 li
203.155 256.459 li
199.9 255.121 li
196.645 254.477 li
193.39 253.274 li
190.135 252.543 li
186.88 250.942 li
183.625 249 li
180.37 247.878 li
177.115 247.053 li
173.86 244.988 li
170.605 244.02 li
167.35 241.173 li
164.095 239.574 li
160.84 238.177 li
157.585 236.717 li
154.33 234.139 li
151.075 231.774 li
147.82 229.077 li
144.565 226.974 li
141.31 224.419 li
138.055 221.577 li
134.8 218.056 li
131.545 215.427 li
128.29 212.775 li
125.035 209.658 li
121.78 205.859 li
118.525 202.37 li
115.27 199.464 li
112.015 196.227 li
108.76 192.746 li
105.505 188.799 li
102.25 185.117 li
98.9951 180.135 li
95.7402 175.761 li
92.4849 172.552 li
89.23 168.642 li
85.9751 165.035 li
82.7202 162.865 li
79.4648 161.736 li
76.21 159.588 li
72.9551 158.42 li
69.7002 158.065 li
66.5679 157.716 li
69.7002 153.213 li
72.9551 156.376 li
76.21 152.482 li
79.4648 153.57 li
82.6631 154.398 li
82.7202 154.461 li
82.769 154.397 li
83.3218 154.219 li
85.9751 155.885 li
89.23 160.18 li
92.4849 163.97 li
95.7402 167.554 li
98.9951 171.232 li
102.25 175.394 li
105.505 179.61 li
108.76 182.598 li
112.015 187.598 li
115.27 191.909 li
118.525 196.191 li
121.78 198.916 li
125.035 202.25 li
128.29 206.123 li
131.545 209.543 li
134.8 212.042 li
138.055 215.483 li
141.31 218.13 li
144.565 220.705 li
147.82 223.579 li
151.075 226 li
154.33 228.588 li
157.585 230.747 li
160.84 233.757 li
164.095 236.44 li
167.35 237.763 li
170.605 238.654 li
173.86 240.678 li
177.115 242.233 li
180.37 243.836 li
183.625 245.294 li
183.741 245.354 li
186.799 247.849 li
185.273 246.988 li
184.29 248.73 li
185.924 249.651 li
186.898 247.923 li
188.471 248.664 li
187.76 250.465 li
189.505 251.153 li
190.173 249.458 li
191.88 250.073 li
191.359 251.753 li
193.058 252.28 li
193.078 252.288 li
193.688 250.741 li
195.42 251.459 li
194.822 252.976 li
196.278 253.55 li
196.451 253.601 li
196.755 253.661 li
197.063 252.107 li
198.854 252.708 li
198.595 254.024 li
199.642 254.231 li
200.282 254.447 li
200.669 253.304 li
202.457 253.871 li
202.059 255.048 li
202.835 255.311 li
202.884 255.326 li
203.9 255.612 li
204.218 254.485 li
205.982 255.136 li
205.705 256.121 li
206.139 256.243 li
206.19 256.256 li
207.579 256.569 li
207.831 255.454 li
209.665 255.66 li
209.703 255.673 li
209.408 256.982 li
209.419 256.984 li
211.162 257.475 li
211.5 256.275 li
212.92 256.751 li
213.269 256.848 li
213.079 257.973 li
214.928 258.286 li
215.086 257.352 li
216.175 257.654 li
216.923 257.708 li
216.715 258.629 li
218.544 259.042 li
218.815 257.843 li
219.43 257.887 li
220.633 258.146 li
220.534 259.313 li
220.818 259.337 li
224.283 259.484 mo
222.685 259.408 li
222.409 259.397 li
222.481 258.543 li
222.685 258.587 li
224.33 258.928 li
224.283 259.484 li
228.054 259.638 mo
226.179 259.571 li
226.196 259.284 li
228.064 259.451 li
228.054 259.638 li
239.336 259.843 mo
238.96 259.843 li
237.446 259.828 li
237.45 259.705 li
238.96 259.728 li
239.336 259.734 li
239.336 259.843 li
243.072 259.849 mo
242.215 259.843 li
241.211 259.843 li
241.211 259.759 li
242.215 259.773 li
243.073 259.791 li
243.072 259.849 li
254.335 259.865 mo
252.46 259.865 li
252.46 259.843 li
254.335 259.843 li
254.335 259.865 li
258.073 259.873 mo
256.198 259.868 li
256.198 259.843 li
258.074 259.843 li
258.073 259.873 li
0 .503777 .274907 0 cmyk
f
344.333 258.592 mo
346.207 258.592 li
346.207 260.592 li
344.333 260.592 li
344.333 258.592 li
340.583 258.592 mo
342.458 258.592 li
342.458 260.592 li
340.583 260.592 li
340.583 258.592 li
336.833 258.592 mo
338.707 258.592 li
338.707 260.592 li
336.833 260.592 li
336.833 258.592 li
333.083 258.592 mo
333.355 258.592 li
334.958 258.592 li
334.958 260.592 li
333.355 260.592 li
333.083 260.592 li
333.083 258.592 li
329.333 258.592 mo
330.1 258.592 li
331.207 258.592 li
331.207 260.592 li
330.1 260.592 li
329.333 260.592 li
329.333 258.592 li
325.583 258.592 mo
326.845 258.592 li
327.458 258.592 li
327.458 260.592 li
326.845 260.592 li
325.583 260.592 li
325.583 258.592 li
321.832 258.592 mo
323.59 258.592 li
323.707 258.592 li
323.707 260.592 li
323.59 260.592 li
321.832 260.592 li
321.832 258.592 li
318.083 258.592 mo
319.958 258.592 li
319.958 260.592 li
318.083 260.592 li
318.083 258.592 li
314.332 258.592 mo
316.207 258.592 li
316.207 260.592 li
314.332 260.592 li
314.332 258.592 li
310.583 258.592 mo
312.458 258.592 li
312.458 260.592 li
310.583 260.592 li
310.583 258.592 li
306.832 258.592 mo
307.315 258.592 li
308.707 258.592 li
308.707 260.592 li
307.315 260.592 li
306.832 260.592 li
306.832 258.592 li
303.083 258.592 mo
304.06 258.592 li
304.958 258.592 li
304.958 260.592 li
304.06 260.592 li
303.083 260.592 li
303.083 258.592 li
299.332 258.592 mo
300.805 258.592 li
301.207 258.592 li
301.207 260.592 li
300.805 260.592 li
299.332 260.592 li
299.332 258.592 li
295.583 258.592 mo
297.458 258.592 li
297.458 260.592 li
295.583 260.592 li
295.583 258.592 li
291.832 258.592 mo
293.707 258.592 li
293.707 260.592 li
291.832 260.592 li
291.832 258.592 li
288.083 258.592 mo
289.958 258.592 li
289.958 260.592 li
288.083 260.592 li
288.083 258.592 li
284.332 258.592 mo
284.53 258.592 li
286.207 258.592 li
286.207 260.592 li
284.53 260.592 li
284.332 260.592 li
284.332 258.592 li
280.583 258.592 mo
281.275 258.592 li
282.458 258.592 li
282.458 260.592 li
281.275 260.592 li
280.583 260.592 li
280.583 258.592 li
276.832 258.592 mo
278.02 258.592 li
278.708 258.592 li
278.708 260.592 li
278.02 260.592 li
276.832 260.592 li
276.832 258.592 li
273.083 258.592 mo
274.765 258.592 li
274.958 258.592 li
274.958 260.592 li
274.765 260.592 li
273.083 260.592 li
273.083 258.592 li
269.332 258.592 mo
271.208 258.592 li
271.208 260.592 li
269.332 260.592 li
269.332 258.592 li
265.583 258.592 mo
267.458 258.592 li
267.458 260.592 li
265.583 260.592 li
265.583 258.592 li
261.862 258.504 mo
263.736 258.556 li
263.68 260.556 li
261.806 260.503 li
261.862 258.504 li
258.112 258.49 mo
258.504 258.501 li
259.959 258.501 li
259.959 260.501 li
258.49 260.501 li
258.462 260.5 li
258.056 260.489 li
258.112 258.49 li
254.335 258.409 mo
255.235 258.409 li
255.263 258.409 li
256.238 258.437 li
256.182 260.436 li
255.221 260.409 li
254.335 260.409 li
254.335 258.409 li
250.585 258.409 mo
251.98 258.409 li
252.46 258.409 li
252.46 260.409 li
251.98 260.409 li
250.585 260.409 li
250.585 258.409 li
246.835 258.409 mo
248.71 258.409 li
248.71 260.409 li
246.835 260.409 li
246.835 258.409 li
243.114 258.342 mo
244.988 258.395 li
244.932 260.394 li
243.058 260.341 li
243.114 258.342 li
239.336 258.317 mo
241.211 258.317 li
241.211 260.317 li
239.336 260.317 li
239.336 258.317 li
235.616 258.223 mo
235.733 258.226 li
237.49 258.275 li
237.434 260.275 li
235.677 260.225 li
235.56 260.222 li
235.616 258.223 li
231.896 258.101 mo
232.493 258.135 li
233.742 258.17 li
233.685 260.169 li
232.422 260.133 li
232.394 260.132 li
231.784 260.098 li
231.896 258.101 li
228.152 257.89 mo
229.251 257.952 li
230.024 257.996 li
229.912 259.992 li
229.139 259.949 li
228.04 259.887 li
228.152 257.89 li
224.439 257.636 mo
226.01 257.769 li
226.28 257.784 li
226.168 259.781 li
225.884 259.765 li
225.856 259.763 li
224.271 259.629 li
224.439 257.636 li
220.703 257.32 mo
222.571 257.478 li
222.402 259.471 li
220.534 259.313 li
220.703 257.32 li
217.155 256.678 mo
218.984 257.091 li
218.544 259.042 li
216.715 258.629 li
217.155 256.678 li
213.413 256.001 mo
215.261 256.314 li
214.928 258.286 li
213.079 257.973 li
213.413 256.001 li
209.848 255.031 mo
209.885 255.039 li
209.936 255.052 li
211.705 255.551 li
211.162 257.475 li
209.419 256.984 li
209.408 256.982 li
209.848 255.031 li
206.247 254.196 mo
206.656 254.311 li
208.019 254.618 li
207.579 256.569 li
206.19 256.256 li
206.139 256.243 li
205.705 256.121 li
206.247 254.196 li
202.699 253.153 mo
203.452 253.408 li
204.442 253.687 li
203.9 255.612 li
202.884 255.326 li
202.835 255.311 li
202.059 255.048 li
202.699 253.153 li
198.982 252.062 mo
200.094 252.281 li
200.22 252.315 li
200.923 252.553 li
200.282 254.447 li
199.642 254.231 li
198.595 254.024 li
198.982 252.062 li
195.556 251.115 mo
196.928 251.657 li
197.142 251.699 li
196.755 253.661 li
196.451 253.601 li
196.278 253.55 li
194.822 252.976 li
195.556 251.115 li
191.951 249.843 mo
193.686 250.381 li
193.757 250.406 li
193.812 250.427 li
193.078 252.288 li
193.058 252.28 li
191.359 251.753 li
191.951 249.843 li
188.494 248.604 mo
190.239 249.292 li
189.505 251.153 li
187.76 250.465 li
188.494 248.604 li
185.273 246.988 mo
186.906 247.909 li
185.924 249.651 li
184.29 248.73 li
185.273 246.988 li
181.739 245.388 mo
183.483 246.076 li
182.749 247.937 li
181.005 247.248 li
181.739 245.388 li
178.204 244.064 mo
179.965 244.709 li
179.276 246.587 li
177.516 245.942 li
178.204 244.064 li
175.03 242.407 mo
176.664 243.328 li
175.682 245.07 li
174.048 244.15 li
175.03 242.407 li
171.564 240.763 mo
173.273 241.534 li
172.451 243.357 li
170.741 242.586 li
171.564 240.763 li
168.404 238.963 mo
170.018 239.918 li
168.999 241.639 li
167.385 240.684 li
168.404 238.963 li
164.92 237.308 mo
166.629 238.079 li
165.807 239.902 li
164.097 239.131 li
164.92 237.308 li
161.821 235.446 mo
163.414 236.434 li
162.36 238.134 li
160.766 237.146 li
161.821 235.446 li
158.736 233.385 mo
160.289 234.435 li
159.169 236.092 li
157.616 235.042 li
158.736 233.385 li
155.727 231.212 mo
157.239 232.32 li
156.057 233.933 li
154.544 232.825 li
155.727 231.212 li
152.746 228.966 mo
154.238 230.102 li
153.027 231.693 li
151.535 230.558 li
152.746 228.966 li
149.802 226.672 mo
151.274 227.834 li
150.035 229.404 li
148.563 228.242 li
149.802 226.672 li
146.823 224.367 mo
148.315 225.502 li
147.103 227.093 li
145.611 225.958 li
146.823 224.367 li
143.87 222.083 mo
145.178 223.115 li
145.33 223.231 li
144.119 224.823 li
143.959 224.701 li
143.945 224.69 li
142.631 223.653 li
143.87 222.083 li
140.98 219.748 mo
141.942 220.562 li
142.398 220.921 li
141.159 222.492 li
140.69 222.121 li
140.664 222.1 li
139.689 221.275 li
140.98 219.748 li
138.264 217.342 mo
138.746 217.859 li
139.548 218.537 li
138.257 220.064 li
137.409 219.348 li
137.324 219.267 li
136.802 218.708 li
138.264 217.342 li
135.705 214.602 mo
136.984 215.972 li
135.522 217.337 li
134.243 215.967 li
135.705 214.602 li
132.676 212.147 mo
134.147 213.309 li
132.908 214.879 li
131.437 213.718 li
132.676 212.147 li
129.957 209.686 mo
131.33 210.963 li
129.968 212.428 li
128.595 211.151 li
129.957 209.686 li
127.381 207.062 mo
128.66 208.433 li
127.198 209.798 li
125.919 208.427 li
127.381 207.062 li
124.843 204.319 mo
125.771 205.339 li
126.101 205.692 li
124.639 207.057 li
124.304 206.698 li
124.295 206.689 li
123.364 205.666 li
124.843 204.319 li
122.257 201.51 mo
122.472 201.716 li
122.52 201.765 li
123.581 202.932 li
122.102 204.278 li
121.063 203.136 li
120.874 202.954 li
122.257 201.51 li
119.55 198.917 mo
120.904 200.213 li
119.52 201.657 li
118.166 200.36 li
119.55 198.917 li
117.051 196.213 mo
118.313 197.6 li
116.834 198.946 li
115.572 197.559 li
117.051 196.213 li
114.585 193.421 mo
115.812 194.839 li
114.3 196.148 li
113.073 194.73 li
114.585 193.421 li
112.21 190.594 mo
112.79 191.347 li
113.358 192.003 li
111.846 193.312 li
111.259 192.634 li
111.223 192.59 li
110.626 191.816 li
112.21 190.594 li
109.919 187.625 mo
111.064 189.11 li
109.481 190.332 li
108.336 188.846 li
109.919 187.625 li
107.342 184.776 mo
108.622 186.146 li
107.16 187.511 li
105.881 186.141 li
107.342 184.776 li
104.922 181.995 mo
106.115 183.441 li
104.572 184.714 li
103.379 183.268 li
104.922 181.995 li
102.623 179.126 mo
103.044 179.719 li
103.728 180.548 li
102.186 181.821 li
101.479 180.965 li
101.435 180.907 li
100.992 180.284 li
102.623 179.126 li
100.453 176.068 mo
101.538 177.597 li
99.9072 178.755 li
98.8218 177.225 li
100.453 176.068 li
98.1162 173.059 mo
99.293 174.518 li
97.7368 175.774 li
96.5601 174.314 li
98.1162 173.059 li
95.6279 170.143 mo
96.4619 171.012 li
96.5181 171.077 li
96.9399 171.599 li
95.3828 172.854 li
94.9888 172.366 li
94.1851 171.527 li
95.6279 170.143 li
93.0869 167.473 mo
93.229 167.641 li
94.3311 168.791 li
92.8872 170.174 li
91.7632 169.002 li
91.7212 168.955 li
91.5591 168.763 li
93.0869 167.473 li
90.667 164.608 mo
91.877 166.041 li
90.3491 167.332 li
89.1392 165.899 li
90.667 164.608 li
88.2778 161.732 mo
89.4722 163.179 li
87.9292 164.451 li
86.7358 163.005 li
88.2778 161.732 li
85.3921 158.942 mo
86.519 159.673 li
86.7461 159.876 li
87.085 160.286 li
85.542 161.559 li
85.3018 161.267 li
84.3042 160.621 li
85.3921 158.942 li
82.0249 156.991 mo
83.1309 157.49 li
83.2642 157.563 li
83.8188 157.923 li
82.731 159.601 li
82.2402 159.282 li
81.2021 158.815 li
82.0249 156.991 li
79.0742 155.264 mo
80.0112 156.084 li
80.3149 156.221 li
79.4932 158.044 li
79.0542 157.846 li
78.8071 157.687 li
77.7578 156.771 li
79.0742 155.264 li
76.0391 152.808 mo
76.7368 153.24 li
76.8682 153.337 li
77.6621 154.031 li
76.3462 155.537 li
75.6138 154.897 li
74.9849 154.508 li
76.0391 152.808 li
72.4219 150.947 mo
73.1489 151.091 li
73.4819 151.222 li
74.4458 151.82 li
73.3921 153.519 li
72.583 153.018 li
72.0352 152.91 li
72.4219 150.947 li
69.1689 149.982 mo
70.0508 150.48 li
70.582 150.585 li
70.1948 152.547 li
69.5059 152.411 li
69.209 152.301 li
68.187 151.725 li
69.1689 149.982 li
65.5742 148.311 mo
66.7158 148.632 li
66.936 148.724 li
67.5361 149.062 li
66.5542 150.804 li
66.0581 150.525 li
65.0322 150.235 li
65.5742 148.311 li
62.1841 147.127 mo
63.5332 147.735 li
63.769 147.802 li
63.2271 149.727 li
62.9189 149.64 li
62.7788 149.589 li
61.3618 148.95 li
62.1841 147.127 li
59.3169 145.306 mo
60.605 146.467 li
59.9351 147.21 li
60.3462 146.298 li
60.4741 146.356 li
59.6519 148.179 li
59.5239 148.121 li
59.2651 147.952 li
57.978 146.792 li
59.3169 145.306 li
56.6602 142.787 mo
57.3818 143.56 li
57.9248 144.05 li
56.585 145.535 li
56.0098 145.016 li
55.9492 144.957 li
55.1982 144.152 li
56.6602 142.787 li
52.9819 139.887 mo
53.0581 139.858 li
54.1563 140.105 li
55.3799 141.417 li
53.918 142.781 li
52.6938 141.47 li
53.4248 140.788 li
53.792 141.718 li
53.7158 141.748 li
52.9819 139.887 li
50.9199 141.332 mo
51.0669 141.63 li
50.1699 142.072 li
49.8032 141.142 li
51.2378 140.576 li
51.9722 142.436 li
50.5371 143.002 li
49.2729 142.514 li
49.126 142.216 li
50.9199 141.332 li
49.2632 137.968 mo
50.0908 139.65 li
48.2969 140.534 li
47.4688 138.853 li
49.2632 137.968 li
47.6851 134.676 mo
47.833 135.068 li
48.4341 136.287 li
46.6401 137.171 li
46.0181 135.909 li
45.979 135.82 li
45.814 135.382 li
47.6851 134.676 li
46.3608 131.167 mo
47.0229 132.921 li
45.1519 133.628 li
44.4902 131.873 li
46.3608 131.167 li
45.0371 127.659 mo
45.6992 129.413 li
43.8281 130.119 li
43.166 128.365 li
45.0371 127.659 li
42.9238 124.252 mo
44.0698 125.737 li
42.4858 126.958 li
41.3408 125.474 li
42.9238 124.252 li
41.2339 121.545 mo
41.3481 122.209 li
41.7788 122.768 li
40.1958 123.989 li
39.6128 123.234 li
39.4199 122.793 li
39.2632 121.885 li
41.2339 121.545 li
40.5981 117.85 mo
40.916 119.698 li
38.9448 120.037 li
38.627 118.189 li
40.5981 117.85 li
39.9609 114.154 mo
40.2788 116.002 li
38.3081 116.342 li
37.9902 114.494 li
39.9609 114.154 li
39.3252 110.459 mo
39.6431 112.307 li
37.6719 112.646 li
37.354 110.798 li
39.3252 110.459 li
38.688 106.763 mo
39.0059 108.611 li
37.0352 108.95 li
36.7168 107.103 li
38.688 106.763 li
38.0469 103.061 mo
38.1338 103.547 li
38.1348 103.555 li
38.3701 104.915 li
36.3989 105.255 li
36.165 103.894 li
36.166 103.902 li
36.0781 103.415 li
38.0469 103.061 li
37.3818 99.3701 mo
37.7139 101.215 li
35.7461 101.57 li
35.4141 99.7251 li
37.3818 99.3701 li
36.7168 95.6802 mo
37.0498 97.5249 li
35.0811 97.8789 li
34.749 96.0342 li
36.7168 95.6802 li
36.0518 91.9893 mo
36.3848 93.834 li
34.416 94.189 li
34.084 92.3433 li
36.0518 91.9893 li
35.3882 88.2979 mo
35.7202 90.144 li
33.752 90.498 li
33.4189 88.6528 li
35.3882 88.2979 li
34.7988 84.6719 mo
34.8862 85.5112 li
35.0562 86.4531 li
33.0869 86.8071 li
32.9111 85.8291 li
32.8999 85.7549 li
32.8101 84.8789 li
34.7988 84.6719 li
34.4121 80.9429 mo
34.605 82.8071 li
32.6162 83.0142 li
32.4229 81.1489 li
34.4121 80.9429 li
34.0249 77.2129 mo
34.2178 79.0771 li
32.229 79.2842 li
32.0361 77.4189 li
34.0249 77.2129 li
33.6382 73.4829 mo
33.8311 75.3472 li
31.8418 75.5542 li
31.6489 73.689 li
33.6382 73.4829 li
33.251 69.7529 mo
33.4438 71.6182 li
31.4551 71.8242 li
31.2622 69.959 li
33.251 69.7529 li
32.8643 66.0229 mo
33.0571 67.8882 li
31.0679 68.0942 li
30.875 66.229 li
32.8643 66.0229 li
32.4771 62.292 mo
32.6709 64.1582 li
30.6812 64.3643 li
30.4878 62.499 li
32.4771 62.292 li
32.0898 58.563 mo
32.2842 60.4282 li
30.2939 60.6343 li
30.1011 58.769 li
32.0898 58.563 li
31.7031 54.833 mo
31.897 56.6982 li
29.9072 56.9038 li
29.7139 55.0391 li
31.7031 54.833 li
31.231 51.0859 mo
31.4741 52.9448 li
29.4912 53.2041 li
29.248 51.3452 li
31.231 51.0859 li
30.7441 47.3672 mo
30.9868 49.2261 li
29.0039 49.4858 li
28.7612 47.627 li
30.7441 47.3672 li
30.2568 43.6489 mo
30.501 45.5083 li
28.5181 45.7681 li
28.2739 43.9092 li
30.2568 43.6489 li
29.77 39.9312 mo
30.0142 41.79 li
28.0313 42.0503 li
27.7871 40.1899 li
29.77 39.9312 li
29.2842 36.2129 mo
29.5269 38.0723 li
27.5439 38.3311 li
27.3008 36.4722 li
29.2842 36.2129 li
28.7969 32.4941 mo
29.04 34.353 li
27.0571 34.6128 li
26.814 32.7539 li
28.7969 32.4941 li
27.6392 28.3188 mo
28.0313 28.6509 li
28.376 29.2842 li
28.5532 30.6353 li
26.5698 30.895 li
26.4438 29.9282 li
26.3481 29.8472 li
27.6392 28.3188 li
24.7759 25.8979 mo
26.207 27.1089 li
24.916 28.6362 li
23.4839 27.4253 li
24.7759 25.8979 li
0 .993286 1 0 cmyk
f
268.255 259.307 mo
267.458 259.307 li
267.458 259.253 li
268.255 259.307 li
267.458 259.862 mo
267.458 259.858 li
268.255 259.858 li
269.332 259.858 li
268.255 259.858 li
267.458 259.862 li
0 .503777 .274907 0 cmyk
f
269.332 259.858 mo
268.255 259.858 li
267.458 259.858 li
267.458 259.307 li
268.255 259.307 li
269.332 259.307 li
269.332 259.858 li
273.083 259.858 mo
271.51 259.858 li
271.208 259.858 li
271.208 259.307 li
271.51 259.307 li
273.083 259.307 li
273.083 259.858 li
0 .789181 .574578 0 cmyk
f
271.208 259.858 mo
269.332 259.858 li
269.332 259.307 li
271.208 259.307 li
271.208 259.858 li
273.84 259.858 mo
273.083 259.858 li
273.083 259.307 li
273.84 259.307 li
273.84 259.858 li
266.331 259.868 mo
266.35 259.179 li
267.458 259.253 li
267.458 259.307 li
267.458 259.858 li
267.458 259.862 li
266.331 259.868 li
0 .993286 1 0 cmyk
f
329.082 259.858 mo
327.458 259.858 li
327.458 259.847 li
329.082 259.858 li
0 .789181 .574578 0 cmyk
f
327.458 259.858 mo
326.845 259.858 li
326.34 259.858 li
326.34 259.843 li
326.845 259.843 li
327.458 259.847 li
327.458 259.858 li
0 .993286 1 0 cmyk
f
314.332 259.858 mo
313.825 259.858 li
312.458 259.858 li
312.458 259.538 li
313.825 259.623 li
314.332 259.64 li
314.332 259.858 li
318.083 259.858 mo
317.08 259.858 li
316.207 259.858 li
316.207 259.7 li
317.08 259.728 li
318.083 259.728 li
318.083 259.858 li
0 .789181 .574578 0 cmyk
f
312.458 259.858 mo
311.34 259.858 li
311.34 259.468 li
312.458 259.538 li
312.458 259.858 li
316.207 259.858 mo
314.332 259.858 li
314.332 259.64 li
316.207 259.7 li
316.207 259.858 li
318.84 259.858 mo
318.083 259.858 li
318.083 259.728 li
318.84 259.728 li
318.84 259.858 li
0 .993286 1 0 cmyk
f
299.332 259.858 mo
297.55 259.858 li
297.458 259.858 li
297.458 259.307 li
297.55 259.307 li
299.332 259.307 li
299.332 259.858 li
303.083 259.858 mo
301.207 259.858 li
301.207 259.307 li
303.083 259.307 li
303.083 259.858 li
0 .789181 .574578 0 cmyk
f
297.458 259.858 mo
296.34 259.858 li
296.34 259.307 li
297.458 259.307 li
297.458 259.858 li
301.207 259.858 mo
300.805 259.858 li
299.332 259.858 li
299.332 259.307 li
300.805 259.307 li
301.207 259.307 li
301.207 259.858 li
303.84 259.858 mo
303.083 259.858 li
303.083 259.307 li
303.84 259.307 li
303.84 259.858 li
0 .993286 1 0 cmyk
f
284.332 259.858 mo
282.458 259.858 li
282.458 259.307 li
284.332 259.307 li
284.332 259.858 li
288.083 259.858 mo
287.785 259.858 li
286.207 259.858 li
286.207 259.307 li
287.785 259.307 li
288.083 259.307 li
288.083 259.858 li
0 .789181 .574578 0 cmyk
f
282.458 259.858 mo
281.34 259.858 li
281.34 259.307 li
282.458 259.307 li
282.458 259.858 li
286.207 259.858 mo
284.53 259.858 li
284.332 259.858 li
284.332 259.307 li
284.53 259.307 li
286.207 259.307 li
286.207 259.858 li
288.84 259.858 mo
288.083 259.858 li
288.083 259.307 li
288.84 259.307 li
288.84 259.858 li
0 .993286 1 0 cmyk
f
254.335 258.895 mo
252.46 258.895 li
252.46 258.717 li
254.335 258.717 li
254.335 258.895 li
258.096 259.064 mo
256.223 258.954 li
256.23 258.717 li
258.106 258.717 li
258.096 259.064 li
0 .503777 .274907 0 cmyk
f
254.335 259.843 mo
252.46 259.843 li
252.46 258.895 li
254.335 258.895 li
254.335 259.843 li
258.074 259.843 mo
256.198 259.843 li
256.223 258.954 li
258.096 259.064 li
258.074 259.843 li
0 .789181 .574578 0 cmyk
f
252.46 259.843 mo
251.98 259.843 li
251.343 259.843 li
251.343 258.717 li
251.98 258.717 li
252.46 258.717 li
252.46 258.895 li
252.46 259.843 li
256.198 259.843 mo
255.235 259.843 li
254.335 259.843 li
254.335 258.895 li
254.335 258.717 li
255.235 258.717 li
256.23 258.717 li
256.223 258.954 li
256.198 259.843 li
258.829 259.845 mo
258.49 259.843 li
258.074 259.843 li
258.096 259.064 li
258.106 258.717 li
258.49 258.717 li
258.86 258.737 li
258.829 259.845 li
0 .993286 1 0 cmyk
f
239.336 258.717 mo
238.96 258.717 li
237.48 258.641 li
237.49 258.275 li
236.371 258.244 li
236.375 258.123 li
238.96 258.237 li
240.671 258.317 li
239.336 258.317 li
239.336 258.717 li
243.102 258.766 mo
242.215 258.717 li
241.211 258.717 li
241.211 258.342 li
242.215 258.389 li
243.11 258.48 li
243.102 258.766 li
0 .503777 .274907 0 cmyk
f
239.336 259.734 mo
238.96 259.728 li
237.45 259.705 li
237.48 258.641 li
238.96 258.717 li
239.336 258.717 li
239.336 259.734 li
243.073 259.791 mo
242.215 259.773 li
241.211 259.759 li
241.211 258.717 li
242.215 258.717 li
243.102 258.766 li
243.073 259.791 li
0 .789181 .574578 0 cmyk
f
237.45 259.705 mo
236.331 259.688 li
236.371 258.244 li
237.49 258.275 li
237.48 258.641 li
237.45 259.705 li
241.211 259.759 mo
239.336 259.734 li
239.336 258.717 li
239.336 258.317 li
240.671 258.317 li
241.211 258.342 li
241.211 258.717 li
241.211 259.759 li
243.813 259.807 mo
243.073 259.791 li
243.102 258.766 li
243.11 258.48 li
243.884 258.557 li
243.813 259.807 li
0 .993286 1 0 cmyk
f
126.435 161.097 mo
124.611 161.917 li
127.365 168.05 li
127.618 168.719 li
129.489 168.013 li
129.226 167.315 li
129.202 167.258 li
126.435 161.097 li
132.137 175.029 mo
130.266 175.735 li
130.609 176.645 li
130.639 176.715 li
133.4 182.63 li
135.213 181.784 li
132.467 175.903 li
132.137 175.029 li
138.555 188.461 mo
136.772 189.365 li
137.163 190.138 li
137.234 190.257 li
140.448 194.876 li
140.833 195.647 li
142.622 194.753 li
142.205 193.918 li
142.131 193.793 li
138.916 189.172 li
138.555 188.461 li
146.048 201.239 mo
144.416 202.397 li
146.989 206.022 li
148.596 208.558 li
150.285 207.488 li
148.665 204.93 li
148.636 204.887 li
146.048 201.239 li
154.493 213.617 mo
152.873 214.791 li
153.52 215.684 li
153.566 215.743 li
156.81 219.584 li
157.637 220.632 li
159.207 219.394 li
158.37 218.333 li
158.349 218.306 li
155.118 214.482 li
154.493 213.617 li
163.875 225.25 mo
162.318 226.506 li
163.317 227.744 li
163.437 227.869 li
166.692 230.713 li
166.744 230.756 li
168.007 231.717 li
169.219 230.125 li
167.983 229.185 li
164.819 226.42 li
163.875 225.25 li
174.863 235.074 mo
173.624 236.644 li
176.495 238.91 li
176.588 238.975 li
179.843 240.993 li
179.898 241.025 li
179.909 241.031 li
180.47 239.981 li
180.897 239.294 li
177.69 237.305 li
174.863 235.074 li
228.146 258.007 mo
226.276 257.855 li
226.28 257.784 li
226.01 257.769 li
224.577 257.648 li
222.685 257.399 li
221.49 257.224 li
221.813 255.954 li
219.676 255.412 li
219.542 255.388 li
216.381 255.031 li
214.541 254.461 li
214.237 255.443 li
212.92 255.056 li
209.665 254.157 li
207.053 253.387 li
207.276 252.667 li
206.754 252.505 li
203.544 251.149 li
203.451 251.115 li
200.233 250.117 li
199.908 251.162 li
199.9 251.16 li
196.645 250.541 li
193.39 249.188 li
192.611 248.871 li
193.57 247.17 li
190.626 245.511 li
187.446 243.718 li
187.215 243.529 li
185.95 245.078 li
186.247 245.321 li
186.389 245.418 li
189.644 247.253 li
192.259 248.727 li
190.135 247.861 li
186.88 246.983 li
183.741 245.354 li
183.625 245.26 li
180.37 243.378 li
177.115 241.293 li
173.86 238.851 li
170.605 235.722 li
167.35 233.525 li
164.095 231.161 li
160.84 227.272 li
157.585 223.924 li
154.33 219.962 li
151.075 215.355 li
147.82 210.714 li
144.565 206.125 li
141.31 199.932 li
138.055 194.752 li
134.8 188.774 li
131.545 182.61 li
128.29 173.617 li
125.035 167.152 li
121.78 158.804 li
118.525 157.89 li
115.904 154.848 li
118.525 155.497 li
121.158 152.898 li
121.891 154.86 li
123.764 154.16 li
123.27 152.836 li
125.035 153.489 li
125.055 153.506 li
128.29 161.523 li
131.545 169.729 li
134.8 177.552 li
138.055 184.434 li
141.31 188.555 li
144.565 195.394 li
147.82 199.958 li
151.075 205.617 li
154.33 209.964 li
157.585 213.668 li
160.84 218.644 li
164.095 222.817 li
167.35 226.18 li
170.605 228.954 li
173.86 232.036 li
177.115 234.725 li
180.37 236.64 li
183.625 238.19 li
186.88 240.798 li
190.135 242.966 li
193.39 245.573 li
196.645 247.152 li
199.9 248.845 li
203.155 249.796 li
206.41 251.35 li
209.665 253.135 li
212.92 252.975 li
216.175 254.068 li
219.43 254.6 li
222.685 255.542 li
225.94 256.735 li
229.195 257.625 li
230.27 257.734 li
229.307 257.68 li
229.029 257.633 li
228.978 257.936 li
228.152 257.89 li
228.146 258.007 li
0 .503777 .274907 0 cmyk
f
202.457 253.871 mo
200.669 253.304 li
200.923 252.553 li
200.22 252.315 li
200.094 252.281 li
198.982 252.062 li
198.854 252.708 li
197.063 252.107 li
197.142 251.699 li
196.928 251.657 li
195.556 251.115 li
195.42 251.459 li
193.688 250.741 li
193.812 250.427 li
193.757 250.406 li
193.686 250.381 li
191.951 249.843 li
191.88 250.073 li
190.173 249.458 li
190.239 249.292 li
188.494 248.604 li
188.471 248.664 li
186.898 247.923 li
186.906 247.909 li
186.799 247.849 li
183.741 245.354 li
186.88 246.983 li
190.135 247.861 li
192.259 248.727 li
192.588 248.912 li
192.611 248.871 li
193.39 249.188 li
196.645 250.541 li
199.9 251.16 li
199.908 251.162 li
199.64 252.027 li
202.811 253.01 li
204.353 253.662 li
203.452 253.408 li
202.699 253.153 li
202.457 253.871 li
205.982 255.136 mo
204.218 254.485 li
204.439 253.698 li
206.021 254.367 li
206.114 254.401 li
206.183 254.422 li
205.982 255.136 li
213.269 256.848 mo
212.92 256.751 li
211.5 256.275 li
211.705 255.551 li
209.936 255.052 li
209.885 255.039 li
209.848 255.031 li
209.703 255.673 li
209.665 255.66 li
207.831 255.454 li
208.019 254.618 li
206.759 254.334 li
207.053 253.387 li
209.665 254.157 li
212.92 255.056 li
214.237 255.443 li
214.031 256.106 li
213.413 256.001 li
213.269 256.848 li
216.923 257.708 mo
216.175 257.654 li
215.086 257.352 li
215.187 256.755 li
215.879 256.97 li
216.063 257.008 li
217.056 257.12 li
216.923 257.708 li
220.633 258.146 mo
219.43 257.887 li
218.815 257.843 li
218.93 257.332 li
219.25 257.368 li
220.668 257.727 li
220.633 258.146 li
224.33 258.928 mo
222.685 258.587 li
222.481 258.543 li
222.571 257.478 li
221.449 257.384 li
221.49 257.224 li
222.685 257.399 li
224.577 257.648 li
224.439 257.636 li
224.33 258.928 li
228.064 259.451 mo
226.196 259.284 li
226.276 257.855 li
228.146 258.007 li
228.064 259.451 li
0 .789181 .574578 0 cmyk
f
186.898 247.923 mo
186.88 247.916 li
186.799 247.849 li
186.906 247.909 li
186.898 247.923 li
190.173 249.458 mo
190.135 249.444 li
188.471 248.664 li
188.494 248.604 li
190.239 249.292 li
190.173 249.458 li
193.688 250.741 mo
193.39 250.617 li
191.88 250.073 li
191.951 249.843 li
193.686 250.381 li
193.757 250.406 li
193.812 250.427 li
193.688 250.741 li
197.063 252.107 mo
196.645 251.967 li
195.42 251.459 li
195.556 251.115 li
196.928 251.657 li
197.142 251.699 li
197.063 252.107 li
200.669 253.304 mo
199.9 253.059 li
198.854 252.708 li
198.982 252.062 li
200.094 252.281 li
200.22 252.315 li
200.923 252.553 li
200.669 253.304 li
204.218 254.485 mo
203.155 254.093 li
202.457 253.871 li
202.699 253.153 li
203.452 253.408 li
204.353 253.662 li
204.439 253.698 li
204.218 254.485 li
207.831 255.454 mo
206.41 255.294 li
205.982 255.136 li
206.183 254.422 li
206.683 254.577 li
206.759 254.334 li
208.019 254.618 li
207.831 255.454 li
211.5 256.275 mo
209.703 255.673 li
209.848 255.031 li
209.885 255.039 li
209.936 255.052 li
211.705 255.551 li
211.5 256.275 li
215.086 257.352 mo
213.269 256.848 li
213.413 256.001 li
214.031 256.106 li
213.949 256.371 li
215.187 256.755 li
215.086 257.352 li
218.815 257.843 mo
216.923 257.708 li
217.056 257.12 li
218.93 257.332 li
218.815 257.843 li
222.481 258.543 mo
220.633 258.146 li
220.668 257.727 li
221.32 257.893 li
221.449 257.384 li
222.571 257.478 li
222.481 258.543 li
226.196 259.284 mo
225.94 259.261 li
224.33 258.928 li
224.439 257.636 li
224.577 257.648 li
226.01 257.769 li
226.28 257.784 li
226.276 257.855 li
226.196 259.284 li
228.712 259.508 mo
228.064 259.451 li
228.146 258.007 li
228.152 257.89 li
228.978 257.936 li
228.712 259.508 li
0 .993286 1 0 cmyk
f
63.1899 141.705 mo
59.9351 139.284 li
56.6802 136.307 li
53.4248 130.354 li
50.1699 132.416 li
46.915 126.976 li
43.6602 117.509 li
40.4048 110.11 li
39.7271 105.96 li
39.8711 105.931 li
39.043 101.777 li
37.1499 90.1909 li
34.397 76.5112 li
34.6211 76.4849 li
33.7729 69.0332 li
33.3198 69.085 li
32.4512 61.6353 li
32.9258 61.5811 li
32.0781 54.1289 li
31.583 54.186 li
31.439 52.9492 li
31.4741 52.9448 li
31.231 51.0859 li
31.2212 51.0869 li
30.7119 46.7192 li
30.9941 46.6782 li
33.895 66.5181 li
37.1499 87.6929 li
40.4048 103.993 li
43.6602 115.286 li
46.915 120.213 li
50.1699 128.582 li
53.4248 129.684 li
56.6802 133.976 li
56.9702 133.509 li
59.9351 134.363 li
63.1899 137.644 li
65.0122 141.412 li
63.1899 141.705 li
70.647 144.863 mo
69.7002 144.587 li
69.1738 144.037 li
69.7002 143.972 li
70.647 144.863 li
47.6792 145.481 mo
46.915 144.81 li
43.6602 138.099 li
43.1279 135.656 li
43.6602 135.864 li
46.915 143.68 li
47.6792 145.481 li
81.5791 153.202 mo
79.4648 152.02 li
76.21 148.448 li
73.8789 146.361 li
76.21 144.66 li
79.4648 150.87 li
81.5791 153.202 li
56.6802 154.664 mo
53.7158 150.895 li
56.6802 151.978 li
58.1392 153.274 li
56.6802 154.664 li
66.4448 157.894 mo
66.2612 157.575 li
66.4448 157.703 li
66.5679 157.716 li
66.4448 157.894 li
0 .503777 .274907 0 cmyk
f
30.0259 51.2432 mo
29.8008 49.3823 li
30.9868 49.2261 li
30.7441 47.3672 li
29.5762 47.52 li
29.501 46.896 li
30.7119 46.7192 li
31.2212 51.0869 li
30.0259 51.2432 li
30.3979 54.3208 mo
30.251 53.105 li
31.439 52.9492 li
31.583 54.186 li
30.3979 54.3208 li
31.854 69.252 mo
31.7393 68.0239 li
33.0571 67.8882 li
32.8643 66.0229 li
31.564 66.1572 li
31.3892 64.291 li
32.6709 64.1582 li
32.4771 62.292 li
31.2129 62.4243 li
31.1528 61.7832 li
32.4512 61.6353 li
33.3198 69.085 li
31.854 69.252 li
32.2651 73.625 mo
32.1831 72.7471 li
32.2822 73.623 li
32.2651 73.625 li
33.6719 88.6069 mo
33.4961 86.7339 li
34.229 86.6021 li
34.5552 88.4482 li
33.6719 88.6069 li
39.043 101.777 mo
38.4048 98.5752 li
36.4438 98.9673 li
36.5542 99.519 li
35.6821 99.6763 li
35.3052 97.8389 li
37.0498 97.5249 li
36.7168 95.6802 li
34.9268 96.002 li
34.5498 94.165 li
36.3848 93.834 li
36.0518 91.9893 li
34.1719 92.3281 li
33.895 90.98 li
33.8481 90.481 li
34.8809 90.2949 li
35.106 91.5649 li
37.0752 91.2173 li
35.771 83.8311 li
33.8018 84.1792 li
33.9048 84.7651 li
33.3169 84.8262 li
33.1421 82.959 li
34.605 82.8071 li
34.4121 80.9429 li
32.9658 81.0923 li
32.791 79.2251 li
34.2178 79.0771 li
34.0249 77.2129 li
32.6162 77.3589 li
32.4409 75.4922 li
32.4941 75.4858 li
32.6338 76.7109 li
34.397 76.5112 li
37.1499 90.1909 li
39.043 101.777 li
36.438 103.35 mo
36.0601 101.513 li
36.9199 101.358 li
37.2871 103.198 li
36.438 103.35 li
39.3911 118.058 mo
39.0239 116.218 li
39.9502 116.059 li
40.3999 117.884 li
39.3911 118.058 li
42.9238 124.252 mo
41.3408 125.474 li
42.4858 126.958 li
44.0698 125.737 li
42.9238 124.252 li
47.0088 134.931 mo
45.814 135.382 li
45.979 135.82 li
46.0181 135.909 li
46.6401 137.171 li
48.4341 136.287 li
47.833 135.068 li
47.6851 134.676 li
47.3179 134.814 li
48.7598 133.962 li
47.7832 132.309 li
45.0908 127.453 li
44.043 128.034 li
43.166 128.365 li
43.8281 130.119 li
44.2031 129.977 li
45.1221 131.635 li
44.4902 131.873 li
45.1519 133.628 li
46.041 133.292 li
46.0542 133.315 li
47.0088 134.931 li
49.2632 137.968 mo
47.4688 138.853 li
48.2969 140.534 li
50.0908 139.65 li
49.2632 137.968 li
50.0479 141.762 mo
49.126 142.216 li
49.2729 142.514 li
50.5371 143.002 li
51.9722 142.436 li
51.2378 140.576 li
49.8032 141.142 li
50.0479 141.762 li
56.1709 145.161 mo
56.585 145.535 li
56.9189 145.166 li
57.4648 145.168 li
58.3188 144.085 li
56.749 142.847 li
56.7339 142.866 li
56.6602 142.787 li
56.6162 142.828 li
54.2168 139.718 li
53.9521 139.479 li
53.2798 139.062 li
52.2261 140.762 li
52.7441 141.083 li
52.896 141.281 li
52.6938 141.47 li
53.918 142.781 li
53.9971 142.708 li
55.8882 145.16 li
56.1709 145.161 li
59.3169 145.306 mo
57.978 146.792 li
59.2651 147.952 li
59.5239 148.121 li
59.6519 148.179 li
60.2441 146.867 li
60.605 146.467 li
59.3169 145.306 li
62.1841 147.127 mo
61.3618 148.95 li
62.7788 149.589 li
62.9189 149.64 li
63.2271 149.727 li
63.769 147.802 li
63.5332 147.735 li
62.1841 147.127 li
65.5742 148.311 mo
65.0322 150.235 li
66.0581 150.525 li
66.5542 150.804 li
67.5361 149.062 li
66.936 148.724 li
66.7158 148.632 li
65.5742 148.311 li
69.1689 149.982 mo
68.187 151.725 li
69.209 152.301 li
69.5059 152.411 li
70.1948 152.547 li
70.582 150.585 li
70.0508 150.48 li
69.1689 149.982 li
72.4219 150.947 mo
72.0352 152.91 li
72.583 153.018 li
73.3921 153.519 li
74.4458 151.82 li
73.4819 151.222 li
73.1489 151.091 li
72.4219 150.947 li
66.5679 157.716 mo
66.4448 157.703 li
66.2612 157.575 li
63.1899 152.259 li
59.9351 151.563 li
58.1392 153.274 li
56.6802 151.978 li
53.7158 150.895 li
53.4248 150.525 li
50.1699 147.669 li
47.6792 145.481 li
46.915 143.68 li
43.6602 135.864 li
43.1279 135.656 li
40.5322 123.729 li
41.7788 122.768 li
41.3481 122.209 li
41.2339 121.545 li
40.124 121.737 li
39.7578 119.897 li
40.8501 119.709 li
41.1689 121.005 li
43.1108 120.527 li
41.3809 113.507 li
41.3369 113.286 li
39.376 113.677 li
39.4238 113.92 li
39.4341 113.963 li
39.501 114.234 li
38.6582 114.379 li
38.291 112.539 li
39.6431 112.307 li
39.3252 110.459 li
37.9238 110.7 li
37.5571 108.86 li
39.0059 108.611 li
38.688 106.763 li
37.1909 107.021 li
37.1499 106.817 li
36.814 105.183 li
37.6538 105.039 li
37.9102 106.322 li
39.7271 105.96 li
40.4048 110.11 li
43.6602 117.509 li
46.915 126.976 li
50.1699 132.416 li
53.4248 130.354 li
56.6802 136.307 li
59.9351 139.284 li
63.1899 141.705 li
65.0122 141.412 li
66.2061 143.883 li
63.7168 143.602 li
62.9629 142.646 li
61.3921 143.884 li
62.4048 145.168 li
63.0781 145.543 li
66.333 145.91 li
66.812 145.846 li
69.2202 144.896 li
68.895 144.072 li
69.1738 144.037 li
69.7002 144.587 li
70.647 144.863 li
72.9551 147.035 li
73.8789 146.361 li
76.21 148.448 li
79.4648 152.02 li
81.5791 153.202 li
82.6631 154.398 li
79.4648 153.57 li
76.21 152.482 li
72.9551 156.376 li
69.7002 153.213 li
66.5679 157.716 li
0 .789181 .574578 0 cmyk
f
29.8008 49.3823 mo
29.5762 47.52 li
30.7441 47.3672 li
30.9868 49.2261 li
29.8008 49.3823 li
30.251 53.105 mo
30.0259 51.2432 li
31.2212 51.0869 li
31.231 51.0859 li
31.4741 52.9448 li
31.439 52.9492 li
30.251 53.105 li
31.3892 64.291 mo
31.2129 62.4243 li
32.4771 62.292 li
32.6709 64.1582 li
31.3892 64.291 li
31.7393 68.0239 mo
31.564 66.1572 li
32.8643 66.0229 li
33.0571 67.8882 li
31.7393 68.0239 li
32.4409 75.4922 mo
32.2651 73.625 li
32.2822 73.623 li
32.4941 75.4858 li
32.4409 75.4922 li
32.791 79.2251 mo
32.6162 77.3589 li
34.0249 77.2129 li
34.2178 79.0771 li
32.791 79.2251 li
33.1421 82.959 mo
32.9658 81.0923 li
34.4121 80.9429 li
34.605 82.8071 li
33.1421 82.959 li
33.4961 86.7339 mo
33.3169 84.8262 li
33.9048 84.7651 li
34.229 86.6021 li
33.4961 86.7339 li
33.8481 90.481 mo
33.6719 88.6069 li
34.5552 88.4482 li
34.8809 90.2949 li
33.8481 90.481 li
34.5498 94.165 mo
34.1719 92.3281 li
36.0518 91.9893 li
36.3848 93.834 li
34.5498 94.165 li
35.3052 97.8389 mo
34.9268 96.002 li
36.7168 95.6802 li
37.0498 97.5249 li
35.3052 97.8389 li
36.0601 101.513 mo
35.6821 99.6763 li
36.5542 99.519 li
36.9199 101.358 li
36.0601 101.513 li
36.814 105.183 mo
36.438 103.35 li
37.2871 103.198 li
37.6538 105.039 li
36.814 105.183 li
37.5571 108.86 mo
37.1909 107.021 li
38.688 106.763 li
39.0059 108.611 li
37.5571 108.86 li
38.291 112.539 mo
37.9238 110.7 li
39.3252 110.459 li
39.6431 112.307 li
38.291 112.539 li
39.0239 116.218 mo
38.6582 114.379 li
39.501 114.234 li
39.9502 116.059 li
39.0239 116.218 li
39.7578 119.897 mo
39.3911 118.058 li
40.3999 117.884 li
40.8501 119.709 li
39.7578 119.897 li
40.5322 123.729 mo
40.4048 123.144 li
40.124 121.737 li
41.2339 121.545 li
41.3481 122.209 li
41.7788 122.768 li
40.5322 123.729 li
42.4858 126.958 mo
41.3408 125.474 li
42.9238 124.252 li
44.0698 125.737 li
42.4858 126.958 li
43.8281 130.119 mo
43.166 128.365 li
44.043 128.034 li
43.3408 128.423 li
44.2031 129.977 li
43.8281 130.119 li
45.1519 133.628 mo
44.4902 131.873 li
45.1221 131.635 li
46.04 133.291 li
46.041 133.292 li
45.1519 133.628 li
46.6401 137.171 mo
46.0181 135.909 li
45.979 135.82 li
45.814 135.382 li
47.0088 134.931 li
47.0381 134.98 li
47.3179 134.814 li
47.6851 134.676 li
47.833 135.068 li
48.4341 136.287 li
46.6401 137.171 li
48.2969 140.534 mo
47.4688 138.853 li
49.2632 137.968 li
50.0908 139.65 li
48.2969 140.534 li
53.918 142.781 mo
52.6938 141.47 li
52.896 141.281 li
53.9971 142.708 li
53.918 142.781 li
56.689 142.923 mo
56.6162 142.828 li
56.6602 142.787 li
56.7339 142.866 li
56.689 142.923 li
50.5371 143.002 mo
49.2729 142.514 li
49.126 142.216 li
50.0479 141.762 li
49.8032 141.142 li
51.2378 140.576 li
51.9722 142.436 li
50.5371 143.002 li
56.585 145.535 mo
56.1709 145.161 li
56.9189 145.166 li
56.585 145.535 li
59.6519 148.179 mo
59.5239 148.121 li
59.2651 147.952 li
57.978 146.792 li
59.3169 145.306 li
60.605 146.467 li
60.2441 146.867 li
59.6519 148.179 li
63.2271 149.727 mo
62.9189 149.64 li
62.7788 149.589 li
61.3618 148.95 li
62.1841 147.127 li
63.5332 147.735 li
63.769 147.802 li
63.2271 149.727 li
66.5542 150.804 mo
66.0581 150.525 li
65.0322 150.235 li
65.5742 148.311 li
66.7158 148.632 li
66.936 148.724 li
67.5361 149.062 li
66.5542 150.804 li
70.1948 152.547 mo
69.5059 152.411 li
69.209 152.301 li
68.187 151.725 li
69.1689 149.982 li
70.0508 150.48 li
70.582 150.585 li
70.1948 152.547 li
73.3921 153.519 mo
72.583 153.018 li
72.0352 152.91 li
72.4219 150.947 li
73.1489 151.091 li
73.4819 151.222 li
74.4458 151.82 li
73.3921 153.519 li
0 .993286 1 0 cmyk
f
89.23 154.703 mo
85.9751 153.362 li
83.3218 154.219 li
83.0391 154.042 li
85.9751 150.179 li
89.23 153.6 li
89.689 154.186 li
89.23 154.703 li
98.9951 156.693 mo
95.7402 153.168 li
95.1069 152.753 li
95.7402 151.547 li
98.9951 153.119 li
101.214 152.927 li
98.9951 156.693 li
112.015 156.745 mo
108.76 152.374 li
107.832 152.385 li
108.76 150.23 li
112.015 155.472 li
114.253 154.935 li
112.015 156.745 li
0 .503777 .274907 0 cmyk
f
82.769 154.397 mo
83.0391 154.042 li
83.3218 154.219 li
82.769 154.397 li
0 .789181 .574578 0 cmyk
f
28.4121 32.5449 mo
28.3071 31.9111 li
28.353 31.9048 li
28.4702 32.5371 li
28.4121 32.5449 li
29.02 36.2471 mo
28.7158 34.396 li
28.812 34.3833 li
29.1538 36.23 li
29.02 36.2471 li
29.5239 39.313 mo
29.3242 38.0981 li
29.4951 38.0762 li
29.7192 39.2852 li
29.5239 39.313 li
108.76 135.52 mo
108.336 135.397 li
108.76 134.933 li
110.848 134.084 li
108.76 135.52 li
92.4849 135.585 mo
90.5439 133.832 li
92.4849 131.422 li
94.3262 135.074 li
92.4849 135.585 li
82.7202 136.299 mo
79.4648 133.888 li
78.9561 132.345 li
79.4648 132.488 li
82.7202 130.985 li
85.9751 129.641 li
86.938 131.364 li
85.9751 130.825 li
82.7202 136.299 li
102.25 137.095 mo
100.19 134.492 li
102.25 131.278 li
104.195 135.589 li
102.25 137.095 li
115.27 138.335 mo
112.289 133.707 li
115.27 134.767 li
116.511 138.149 li
115.27 138.335 li
0 .503777 .274907 0 cmyk
f
27.7759 32.6279 mo
27.7002 32 li
28.3071 31.9111 li
28.4121 32.5449 li
27.7759 32.6279 li
28.2261 36.3511 mo
28.001 34.4893 li
28.7158 34.396 li
29.02 36.2471 li
28.2261 36.3511 li
28.6011 39.4482 mo
28.4512 38.2129 li
29.3242 38.0981 li
29.5239 39.313 li
28.6011 39.4482 li
0 .789181 .574578 0 cmyk
f
28.001 34.4893 mo
27.7759 32.6279 li
28.4121 32.5449 li
28.4702 32.5371 li
28.812 34.3833 li
28.7158 34.396 li
28.001 34.4893 li
28.4512 38.2129 mo
28.2261 36.3511 li
29.02 36.2471 li
29.1538 36.23 li
29.4951 38.0762 li
29.3242 38.0981 li
28.4512 38.2129 li
0 .993286 1 0 cmyk
f
333.84 258.592 mo
336.61 258.592 li
339.865 258.592 li
341.34 258.592 li
341.34 260.592 li
339.865 260.592 li
336.61 260.592 li
333.84 260.592 li
333.84 258.592 li
318.84 258.592 mo
320.335 258.592 li
323.59 258.592 li
326.34 258.592 li
326.34 260.592 li
323.59 260.592 li
320.335 260.592 li
318.84 260.592 li
318.84 258.592 li
303.84 258.592 mo
304.06 258.592 li
307.315 258.592 li
310.57 258.592 li
311.34 258.592 li
311.34 260.592 li
310.57 260.592 li
307.315 260.592 li
304.06 260.592 li
303.84 260.592 li
303.84 258.592 li
288.84 258.592 mo
291.04 258.592 li
294.295 258.592 li
296.34 258.592 li
296.34 260.592 li
294.295 260.592 li
291.04 260.592 li
288.84 260.592 li
288.84 258.592 li
273.84 258.592 mo
274.765 258.592 li
278.02 258.592 li
281.275 258.592 li
281.34 258.592 li
281.34 260.592 li
281.275 260.592 li
278.02 260.592 li
274.765 260.592 li
273.84 260.592 li
273.84 258.592 li
258.872 258.328 mo
261.773 258.409 li
265.028 258.501 li
266.368 258.539 li
266.313 260.538 li
264.972 260.5 li
261.717 260.409 li
258.815 260.327 li
258.872 258.328 li
243.902 258.227 mo
245.498 258.317 li
248.725 258.317 li
251.343 258.317 li
251.343 260.317 li
248.725 260.317 li
245.47 260.317 li
245.414 260.316 li
243.79 260.224 li
243.902 258.227 li
229.029 257.633 mo
229.307 257.68 li
232.492 257.859 li
235.733 257.951 li
236.379 257.969 li
236.323 259.968 li
235.677 259.95 li
232.422 259.858 li
232.394 259.857 li
229.139 259.673 li
229.028 259.661 li
228.696 259.605 li
229.029 257.633 li
214.541 254.461 mo
216.381 255.031 li
219.542 255.388 li
219.676 255.412 li
221.813 255.954 li
221.32 257.893 li
219.25 257.368 li
216.063 257.008 li
215.879 256.97 li
213.949 256.371 li
214.541 254.461 li
200.233 250.117 mo
203.451 251.115 li
203.544 251.149 li
206.754 252.505 li
207.276 252.667 li
206.683 254.577 li
206.114 254.401 li
206.021 254.367 li
202.811 253.01 li
199.64 252.027 li
200.233 250.117 li
187.215 243.529 mo
187.446 243.718 li
190.626 245.511 li
193.57 247.17 li
192.588 248.912 li
189.644 247.253 li
186.389 245.418 li
186.247 245.321 li
185.95 245.078 li
187.215 243.529 li
174.863 235.074 mo
177.69 237.305 li
180.897 239.294 li
180.37 240.143 li
180.842 239.262 li
180.853 239.267 li
179.909 241.031 li
179.898 241.025 li
179.843 240.993 li
176.588 238.975 li
176.495 238.91 li
173.624 236.644 li
174.863 235.074 li
163.875 225.25 mo
164.819 226.42 li
167.983 229.185 li
169.219 230.125 li
168.007 231.717 li
166.744 230.756 li
166.692 230.713 li
163.437 227.869 li
163.317 227.744 li
162.318 226.506 li
163.875 225.25 li
154.493 213.617 mo
155.118 214.482 li
158.349 218.306 li
158.37 218.333 li
159.207 219.394 li
157.637 220.632 li
156.81 219.584 li
153.566 215.743 li
153.52 215.684 li
152.873 214.791 li
154.493 213.617 li
146.048 201.239 mo
148.636 204.887 li
148.665 204.93 li
150.285 207.488 li
148.596 208.558 li
146.989 206.022 li
144.416 202.397 li
146.048 201.239 li
138.555 188.461 mo
138.916 189.172 li
142.131 193.793 li
142.205 193.918 li
142.622 194.753 li
140.833 195.647 li
140.448 194.876 li
137.234 190.257 li
137.163 190.138 li
136.772 189.365 li
138.555 188.461 li
132.137 175.029 mo
132.467 175.903 li
135.213 181.784 li
133.4 182.63 li
130.639 176.715 li
130.609 176.645 li
130.266 175.735 li
132.137 175.029 li
126.435 161.097 mo
129.202 167.258 li
129.226 167.315 li
129.489 168.013 li
127.618 168.719 li
127.365 168.05 li
124.611 161.917 li
126.435 161.097 li
118.881 149.399 mo
119.205 150.02 li
122.026 150.736 li
122.717 151.355 li
123.764 154.16 li
121.891 154.86 li
121.026 152.545 li
118.279 151.849 li
117.638 151.342 li
117.107 150.324 li
118.881 149.399 li
106.434 143.927 mo
108.288 142.934 li
109.212 142.923 li
112.133 144.405 li
113.462 144.068 li
113.954 146.006 li
112.261 146.436 li
111.563 146.358 li
108.773 144.943 li
107.378 145.69 li
106.434 143.927 li
97.5 145.19 mo
98.5591 145.548 li
101.056 141.466 li
102.762 142.509 li
99.8481 147.273 li
98.6748 147.698 li
96.8589 147.084 li
97.5 145.19 li
87.8408 142.33 mo
89.1929 143.778 li
91.3008 141.282 li
92.8291 142.572 li
89.9941 145.928 li
88.499 145.966 li
86.3789 143.695 li
87.8408 142.33 li
73.4858 144.204 mo
75.4121 141.653 li
76.5059 141.301 li
79.5752 142.252 li
80.2739 142.193 li
80.4419 144.186 li
79.5488 144.261 li
79.1689 144.22 li
76.585 143.419 li
75.083 145.409 li
73.4858 144.204 li
62.9629 142.646 mo
63.7168 143.602 li
66.3091 143.894 li
68.4858 143.036 li
69.2202 144.896 li
66.812 145.846 li
66.333 145.91 li
63.0781 145.543 li
62.4048 145.168 li
61.3921 143.884 li
62.9629 142.646 li
53.2798 139.062 mo
53.9521 139.479 li
54.2168 139.718 li
56.689 142.923 li
56.749 142.847 li
58.3188 144.085 li
57.4648 145.168 li
55.8882 145.16 li
52.7441 141.083 li
52.2261 140.762 li
53.2798 139.062 li
45.0908 127.453 mo
47.7832 132.309 li
48.7598 133.962 li
47.0381 134.98 li
46.0542 133.315 li
46.04 133.291 li
43.3408 128.423 li
45.0908 127.453 li
41.3369 113.286 mo
41.3809 113.507 li
43.1108 120.527 li
41.1689 121.005 li
39.4341 113.963 li
39.4238 113.92 li
39.376 113.677 li
41.3369 113.286 li
38.4048 98.5752 mo
39.8711 105.931 li
37.9102 106.322 li
36.4438 98.9673 li
38.4048 98.5752 li
35.771 83.8311 mo
37.0752 91.2173 li
35.106 91.5649 li
33.8018 84.1792 li
35.771 83.8311 li
33.7729 69.0332 mo
34.6211 76.4849 li
32.6338 76.7109 li
31.7861 69.2593 li
33.7729 69.0332 li
32.0781 54.1289 mo
32.9258 61.5811 li
30.939 61.8071 li
30.0908 54.355 li
32.0781 54.1289 li
30.0313 39.2393 mo
31.1152 46.6611 li
29.1362 46.9502 li
28.0522 39.5278 li
30.0313 39.2393 li
24.519 25.7412 mo
27.7739 27.1172 li
28.375 27.894 li
28.9482 31.8179 li
26.9688 32.1069 li
26.4771 28.7402 li
23.7412 27.583 li
24.519 25.7412 li
f
344.333 259.307 mo
343.12 259.307 li
342.458 259.307 li
342.458 259.049 li
343.12 259.088 li
344.333 259.088 li
344.333 259.307 li
346.375 259.307 mo
346.207 259.307 li
346.207 259.088 li
346.375 259.088 li
346.375 259.307 li
344.333 259.875 mo
343.12 259.875 li
342.458 259.873 li
342.458 259.858 li
343.12 259.858 li
344.333 259.858 li
344.333 259.875 li
346.375 259.875 mo
346.207 259.875 li
346.207 259.858 li
346.375 259.858 li
346.375 259.875 li
0 .503777 .274907 0 cmyk
f
342.458 259.307 mo
341.34 259.307 li
341.34 258.982 li
342.458 259.049 li
342.458 259.307 li
346.207 259.307 mo
344.333 259.307 li
344.333 259.088 li
346.207 259.088 li
346.207 259.307 li
342.458 259.873 mo
341.34 259.869 li
341.34 259.858 li
342.458 259.858 li
342.458 259.873 li
346.207 259.875 mo
344.333 259.875 li
344.333 259.858 li
346.207 259.858 li
346.207 259.875 li
0 .993286 1 0 cmyk
f
329.333 259.86 mo
329.082 259.858 li
329.333 259.858 li
329.333 259.86 li
333.083 259.865 mo
331.207 259.865 li
331.207 259.858 li
333.083 259.858 li
333.083 259.865 li
0 .503777 .274907 0 cmyk
f
331.207 259.865 mo
330.1 259.865 li
329.333 259.86 li
329.333 259.858 li
330.1 259.858 li
331.207 259.858 li
331.207 259.865 li
333.84 259.865 mo
333.355 259.865 li
333.083 259.865 li
333.083 259.858 li
333.355 259.858 li
333.84 259.858 li
333.84 259.865 li
0 .993286 1 0 cmyk
f
329.333 259.307 mo
327.458 259.307 li
327.458 258.751 li
329.333 258.853 li
329.333 259.307 li
333.083 259.307 mo
331.207 259.307 li
331.207 258.895 li
333.083 258.895 li
333.083 259.307 li
0 .503777 .274907 0 cmyk
f
327.458 259.307 mo
326.845 259.307 li
326.34 259.307 li
326.34 258.717 li
326.845 258.717 li
327.458 258.751 li
327.458 259.307 li
331.207 259.307 mo
330.1 259.307 li
329.333 259.307 li
329.333 258.853 li
330.1 258.895 li
331.207 258.895 li
331.207 259.307 li
333.84 259.307 mo
333.355 259.307 li
333.083 259.307 li
333.083 258.895 li
333.355 258.895 li
333.84 258.895 li
333.84 259.307 li
0 .993286 1 0 cmyk
f
318.083 259.307 mo
317.08 259.307 li
316.207 259.307 li
316.207 258.592 li
314.332 258.592 li
314.332 259.307 li
313.825 259.307 li
312.458 259.307 li
312.458 258.592 li
310.583 258.592 li
310.57 258.592 li
308.707 258.592 li
307.315 258.592 li
306.832 258.592 li
304.958 258.592 li
304.06 258.592 li
303.083 258.592 li
303.083 258.835 li
301.207 258.596 li
301.207 258.592 li
301.181 258.592 li
300.805 258.544 li
297.55 258.167 li
294.295 257.777 li
291.04 257.556 li
287.785 257.264 li
284.53 256.166 li
281.275 255.535 li
278.02 255.067 li
274.765 254.106 li
271.51 253.954 li
268.255 253.184 li
265 252.07 li
261.745 251.564 li
258.49 249.976 li
255.235 248.373 li
251.98 247.311 li
248.725 245.55 li
245.47 243.838 li
242.215 242.548 li
238.96 240.094 li
235.705 237.949 li
232.45 235.645 li
229.195 232.628 li
225.94 229.673 li
222.685 226.485 li
219.43 222.227 li
216.175 218.464 li
212.92 214.443 li
209.665 209.007 li
206.41 204.427 li
203.155 198.27 li
199.9 191.347 li
196.645 184.229 li
193.39 176.509 li
190.135 169.962 li
186.88 162.771 li
183.625 159.025 li
180.37 156.574 li
177.115 159.538 li
173.86 151.896 li
170.605 154.022 li
167.35 153.093 li
164.095 154.362 li
160.84 155.884 li
157.585 153.025 li
154.33 153.106 li
151.075 155.679 li
147.82 154.321 li
144.565 154.96 li
141.31 155.258 li
138.055 151.818 li
134.8 155.6 li
131.545 148.933 li
128.29 156.34 li
125.055 153.506 li
125.035 153.457 li
121.78 144.368 li
118.525 143.639 li
116.511 138.149 li
118.525 137.848 li
121.78 137.306 li
125.035 126.409 li
128.29 133.863 li
131.545 134.819 li
134.8 132.562 li
138.055 128.65 li
141.31 135.816 li
144.565 136.14 li
147.82 133.775 li
151.075 137.078 li
154.33 134.905 li
157.585 133.465 li
160.84 136.856 li
164.095 135.834 li
167.35 136.441 li
170.605 140.188 li
173.86 133.353 li
177.115 137.843 li
180.37 133.605 li
183.625 139.94 li
186.88 148.469 li
190.135 155.569 li
193.39 159.733 li
196.645 166.615 li
199.9 174.157 li
203.155 180.551 li
206.41 187.022 li
209.665 193.335 li
212.92 200.822 li
216.175 205.817 li
219.43 211.302 li
222.685 215.832 li
225.94 220.993 li
229.195 224.078 li
232.45 226.889 li
235.705 230.719 li
238.96 232.962 li
242.215 236.814 li
245.47 238.471 li
248.725 240.429 li
251.98 241.932 li
255.235 243.261 li
258.49 244.741 li
261.745 246.635 li
265 247.833 li
268.255 248.486 li
271.51 249.562 li
274.765 250.997 li
278.02 251.638 li
281.275 252.684 li
284.53 253.324 li
287.785 253.97 li
291.04 254.63 li
294.295 255.592 li
297.55 255.707 li
300.805 256.251 li
304.06 256.742 li
307.315 257.221 li
310.57 257.598 li
313.825 257.957 li
317.08 258.237 li
320.335 258.237 li
322.745 258.592 li
321.832 258.592 li
320.335 258.592 li
319.958 258.592 li
318.083 258.592 li
318.083 259.307 li
0 .503777 .274907 0 cmyk
f
301.207 258.596 mo
301.181 258.592 li
301.207 258.592 li
301.207 258.596 li
303.84 258.932 mo
303.083 258.835 li
303.083 258.592 li
304.06 258.592 li
304.958 258.592 li
304.06 258.592 li
303.84 258.592 li
303.84 258.932 li
312.458 259.307 mo
311.34 259.307 li
311.34 258.592 li
310.583 258.592 li
312.458 258.592 li
312.458 259.307 li
316.207 259.307 mo
314.332 259.307 li
314.332 258.592 li
316.207 258.592 li
316.207 259.307 li
318.84 259.307 mo
318.083 259.307 li
318.083 258.592 li
319.958 258.592 li
318.84 258.592 li
318.84 259.307 li
0 .993286 1 0 cmyk
f
114.253 154.935 mo
115.27 154.113 li
115.904 154.848 li
115.27 154.692 li
114.253 154.935 li
92.4849 157.746 mo
89.689 154.186 li
92.4849 151.036 li
95.1069 152.753 li
92.4849 157.746 li
105.505 157.788 mo
102.25 152.838 li
101.214 152.927 li
102.25 151.169 li
105.505 152.414 li
107.832 152.385 li
105.505 157.788 li
0 .503777 .274907 0 cmyk
f
82.7202 154.461 mo
82.6631 154.398 li
82.7202 154.413 li
82.769 154.397 li
82.7202 154.461 li
0 .789181 .574578 0 cmyk
f
63.1899 136.576 mo
59.9351 128.738 li
56.9702 133.509 li
56.6802 133.425 li
53.4248 124.032 li
50.1699 114.011 li
46.915 103.818 li
43.6602 95.4053 li
40.4048 86.3872 li
37.1499 64.6128 li
33.895 50.6323 li
30.6401 36.9409 li
28.77 31.8442 li
28.9482 31.8179 li
28.375 27.894 li
27.7739 27.1172 li
27.5 27.001 li
27.3848 26.3013 li
26.1641 26.436 li
26.0229 26.376 li
27.3848 26.1709 li
30.6401 28.4531 li
33.895 36.1489 li
37.1499 49.8608 li
40.4048 64.2192 li
43.6602 76.1851 li
46.915 88.2173 li
50.1699 92.521 li
53.4248 102.472 li
56.6802 108.13 li
59.9351 114.751 li
63.1899 120.347 li
66.4448 123.562 li
69.7002 123.046 li
72.9551 132.677 li
76.21 124.018 li
78.9561 132.345 li
76.21 131.569 li
72.9551 136.32 li
69.7002 133.642 li
66.4448 131.168 li
63.1899 136.576 li
95.7402 137.879 mo
94.3262 135.074 li
95.7402 134.681 li
98.9951 132.981 li
100.19 134.492 li
98.9951 136.357 li
95.7402 137.879 li
105.505 138.493 mo
104.195 135.589 li
105.505 134.575 li
108.336 135.397 li
105.505 138.493 li
0 .503777 .274907 0 cmyk
f
27.5 27.001 mo
27.4399 26.9751 li
27.3848 26.6812 li
26.7339 26.6772 li
26.1641 26.436 li
27.3848 26.3013 li
27.5 27.001 li
0 .789181 .574578 0 cmyk
f
24.1299 26.6621 mo
24.1299 26.6621 li
24.1299 26.6621 li
24.1299 26.6621 li
110.848 134.084 mo
112.015 133.281 li
112.289 133.707 li
112.015 133.609 li
110.848 134.084 li
89.23 135.463 mo
86.938 131.364 li
89.23 132.646 li
90.5439 133.832 li
89.23 135.463 li
0 .503777 .274907 0 cmyk
f
344.333 259.858 mo
343.12 259.858 li
342.458 259.858 li
342.458 259.307 li
343.12 259.307 li
344.333 259.307 li
344.333 259.858 li
346.375 259.858 mo
346.207 259.858 li
346.207 259.307 li
346.375 259.307 li
346.375 259.858 li
0 .909697 .799313 0 cmyk
f
342.458 259.858 mo
341.34 259.858 li
341.34 259.307 li
342.458 259.307 li
342.458 259.858 li
346.207 259.858 mo
344.333 259.858 li
344.333 259.307 li
346.207 259.307 li
346.207 259.858 li
0 .993286 1 0 cmyk
f
329.333 259.858 mo
329.082 259.858 li
327.458 259.847 li
327.458 259.307 li
329.333 259.307 li
329.333 259.858 li
333.083 259.858 mo
331.207 259.858 li
331.207 259.307 li
333.083 259.307 li
333.083 259.858 li
0 .909697 .799313 0 cmyk
f
327.458 259.847 mo
326.845 259.843 li
326.34 259.843 li
326.34 259.307 li
326.845 259.307 li
327.458 259.307 li
327.458 259.847 li
331.207 259.858 mo
330.1 259.858 li
329.333 259.858 li
329.333 259.307 li
330.1 259.307 li
331.207 259.307 li
331.207 259.858 li
333.84 259.858 mo
333.355 259.858 li
333.083 259.858 li
333.083 259.307 li
333.355 259.307 li
333.84 259.307 li
333.84 259.858 li
0 .993286 1 0 cmyk
f
314.332 259.64 mo
313.825 259.623 li
312.458 259.538 li
312.458 259.307 li
313.825 259.307 li
314.332 259.307 li
314.332 259.64 li
318.083 259.728 mo
317.08 259.728 li
316.207 259.7 li
316.207 259.307 li
317.08 259.307 li
318.083 259.307 li
318.083 259.728 li
0 .909697 .799313 0 cmyk
f
312.458 259.538 mo
311.34 259.468 li
311.34 259.307 li
312.458 259.307 li
312.458 259.538 li
316.207 259.7 mo
314.332 259.64 li
314.332 259.307 li
316.207 259.307 li
316.207 259.7 li
318.84 259.728 mo
318.083 259.728 li
318.083 259.307 li
318.84 259.307 li
318.84 259.728 li
0 .993286 1 0 cmyk
f
76.5059 141.301 mo
75.4121 141.653 li
73.4858 144.204 li
75.083 145.409 li
76.585 143.419 li
79.1689 144.22 li
79.5488 144.261 li
80.4419 144.186 li
80.2739 142.193 li
79.5752 142.252 li
76.5059 141.301 li
87.8408 142.33 mo
86.3789 143.695 li
88.499 145.966 li
89.9941 145.928 li
92.8291 142.572 li
91.3008 141.282 li
89.1929 143.778 li
87.8408 142.33 li
108.773 144.943 mo
111.563 146.358 li
112.261 146.436 li
113.954 146.006 li
113.462 144.068 li
112.133 144.405 li
109.212 142.923 li
108.288 142.934 li
106.434 143.927 li
107.378 145.69 li
108.773 144.943 li
97.5 145.19 mo
96.8589 147.084 li
98.6748 147.698 li
99.8481 147.273 li
102.762 142.509 li
101.056 141.466 li
98.5591 145.548 li
97.5 145.19 li
118.525 155.497 mo
115.904 154.848 li
115.27 154.113 li
114.253 154.935 li
112.015 155.472 li
108.76 150.23 li
107.832 152.385 li
105.505 152.414 li
102.25 151.169 li
101.214 152.927 li
98.9951 153.119 li
95.7402 151.547 li
95.1069 152.753 li
92.4849 151.036 li
89.689 154.186 li
89.23 153.6 li
85.9751 150.179 li
83.0391 154.042 li
82.7202 153.84 li
81.5791 153.202 li
79.4648 150.87 li
76.21 144.66 li
73.8789 146.361 li
72.9551 145.534 li
70.647 144.863 li
69.7002 143.972 li
69.1738 144.037 li
68.6758 143.516 li
68.4858 143.036 li
68.291 143.113 li
66.4448 141.182 li
65.0122 141.412 li
63.1899 137.644 li
59.9351 134.363 li
56.9702 133.509 li
59.9351 128.738 li
63.1899 136.576 li
66.4448 131.168 li
69.7002 133.642 li
72.9551 136.32 li
76.21 131.569 li
78.9561 132.345 li
79.4648 133.888 li
82.7202 136.299 li
85.9751 130.825 li
86.938 131.364 li
89.23 135.463 li
90.5439 133.832 li
92.4849 135.585 li
94.3262 135.074 li
95.7402 137.879 li
98.9951 136.357 li
100.19 134.492 li
102.25 137.095 li
104.195 135.589 li
105.505 138.493 li
108.336 135.397 li
108.76 135.52 li
110.848 134.084 li
112.015 133.609 li
112.289 133.707 li
115.27 138.335 li
116.511 138.149 li
118.525 143.639 li
121.78 144.368 li
125.035 153.457 li
125.055 153.506 li
125.035 153.489 li
123.27 152.836 li
122.717 151.355 li
122.026 150.736 li
119.205 150.02 li
118.881 149.399 li
117.107 150.324 li
117.638 151.342 li
118.279 151.849 li
121.026 152.545 li
121.158 152.898 li
118.525 155.497 li
0 .789181 .574578 0 cmyk
f
24.1299 26.6621 mo
24.1299 26.6621 li
24.1299 26.6621 li
27.4399 26.9751 mo
26.7339 26.6772 li
27.3848 26.6812 li
27.4399 26.9751 li
66.3091 143.894 mo
66.2061 143.883 li
65.0122 141.412 li
66.4448 141.182 li
68.291 143.113 li
66.3091 143.894 li
68.895 144.072 mo
68.6758 143.516 li
69.1738 144.037 li
68.895 144.072 li
72.9551 147.035 mo
70.647 144.863 li
72.9551 145.534 li
73.8789 146.361 li
72.9551 147.035 li
82.7202 154.413 mo
82.6631 154.398 li
81.5791 153.202 li
82.7202 153.84 li
83.0391 154.042 li
82.769 154.397 li
82.7202 154.413 li
0 .909697 .799313 0 cmyk
f
28.77 31.8442 mo
27.3848 28.0688 li
24.1299 26.6621 li
24.1299 26.6621 li
24.1299 26.6621 li
26.0229 26.376 li
26.1641 26.436 li
26.7339 26.6772 li
27.4399 26.9751 li
27.5 27.001 li
27.7739 27.1172 li
28.375 27.894 li
28.9482 31.8179 li
28.77 31.8442 li
66.4448 144.376 mo
66.2061 143.883 li
66.3091 143.894 li
68.291 143.113 li
68.4858 143.036 li
68.6758 143.516 li
68.895 144.072 li
66.4448 144.376 li
75.083 145.409 mo
73.4858 144.204 li
75.4121 141.653 li
76.5059 141.301 li
79.5752 142.252 li
80.2739 142.193 li
80.4419 144.186 li
79.5488 144.261 li
79.1689 144.22 li
76.585 143.419 li
75.083 145.409 li
88.499 145.966 mo
86.3789 143.695 li
87.8408 142.33 li
89.1929 143.778 li
91.3008 141.282 li
92.8291 142.572 li
89.9941 145.928 li
88.499 145.966 li
112.261 146.436 mo
111.563 146.358 li
108.773 144.943 li
107.378 145.69 li
106.434 143.927 li
108.288 142.934 li
109.212 142.923 li
112.133 144.405 li
113.462 144.068 li
113.954 146.006 li
112.261 146.436 li
98.6748 147.698 mo
96.8589 147.084 li
97.5 145.19 li
98.5591 145.548 li
101.056 141.466 li
102.762 142.509 li
99.8481 147.273 li
98.6748 147.698 li
121.158 152.898 mo
121.026 152.545 li
118.279 151.849 li
117.638 151.342 li
117.107 150.324 li
118.881 149.399 li
119.205 150.02 li
122.026 150.736 li
122.717 151.355 li
123.27 152.836 li
121.78 152.285 li
121.158 152.898 li
311.34 259.468 mo
310.57 259.42 li
307.315 259.23 li
304.06 258.96 li
303.84 258.932 li
303.84 258.592 li
304.06 258.592 li
304.958 258.592 li
306.832 258.592 li
307.315 258.592 li
308.707 258.592 li
310.57 258.592 li
310.583 258.592 li
311.34 258.592 li
311.34 259.307 li
311.34 259.468 li
326.34 259.843 mo
323.59 259.843 li
320.335 259.728 li
318.84 259.728 li
318.84 259.307 li
318.84 258.592 li
319.958 258.592 li
320.335 258.592 li
321.832 258.592 li
322.745 258.592 li
323.59 258.717 li
326.34 258.717 li
326.34 259.307 li
326.34 259.843 li
341.34 259.869 mo
339.865 259.865 li
336.61 259.865 li
333.84 259.865 li
333.84 259.858 li
333.84 259.307 li
333.84 258.895 li
336.61 258.895 li
339.865 258.895 li
341.34 258.982 li
341.34 259.307 li
341.34 259.858 li
341.34 259.869 li
0 .993286 1 0 cmyk
f
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
24.1299 26.6621 mo
27.3848 27.1211 li
30.6401 32.7173 li
33.895 43.4502 li
37.1499 57.3032 li
40.4048 75.4683 li
43.6602 85.9272 li
46.915 96.1099 li
50.1699 103.449 li
53.4248 113.449 li
56.6802 121.063 li
59.9351 124.733 li
63.1899 129.137 li
66.4448 134.182 li
69.7002 133.724 li
72.9551 139.962 li
76.21 134.549 li
79.4648 142.531 li
82.7202 145.558 li
85.9751 140.696 li
89.23 143.356 li
92.4849 146.934 li
95.7402 143.265 li
98.9951 143.265 li
102.25 145.1 li
105.505 146.476 li
108.76 142.99 li
112.015 144.641 li
115.27 146.659 li
118.525 146.843 li
121.78 144.917 li
125.035 140.329 li
128.29 145.375 li
131.545 141.98 li
134.8 144.366 li
138.055 140.513 li
141.31 145.742 li
144.565 145.742 li
147.82 144.274 li
151.075 146.567 li
154.33 144.182 li
157.585 143.448 li
160.84 146.567 li
164.095 145.283 li
167.35 144.917 li
170.605 147.21 li
173.86 142.806 li
177.115 148.953 li
180.37 145.375 li
183.625 149.687 li
186.88 155.742 li
190.135 162.897 li
193.39 168.31 li
196.645 175.649 li
199.9 182.989 li
203.155 189.686 li
206.41 196.016 li
209.665 201.429 li
212.92 207.85 li
216.175 212.346 li
219.43 216.933 li
222.685 221.336 li
225.94 225.465 li
229.195 228.492 li
232.45 231.428 li
235.705 234.455 li
238.96 236.657 li
242.215 239.776 li
245.47 241.244 li
248.725 243.079 li
251.98 244.73 li
255.235 245.923 li
258.49 247.483 li
261.745 249.226 li
265 250.051 li
268.255 250.969 li
271.51 251.886 li
274.765 252.62 li
278.02 253.446 li
281.275 254.18 li
284.53 254.822 li
287.785 255.739 li
291.04 256.198 li
294.295 256.749 li
297.55 257.024 li
300.805 257.482 li
304.06 257.941 li
307.315 258.308 li
310.57 258.583 li
313.825 258.858 li
317.08 259.042 li
320.335 259.042 li
323.59 259.317 li
326.845 259.317 li
330.1 259.409 li
333.355 259.409 li
336.61 259.409 li
339.865 259.409 li
343.12 259.501 li
346.375 259.501 li
@
.5 lw
2 lc
346.375 4.64404 mo
346.375 7.89893 li
281.275 4.64404 mo
281.275 7.89893 li
216.175 4.64404 mo
216.175 7.89893 li
151.075 4.64404 mo
151.075 7.89893 li
85.9751 4.64404 mo
85.9751 7.89893 li
20.875 4.64404 mo
20.875 7.89893 li
346.375 261.519 mo
346.375 258.264 li
281.275 261.519 mo
281.275 258.264 li
216.175 261.519 mo
216.175 258.264 li
151.075 261.519 mo
151.075 258.264 li
85.9751 261.519 mo
85.9751 258.264 li
20.875 261.519 mo
20.875 258.264 li
20.875 4.64404 mo
346.375 4.64404 li
20.875 261.519 mo
346.375 261.519 li
.639918 .563928 .533043 .294835 cmyk
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
def
/FontBBox {-665 -325 2000 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IPWBQX+ArialMT /ArialMT findfont ct_VMDictPut
/IPWBQX+ArialMT*1 
[48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six 
/.notdef /eight 199{/.notdef}rp]
IPWBQX+ArialMT nf
IPWBQX+ArialMT*1 [10.0001 0 0 -10.0001 0 0 ]msf
18.0625 275.644 mo
(02)
[62.292 0 ]xsh
85.9141 275.644 mo
(04)
[59.542 0 ]xsh
151.016 275.644 mo
(06)
[59.542 0 ]xsh
216.109 275.644 mo
(08)
[59.542 0 ]xsh
281.211 275.644 mo
(0)sh
337.938 275.644 mo
(100)sh
346.375 4.64404 mo
343.12 4.64404 li
346.375 41.3403 mo
343.12 41.3403 li
346.375 78.0371 mo
343.12 78.0371 li
346.375 114.733 mo
343.12 114.733 li
346.375 151.43 mo
343.12 151.43 li
346.375 188.126 mo
343.12 188.126 li
346.375 224.823 mo
343.12 224.823 li
346.375 261.519 mo
343.12 261.519 li
20.875 4.64404 mo
24.1299 4.64404 li
20.875 41.3403 mo
24.1299 41.3403 li
20.875 78.0371 mo
24.1299 78.0371 li
20.875 114.733 mo
24.1299 114.733 li
20.875 151.43 mo
24.1299 151.43 li
20.875 188.126 mo
24.1299 188.126 li
20.875 224.823 mo
24.1299 224.823 li
20.875 261.519 mo
24.1299 261.519 li
346.375 261.519 mo
346.375 4.64404 li
20.875 261.519 mo
20.875 4.64404 li
@
IPWBQX+ArialMT*1 [10.0001 0 0 -10.0001 0 0 ]msf
11.25 265.457 mo
(0)sh
5.625 228.753 mo
(20)
[5.56152 0 ]xsh
5.625 192.066 mo
(40)
[5.56152 0 ]xsh
5.625 155.371 mo
(60)
[5.56152 0 ]xsh
5.625 118.667 mo
(80)
[5.56152 0 ]xsh
0 81.9722 mo
(100)sh
0 45.2847 mo
(120)sh
0 8.58154 mo
(140)sh
341.125 76.269 mo
341.125 12.894 li
176.5 12.894 li
176.5 76.269 li
341.125 76.269 li
cp
0 0 0 0 cmyk
f
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BookAntiqua def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 71 /G put
dup 78 /N put
def
/FontBBox {-136 -311 1154 1036} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/C <1C60D8A8C9B63818B1A6B2F842B10BC16CC92EA605298D74509D61F24455
84D5E2E370CBA3DBE8085067E5828F80ADBA27A3A7E50104662815AF695E07F7
332C34B49AEF08F999065E8DD920FC474D56808B8728913E9A694B052BC0B505
5ECAAAA076445BAAF41747CF437E4F995F39B330D760FEED31693C6C1B44BEE9
8D979426A15499EFED0B96E2E4A9EED5DCF34C6B842AAF6D1B021B83BED63FBD
743CA6D07E5DBCD33413> |-
/G <1C60D8A8C9B6EEDBB255DFB0DDB0085B69F92628A3EA4C0BD90268945DCF
46D6AAAFD0ADE0314913DCB03F32A3075B7460CCB2BA7CED7E419C7F7BC48EAB
38C556923B1C663FBF77ACA05A8F7E1441229773C576C560215A4DBB5ADC1A51
4798F3AE1D1BD78B7B4E715213ADBC0D44369AB589E59DB390DFE45A206FA1E9
CEE23A51C2CADA76D7AC9D3C909381278F95CFDE9E3C57E7BF77C6A0B24D3C7B
62DD53CF4D20601661AD37CA33E6BA74E319371805CCB57EED82853821E9558C
3A4C0CAFBF1F7702F4D3D73879FB42076B1D9B3022E7375A860BB452> |-
/N <1C60D8A8C9B6B278BF3A0F690715076309AA113E35DF263767883741BC63
99EFC5B8A932C7830D810344BEAB3D1B7656929231E206A17FAE2716618F9ED1
33D146B64BB9E18A24191C4B2EB17F4C7E8386358EE2D6FE8A274523E2166EBE
882672D5DE16119C1BECAFC62A2EFFDB0570BEC3C9DEBBF0E38FC40422B68D7F
713DBE7394C8318B6B11A33B48C899FD844DB02DB26F5A9E5F4F5D56125C39C6
4318FAF4F8EB8B9A35B7FAB93DC265A0044C5069C96FFCB1D91B355FECA0A04E
4C8465B1BC47E9D8F6EF1F6777A0AE306B4D8C9BAA76801FF5D3538822A5E694
9CD541AD1CF00C3BD553ED378CC1C714076E06C809BFEC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IPWBQY+BookAntiqua /BookAntiqua findfont ct_VMDictPut
/IPWBQY+BookAntiqua*1 
[67{/.notdef}rp /C 3{/.notdef}rp /G 6{/.notdef}rp /N 177{/.notdef}rp]
IPWBQY+BookAntiqua nf
IPWBQY+BookAntiqua*1 [16.0001 0 0 -16.0001 0 0 ]msf
211.75 29.394 mo
(GCN)sh
2 lw
0 lc
2 lj
1 ml
[1.875 1.875 ] 0 dsh
179.5 24.332 mo
209.5 24.332 li
0 .993286 1 0 cmyk
@
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
IPWBQY+BookAntiqua dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B78E05EAF340E05925B0F5DDA3D2BF7E3ADE00218341960418
DE3787C3039EF2918052D5E9865628C603AC1CA5CA13BAA2D32A7EAB4ADE8431
2F2EE5EB5C1536130E8D1475A5B07897AD349E87BA9BD6C0EF99B7C95399C050
70E48EC35738C65187A14719D62269F2FEC062D1600F9E11B35DACA92B0C6282
5968E726C9CDA533AFE6824A37F97E4A0D3747004A0E5DDE4E1885C515AD3DA5
5E36887846664D015DC35E506564F96EE08B74122C1C30EEBAF77C475C1E5319
C5BBA8A16CA47C392C6B988DD47690FE4E7519DE9FDE5F3CBA9D997269751C24
520AC36311D980A7841915B9D48844DFCD3F67B831024A2C537FE51271A7B5C4> |-
/a <1C60D8A8C9B7A73DA26D338A6EEFAF8BB2FAC63C743BFE9A5A80EA72EC22
660F3E4A4E885B4905407C31DEBC559084C6BF950BA9E868F8A4BB47279BACFC
6372A38C14C6D5F73AF5937386D62DD6E9221F0E422578172B23F5401A2EDD27
4458922B3E129B4E6760F094D6F7E148B510515C089E56F76AC0240BEAC5286B
C25179938A46897755CC1345E96A1D77F361C6E9BBAA16C1223DF11B055C9902
F7812886C2537E2837DB54626F97E68F5BED5FD22CAAC417C92B7ADB5C1A34FA
58EC3DDC0F438BD5644A08CF610B8D809EFF3FAFFDEAE45E56C23A4A6DBFCA6A
FE012169C76E636CCD336FF493> |-
/b <1C60D8A8C9B7924C07562B9AABFA135A4A009CE6256C1178ECF25246AB0F
9091B9E4B0D57032F10C16E3D4ACF6E6E588DFE8BE14692CF4DE8D6131E3EB0A
C82ACF1AEDF970DC9F24EC87DBC120071DA83E630F437B7E964FEFE900F50448
69C5FF63D746B183CA9C437C82D594D5B622BDB0A3F651B8B313C65011134FD2
2AE64A999AF9F4CBE9A999475A79BF07A7B421DEC9040FAC8BE714A8A368FB09
F032527FACFEEA326D1E4F5153CE398D69969A1C0B6F3C76600C9164BC03D843
26DEF038749769DC73FB3747608069295B01C087B910069E8BC8DB5F6517254D
B097015B6A19F76F673CF0699B33D3F91282A7E0B0D61E8BD82279E2F29D2649> |-
/l <1C60D8A8C9B849F23CF4A9C7C1B1CD74BC116025C9E90DA1E7118A563435
9E816CA947BB63EDAECBB4D36050657B6493C3D9366E3B69BB5508B5941F0BD6
4BBCB95ABB6AED81C0ECBCCF91104B847624B62EC01B8053083A1C6624617E56
F6BE3E8A9EE7A5A9AACD278ACE547E5B> |-
/n <1C60D8A8C9B7F51B1816CA1D547B9D412112B1108000BCD479B15D29278E
FF207C440633A34B346F87B40F04E5E8F9C3FD06BA69AD06F44D8C96AE9209E7
498AB8729996BB695FCE0B76D992BC29F7448E4EDD94CFE81D9BB5C9989A683A
B090A7835C786BCAAE46573AD51B72F79C70758202DE28EBE70CE7666E0009E5
8B750E17F7688635342A3A4A4867D024FAC7839AA7003B6BB16E2A4C4D307F4F
8B37258A1025AA52F5F9CA647EC474B0B3E170234ABEBE6186CD896F64E4903D
F224FF80948F28E0808441F171FD8CA35D9629D9DC842C46B11E25C3EDAB94A4
B6D8C6A956862134214DB61684C934E1AA4D366FB59218F15C370355> |-
/o <1C60D8A8C9B799EBC1FAB6A5BCCBA2E0F3E1D45B556ECD5A7EFF104D7703
44B1C6F7D9B6946DBAF6E65C04338513B8F66AB24ED97FF96A493E44241B17DB
2475C280908440A723BC3E93813D71653F3F8A5A881BF70FDE8A36C48CE9BF5C
083DE2E0C712117179A9F0FFCE4CE5E808F28DB42624C86F00B594BC68B03542
2881291EAE286936AFC4C4DBFC44A0E37875B5503D04A100C0> |-
/w <1C60D8A8C9B6B770206E71F5576446D84E0137B582D011D0119039802F32
A9324B77BEFB6E23072FF6CE0E2FCD5CF63D0497152B37D25E0B01F41CCE6AF1
49FF1F47AA1F1492304B643D928E442E0563B7DF5FDA8D259D5FCEAAA946CD94
82A653DD155648FCE56FA88636D95E0CD9B50D3C15FB9A9E3E494E1834B2F0EB
6BFEA10E52CD710ACBA0466847E102EC5DA51641129EA6F81C065AE9E971967D
5BDBC82BAF0484B65BA83366A16540DDF9D6BDCF000650DFD85BF504F7FF2CD4
760814B130C7F21D922A42F1BD58C8E2173C8DCDF94D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IPWBQY+BookAntiqua /Encoding get
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 119 /w put
pop
%ADOEndSubsetFont
/IPWBQY+BookAntiqua*1 
[67{/.notdef}rp /C 3{/.notdef}rp /G 6{/.notdef}rp /N 4{/.notdef}rp /S 
13{/.notdef}rp /a /b 9{/.notdef}rp /l /.notdef /n /o 
7{/.notdef}rp /w 136{/.notdef}rp]
IPWBQY+BookAntiqua nf
IPWBQY+BookAntiqua*1 [16.0001 0 0 -16.0001 0 0 ]msf
211.75 49.644 mo
(Snowball)sh
[7.5 7.5 ] 0 dsh
179.5 44.582 mo
209.5 44.582 li
0 .993286 1 0 cmyk
@
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
IPWBQY+BookAntiqua dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/K <1C60D8A8C9B60BC68914A478CD7BC29D781A5FC46A64AD449D3CE48CE6A0
D8D1E621BDD77748511BA3BEAC979377F661033527DD0104A0731B4259EA95CF
95A44546EF42A78DEC6C77954907E37BAD9A59362BAE1AD98F86F455E3ACEE47
09078615B0029C2ED1B0B8E3B9480371A00455A0679A41789E061CA8244C59CD
85E0B6CEE4C16EB6FD67CD7CDC945B4F1650DE5E18EF0FCAF98C379F5FFE20B7
96CE627616BCF7B2481CE3469180F04BAA2DC0F078CDA315CBD23136996F76C4
97210D93A78D829EF095F4FF7E3C0DF2AF2EE5A799A0660EDA02E8279E63D040
8D655B8AE3DBDC0837AC7185CA2AA3FB8361A385> |-
/T <1C60D8A8C9B7D61BC487525B76EB826DA209E599588F9271826AD29E7B1B
470F79ECCDA29092A88DC7D61A115FE211D8DAAFB2D11B3F2F839A2A0A701A0B
0BEF17A84BCC5249F6B2A2512E0DB0FE1E5B0A45260BCC3198778469683DA863
347883A81EA5761F2665FBC69EAED798D26226465F8EB3875AA46DCB2121107B
CB1A8023A1BF32082F8C018EA1D31FC89288ABAE9FA856854DC900851793E635
2092AD15A83111725E73> |-
/c <1C60D8A8C9B77FE2CEF680768ABDC36B82783C1CB263BE5484B552EB5242
6C183967149A2120762E84E5A5F6B5C649AD684D7B325F1E41BC945AF8F2DAC7
CDCB20B5E59776C0F23EBA553F9B2D8668B320EA463623ED2F4501581B079DE5
6B9766D8AA9EA20ECA2C872340A8DC0D4AE4E0A9095E6ABDAAD250B5CE6FB54B
33CD634BC3425029263C6E2EE04959225975167D82EB6C3B36220414406A1867
D3D807805A87974658B849A555> |-
/d <1C60D8A8C9B7D8BE16D35E9B07F4AA3ABC773F184EE6E3111EBEE58F30E7
4A5C093788762907EB397F545117B70EC1296402158CFCA893B8E152B3FED36E
BC67D9C422DFAFFE9752EA098BF93AACA36D5C53A4280D01E7779BF82492241F
45A36D4AC8AF6C6A73199DBE26F54AF4D2F32664041412328449449B9B052454
65D73F29B7B78A009D3DC437AB899F90B7D6DED4621A749FF3E64ED1D2D44A37
38AAA4969F7B94DE8AF8C9F8147A2815FC0785F4CBE2EE70997E006E82C0254B
9A7E6F86D0E9EAFCDC1ABC198649CF35A5DC7EBBED1C5E3BBF99F817AC072E4F
8075791A1E4D4F15CF3F8E678254E97E72C1E1> |-
/e <1C60D8A8C9B75CBB5CD8534012233D131627B1B267A3930139B0D9AA8A92
F0FCE4E7AFD311431CF43A9A551C385DD6E1190F0601E94350FECB845C0D578F
C2722E61FA69CBEAE0F028400C203AA04FEF8893BE5650D0DFFBCA997D1335B8
B2495AB693DB3A958CD3CB0FA9747B60D9A8955AC7A0BFEC37C8FF1727E2163A
214136BBCCC6F627B5031E9AA610E69502F8F74EDF1A6888C4E32F14754B5346
4DAE1272036BF9BB2B561EAF7A7AA400BAEECF1D802F90F1E3E018> |-
/r <1C60D8A8C9B730312D829ACB32CAC9B0868517203C18ED7F200FC8B47626
14F491608722BDEC68642FEEF3A308D209E98DC1910738458AE0B66D86FC6E3E
E048C4D2E5A7A6580A60283A65FA611CAF5AD8A9A819077BD620B6F2B9159736
2775A0E5A1F539B6F86C81E3735CE68ED61BDF940319D0ECD0FF998CC5FBC404
4636F5AE8659C5D7930F28ADA0487897DC17F3038C0C3AC48F30ECE6D927C22F
49EFD0A0756B4A01D3FB62E238AFFDC56D27A7E970F850F1760B32056DADA890
D9522A82A5C86A55CCC2BA28CC6D3BBE65034AE6D54B98FDFF> |-
/t <1C60D8A8C9B82424A9C27E6E9DF811EA1D553D5F4ACDACB82D3B2B7CC8F0
6EDC072CE45357C9C18F37F88428E4FE1AEE57AE61253C2D4CF5DB8D6D9C43C8
368D3E08560346F9C492D1ECBDDE132A2C001B561424A0718442FC769B95787E
D1D857BE704297D20080CCABED98B7B63124151429278CE4D7B1F664E4EACA72
8C10B5C11A88AF87F05984B7ED2C9F6B2F62BD63BFF73BD6DBB861B5A544F0> |-
/u <1C60D8A8C9B7C05416EE4959E55B08FD7B137A64C2C623C62345DAC392F7
AA285144B94C044B1E1AEFAE4BB22BB3C4E3412B9F11E4CE08A008F989AC52B5
348A037859B72491DF2EA4DB6FF87B09C5657124262D25504363D95E04BB6618
308F8962ABCDCE909D3FFAF6648AA5FB013089CF4D9FD9462E5D46CD101A3DDE
A6E74C1EB59FCB4C76400CE59B21876C3D72A1FE94A6327DF513DB5C6BB46C20
0E668840A43C7A6D04E97FF14B6F50848E3562CBF950F6DBE499536FFFB04BA5
8CA1652DF8B65E132C13A1B26CF2041D545979118068D1CAF66704CBD4B40CD1
C222703D13B7C0D5B5DEF8E05932> |-
/v <1C60D8A8C9B7E6F05C043B04D20AD453C6AF6167C604FE9CF08E8117B299
35EA238E4306655AFA49996E5A9942F663D829C7B588316E47C1C521CF1E314F
6FDAE657774D085BB35803F69D7FA0DE1B2093903004BF3E08DE5217A99EB5ED
1E44C39DB2E2DCD4D3D96209B7859470A0D5B17781B70380836DA7D5014AAEB3
4F3E8F451881BD3758B929D5DAA781EE9996505662984B50BC428503D1A001E7
A93477131E100B577650A753A628291280902F4274FF6D876B> |-
/y <1C60D8A8C9B7EF321E616E96933530A3C7C80F8F5F05B1D54A7BDD85DB23
97A86DA6E660C260348AE806AB6258A8B48350D63FC27986036F280A9B44EB09
22744F1B7626A6DCA59CFE678766220ED74C2D7F53728CB9654D3ED5D5C8F523
77189EB9E791BD7D8D7B940F0C9E245FA578B5945717E63E283D1F44F6A79401
CDF2B86E7BCA435F5802E051F0A7F39CF6100E72D8EC4EAA21F1CC8D47B43277
E3198D215E9C61D434A749BE934D4B3249605621ACA55895B44D2C38681DA59C
526DEBE51DE100627D70BBD823277C03FFF6545BF8DA88E64CE775ABBFAC23E4
C3C59AD0365D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IPWBQY+BookAntiqua /Encoding get
dup 32 /space put
dup 75 /K put
dup 84 /T put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
pop
%ADOEndSubsetFont
/IPWBQY+BookAntiqua*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 3{/.notdef}rp /G 3{/.notdef}rp /K 
2{/.notdef}rp /N 4{/.notdef}rp /S /T 12{/.notdef}rp /a /b 
/c /d /e 6{/.notdef}rp /l /.notdef /n /o 
2{/.notdef}rp /r /.notdef /t /u /v /w /.notdef 
/y 134{/.notdef}rp]
IPWBQY+BookAntiqua nf
IPWBQY+BookAntiqua*1 [16.0001 0 0 -16.0001 0 0 ]msf
211.75 69.894 mo
(Truncated K)sh
300.212 69.894 mo
(rylov)sh
1 lj
10 ml
[] 0 dsh
179.5 64.832 mo
209.5 64.832 li
0 .993286 1 0 cmyk
@
.5 lw
0 lj
176.5 76.269 mo
176.5 12.894 li
341.125 12.894 li
341.125 76.269 li
176.5 76.269 li
cp
.639918 .563928 .533043 .294835 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/IPWBQY+BookAntiqua*1 uf
/IPWBQY+BookAntiqua uf
/BookAntiqua uf
/IPWBQX+ArialMT*1 uf
/IPWBQX+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 17.0
%%AI8_CreatorVersion: 22.0.2
%%For: (Harry Zhao) ()
%%Title: (fig_relu_compare.eps)
%%CreationDate: 5/15/2019 1:00 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.B7'2/YQ/u6n+5U)`:T&t4UIgK5_+MQ65lOWJP]iaGMi@<J,<5ca#9g-kO(A-m^!%48Q.I7)3$J9h4@bck/6`e/$o"4EDFod
%F#k:)&&glu@4$BqLYZ8Thm4hUTg1.IL'7Yn*KAP<#lGQt0nE.`8k)C,U;NXM-pU[M15'#PVK.U2B#`-J%;mn.=0([s]&6VGoB`[;
%r;="t"lAms47%(#q!1$um0tE53ebP#%EbQYEGp1#!8i%I1Q03t4^X8"2Ec?5k%;/oNnNCZ.d:u`>8U/h_Le9Mf&m_\+OO,FmUeB;
%l*.UaoiWne:.I\83R^DV[oNK3J2dCdSk$ES)0jYAf5&/I!#%8#ce`gpE`0a65SS0nVEtma2\_=+_37DH:;oSBPR9oIOR;ND$/S*;
%F>t$H8)iGuS>8L1-t$YS@NlM/mWuEV^W*<3f3=:Po/F./*4K%qHJAWI!<.mQoJu+UroF5D>>BN\(3LcfL'-CU-6@`1dW_B5?jS<k
%h29^9m%7e]YJb^Cm1!3Yk@L)d2okpueki%O8`EPFebs+&Eio-Sp'>OeNgY1)(p[(:6Y`>Lm="LMJ2X3!^;NC"qdS/B-l:>A,X68i
%';9pdX7h"I:o\Je<4&+qXI95no/4=q49"UG$/U;\h61sQMXolgh>3;*5:kNE."<Wd5EA6C!%pVpi(okRcKPU$,o/_CU83Sc-%-+#
%e'g1tblOjKTI5MVT+APN9EdLW5RAY`&;IuU-ksW)ONomG#)l(YN/Vq<git6(Cm7,Ei=Eln!+7;S7o=8p"@Lu2P;rCTNDSRN'r&r8
%iOK&:I1=7/4-&`@De0$.%,<ad]H9UN=O)9R.FqQ7)*3gE,#LknHKuW6#V_QpB`<FOq6ag9i$CdT@GkcD!^G^bpmKA6:DjB9AJk3.
%@Gk@E_/B\b<#o%u6t!8j"TF9H@'N6*(5kQf"ej=g*0uH%@2VT`WZI5=@duE/#/@uM==fqq`NiWK24K;<Z<:;,:k3HlKh)>H0,.fF
%6310)87Rl=7MmJ$$`aX')$X&qIpb!%(]8s*+C,&Vp`1UeI_mk%./8X4(YF9h6b;2'quqq/T<Kcg/DN'-$@X2Qi>;8+dKQ=RSmi+9
%0h<5\KOkJope9ltKKSBRjs=USr5;Siop>`<5/n)M8&u'D,o"2q?nk1sr.If'Nl71BGC7HI0<c:h;<V`<)I+0.#X@9$80F3#prO`k
%+2L`T%+5DGEG&a#_9Bk85a[-S+QN\t'"SRJLj9Mh@HIm/_:2rr&FpYq$lQN+F;lhVr.AQ'JV&hI!`=)63IVEOKV,IcQ?>_CjpS=#
%5@GF#+K-n`\M01#q_/F0l%1l&66jPl66;$n((+K3#^qWAO7C-#a,i%I&Fr0.#kVQt@5.dHDB:`ehrB2Knp$g:ai8ai)2+J-TRU(.
%V9t@iJEk#8Q,]6-/86)38JfBs,`/J2,Yc.sQ[2lo[F?-,-\7he]#53^>leL;12[q1V'nWh,<LdtidWeE?V,b;5A8^.5Nsj##HEQs
%plY1bs,0A:Ds8qS(ZUKG/1*]Enc.$Or(?gDs(*t\\+CL:"4_HQr(-[Bs5ikI\+CL:,K5/FSqh_"5B6__hnh&E(Xbj0ZCu62OH.0W
%iI?Pd1gMLtF6Qd`#QKEpK_NXhTb5auD"do/%FoN18Dj[L+$ZNp6M2>E3qN[mO5RcU&i[Y5/k8AG^C*T@Q&kQpCAm7V(TN.%$0eSS
%G#gR!2b.KM?YBcMH?32)+D]moJPGoR+\,JRWXR4b!dKr\S:q\'8W2`JFI:&f#F0#;Ea#K57QN,lAQ8\^s7g=712K@o6Kg=d$fjE>
%LWX-nV&Y-!&2tahL&YW[i+JFshb\G(,>=jjo0D]=$e\2jpOY54n6]-e+GUQJ#1B)STU%+h,'fbPe5Rb'Ru.Phb6ZE:VP+tB)pDG?
%/.G^=QTFB!9O)!.!'^_rFrW)V*9KD=!Z6Zl6\OEB;4p9C\L=P>^;b0)!%gSt<5b/TR--eS^jhGc\6DgQgbidQ6G`$)Y69LjdQ'oX
%p*=*da+6_\.ejOiKqr,M5Xn)]%/__WP_9Ba!pMc@8mi+*1ee9QBiq>7Rto62ae5J:i/re3iJL__0F?,4VA'[gHp`<'L0/#\/ON(k
%+J',_),k8g6-E_P;5_F1Tu0sPF@WXbaMt0q?3j&$ROB]"77.9pc=*u2#\&(C6qNL4BMK+?/.GDtnPU`p@e:2H/F[I"jWZ!0*;CI+
%2U]cjN/mJ'.h!^&Y>Q1p-MZkH"YAR4,o]E7PQkR;Up2`^SW(N7/9IA3(@EGSh]So632"%!I)</p\u_eUF"!t5OW1NSG]'1GJSITT
%X;JKK8Q.sN_B;_9L,^j.Y_5B2(+9k$OB`/$*9+(/*;io0&<dI<CU('S4X2&(d#3\cqF`:h@"SSbL)h%GMA?1YTg]"q(1]TV0MED8
%JtsPi;SX1_$^;cVqjJu502MI29`U,skUO\)n6./s[?)eZ>7KiOG>j"c2UM#G_aDHtTF/KiKfp$i.,5M*6b"BuB"Y^2MN.si#^&2Z
%Y$rV2q1nFsW.QDCLl9EgQi^e5[W`:<[%tDkpl2"V4CIb)dKO1\J655"\.OZND`i`no"m1FCCoiG82?,-hFIplOFJXPT?6Yo8(9:"
%eYn't5u8^B1:%tB8M6aen%>Vd1s;PL9npVaQ^=:/kR;'i^f*ZJR59^@7I5@,ptua>:kpBS7o<k:&\>W]5`qGA+ure**GSB(>8"cB
%`EF!+1#+0XAZ2Ec(6W*4Nj?;F`<]HIY6pt^1kF(`5h/5A'u(uFpO[c%V!Fi]1Kb;X!GNKX&O$gQ)JPhJ`*`-hM]:[cC)Huj["koG
%jUl)-#T:>i&_2IWB*8i84c_[\Ifp3*:BjdT4;gKGfTc!S1$_0YRt?-0BAoNbM3;6R9SDMhWg&5H;S3&oHp`;Y=e:=U*f$s$<)sPL
%*\H??n/"\8An<A<%P<7!0U=af%1a=Wi&e"_d>P4?.-:OQSm^H1V[n\1L*j3e_1WsC&8?t(TfVIEM-?KOX:VVn"fhrJjF>-ta0$:2
%QknK'\?+H%&l\VgA7?eWXAhmW1820GJO2ca5pXkg@"ZiBAlSau*(ue%?gLmWIa!(KY@bbi$%,EH2hhLDai#H!.k)[1G9n@b&1*;>
%ETHZ(9j0*4'um^BK+aFP0=p.e*dLGg^i,+ioaC6Q$@]ZBb/A5f)1p-YKjXD*9)bA'Nu2H`a^KXOU?]D(0u?<dCHd]4A/8#A#i9\F
%A&34mXNJj+-q;Q<]^CW5"p:..go!Io,DB=a<AI;?eh2q^)4#Ls/BqutUbpq<EWiYO@]37.C*pk\kOR'2hg+J766"87,X"ht710Xk
%M9,:en[;JOPa;)1MGST"E5*V0jC-D4aZUeWdW[1:i4i)LJtXtES"dbV5cg.1ANVTT7GnXD[dhWL7LO?-=@,i[3[DpRKdd?WQbu(6
%j9;K&\e%P-Z8JYL&b5rjQ^Ea&c2k7?WA9LO9,o8p,9OmBeeYrpZI<3k6^57iD^&bOi['K@XZ&s(`$m6r70sB@-9tEL2&Q6f<`%_n
%^Ca(jl?#c1"1nnl"Cb9U^ra\D/cs5dS/9oibOA=:<ALA5#im[ID%dSY84&Vd=iB</=";?"Y*#Ye&E;]r&YtQ7W;7Vh]#8&X7a<9n
%lR:0OjQN]/nHr#",H%)pWlX906KV,]WsO_Rd!8\L8#IX^(FHl=-8Kt!>nAP`?(_fpTEPE8Od%dVN\J1&DcA15+W').'c;4,Wdqu>
%>*8kq<kMt\^Y!l'I=TA1=@!u4?qABc``<5f*;DDq92jc(#HcEuBVgFqQ'LPKV$15/^^CIn43<F@THr\,Q5+,sIHE@e"DL&3MdZnj
%Xe^`+hiRI#ik2\<c561/.7Wg:Ks;[2bc'_HK]U3FEd@HbGfpk[$/S.&GM@ArjU@@N8D]s$-sh=TU_:`^7'fG#=5lBoY[kf9jr/B6
%i7IKs5XtMl,C(!97?>O-]V>=@rN@*q2m0Hm]#"EFQa5j4Q"ArW<Q5%e@t5Wi2[fV>iEu@Pp)UnDUG>/=n/&>>(5#ua?hnof^<"M3
%hhb#rQjOSh][lpdi4n&a_Z*9f4u%."j$sh1XqXG]jj3.\S9;Jr^eIY2Qn4Ol=i:C?(;mf%!u11Go**'4!Mm"XR[,;Y@V)eE,:tdo
%@8"@Ho670VrcLb0cAM'!%lH$!J<6,]P6r+N[E++?m.pGgDXZMuAf!85'++*p^fs#Agg[kiinm?md(:X:hCR"PGWGYRM$JMgM`&*b
%cbH@DGru`;id-*[E%=L6^Yosk'LU#8oQr)Hpc2W!j#MQLm,MaFF?3a2`W1C*f_bMS3W9P6*up6M_.NC$AcE5m=`-B+Cf\7F0\@B;
%\A^T*[2Db;gJdfe*N\GMWDFG@%3L,od!'C*2-Pn\;,Q9WIb!>+Vs>He+8/a1+?Mr?f&Q"V%Bd7uOG,d45[u;Z:gA:^#)A-0P[1E2
%k>XD^ljUoc#:NoL#?T+*!3d[\$4\s6a3Fq)^lM$jcRgL1]\hbprh(I?TMRg3==eslD0!NiFuGqQkFd-c%KcWj#JKALYmueC/P#.i
%aIumTT].XblO=t?J?>K.K$3Cj"_qpU_=_/neHR^E]\nD-&]_3:YMNZnAqRG73>H%Ukh0nTqB*+'@#*e,'M(]40pcVTKP%pJ?o(4g
%`FA>uc_ea63q2I62uUZKpkPnk.S^5t801#pBac^Jlch9KDd&r#%1*<;o>)u=684J##P4lLBI,=4Sep^XEN(\t;3mIrMe2JF;6YcT
%JnF;X660.+b:;!r:3EhuCbo@XQd]<XqJ$@KU*UB#_Ne?2at9l!#JYX'/N=k)/2mYDgRkX#4UehJd*n3/mU=I*Z&p):7un)h"Eq#Z
%3f@3TV95G[<ie7"V8g$p=9`4cQ=0eUjr!"X(LIG-/S#S3HkEX?E;\l95/>Cpi2R_)BqrIV,M)[E?`t%tIL2(]rclMVTj;j#S*n1/
%1Lh*]2'>G&G]+j*2#6rT!I)[5cFa"o;eZ@!92KjK'].eCILjb;W!/j'K_jjBgkL7P[:K"3.,3OWguo(FbC0]XjiepaDkdH^)k`8D
%B\:n%kZt:EQu9^_,.H2UbOa'!fcRBhE7&=Eg[&;W2!7*in@[WX#!^o+0!nOm1_/S[rWRb/AHKR8d_2El_R.@gkP-X-Mgc"_c.((E
%T*oN`21V=]kC9ed`DY8@/n_'#`j@\nETcP>fO/h1$qd9"p`q^'$aT(G;f)S9Zik22Xe7GLp'hAM?C:goKrS##"F:7dia3(2!]t3*
%PV_*0]\ikXhs@K]RhKs.(oc9NT,ud&UUM;8B;WJsX[Ff"T+Zo&fC:XQP\5?YJ-0Ae*/t3d)/cc!SNeY@;mCJ)pECmY47im21]t,\
%CXuida/bU67fK1afJ=RBg#aqq,gAn&gb[-ulZ::BD(>;^C')i=)V<XMqu9f4@P'0&i8stc.)>G,SC)q^HmQYg+9)_B#b;Bo))-;X
%'U3$ok$L9E%'&@eNe%Pjr&L>Z!T))GGg/ijF"pn9N0NqrW4-<ba:V$&V'a)nT=iBWq>EBl=WG2/M%&]W;n-s4=ICiAR\O6Q$-7eq
%!cTbolcn('+*cT]c^%t[$Lc+.3r"5.*FUuMO+cLL'+;^KnI[*9L1:o4NC>%".KZ5=0esfH@M(@2$V0.#GjlRWL#WkA7EH)E*mdkG
%&rY,a:md3^8=1A`PL3KgTpR5K%`M"Cj2k41@R9OMrTP-rFT]@+K4f\);rmcAq9'_&5!/p#mr?aQ+WppBX,F;Kc@`q1_(SufT/4]@
%RekB\Rej5plBumeMMB#j-q[>K$;ng]l"D>9L&gV&pb9UI+bki-5Ud>p&J)jJ:c(p;-mg!F^_;I#M2FeGNS7/^CI%3A<PP+$aFBZT
%k^T&tfRK@dpj\_.&G_rqT))5]:]I>l2rj6&hkf1gYP3O5qZ!q+(]$r)HD1AGY8@&=qKagQH#GKE^[7h(FuTNA,6U<'k]dK,ZLhIF
%;YkL0\5%K:PXT_<LPHe].D(>89+ZEEIqn8u7sH.o55bS16%-13@fZMS82uNpm2*sGJjpKG]Zh9ujM9+[7H0XnU(*UgIt[!X1%eI.
%#X$PP3@"HJIlAc<J2.C[NX(Y/4mj,85b85(i2$g3UX$iaB\!-qg7*S/i1a.[Z%VX;+)9d![TZlD=e57=c<YqGVK5SLhcm:pEIY<,
%=$kFoa7]4Js"hoi#`>_=?o4Gb3Hi]7U3ZG=YMmOu(C[F?f.P*kebuhpXY,-9BWg;<YHmMe^$/!;$t$)X$I43+iQLcDXHYsLf<_JA
%7OKKZAiKrr$:M7UG[c81o&?P]ikpTVk#)_4"ejDa@)<CJ&LeDWV,//X#g/MHk5'DZlVCY^,K!4Drr:jN:alf2X7]rq)qDg?K$+$k
%?fFlQ<5Pqf8c!??dDW$iSNUY.JYFkPWW*Xl"sEPV_rq'N:gSSLp$Xj.s+XsfRZ7XQGLX-ARUbiYm7iSOh-?<H9@UE8Cs$&%rA$gs
%YC?q";:&loMP:qK#*7Kn7GWcRqf>Jo-kuV]d)gr.JI"sX-]7=9o<7\'4YfGP?h.Pi,g]&L`PRG6raH=aX=F+X`^`"W,&t6C^W+M`
%qQm`bE!$lH/,Sf)1P#;u=5YfCf=`>H^eTDRr+KWB6U$`D9'0Z\d3DO#D%r6I?Cm3Z$[<6MGouJ)7%8_WV;pa^hNI!G=6%tGMW/#k
%R7K<]KZ-b`*:>3A07)FCHiT4j4f?RcEU('?kSM9WFk_(*^-J%qd4tUNBL%Nt2-O$uc1U5"AIk\9Hu\0iT]mQLQp6cpQi\p!CJ]I'
%`iF9G,=>idZ?"B;(7&&p.I_1nm#'p(ABu@M^Xm.s?`u\cNn8lJU`rKk&K;KpEnT=Iceb\$blmV8';#=6qAq<jj__(blR%OmehBU*
%V,98t/)?\ua61/#\0pQ)NF3s5#tbMXU-c$nQfEU(T-Ak]>5![PP<sXW^ckN<\(,N(7E_dARRfdo>s;&&er0.s*mBgFE!`oZO*FE@
%CbLckG\d-$]#9h7BteAPm$&Nl\%>Wi_8h@CTr)KS(-.FFj#kGC`>G.*gc]kTPFWFX7R/jj?7i(g?ai0nT[4tb3/@%/epKR[8jlK,
%12)offLG^D(]Y7u:<J+EZdX]K4bek,Be3:p832&kMmra7d!R]c9=G6F,9CV/"M#X-Kd!_rPNA)aYeAaf@k\oV_+93bm_@(VHIP9O
%0i=_tW%G3j+kcAbM%V2]qn6]^4qKUFb:PdqDeA1\q:KW?SCWR\(W?$p^g<YV]-BuV*<K6Z/\;pX&rP2F%%K"084Ag?B"\<cD+>n_
%P*71I^k8Z!pWtY.(PPo,8@)]Pfc*J^LnUT+W):/qR6i0Y$>(P8)[bn>!55O%Dnr5YL7qF)VMd,jXW)?i(bKNK:XX?8%+$cI4%YbH
%S*<o92uWern5a+EeEoIk-=7j-7%G617Mk5=4.XNY32P@^/=6TISkSTe(G&5r$a0L)\RO/P],8)dVL'/f/4n.4U9Zt[ol2CrUnu&C
%,bHbVq:00sU+DMb=?K%jPa%pSTrF,>;7YoU@uImu?s,HY#5GNCBe!pM)#:qu$F`bD)gJs/W:$T94/":`*;$&S&WT<QLd\2bWJj\>
%UW5\EH8gY&:Xnb.;%5Od+BiPi-n\DL=2Fglb6>A0OhpYsaRH4HrY#%g&!Q'LA:\=W_&nKiG&KQNNPMcbj)1f`:juPo]Gb9-%$JoY
%)&A4$@$oHl_dY&"D4]og',`V1<O<BqdL,E;Akf\3acL0u9Ek2ib[YX]3KGmoFD#s)D\7Rt2johFR>Y"8&)"^elsMOa`c<WKLdY*N
%1hI4(M+n4b;&FAT?$25_)2O#R4cr7T8sIuT_#bpkYUrYu-meS:1_qhq:U!,ZEOp[##7GFj%Q+IhH*F_Zn+Y\Hm<Sr4YY4J4d16N3
%/MKuug7F\49.tX!XLt@UIHkhm$SOMK+Y)9-U0sQJh3J:gWRYOlm"8'#L^IJ#*--@Pe#CGu!qij!!e,"np[HrhqCiTL*--=?U(0fW
%)pRucg=)(:eO?^k)8qBOk8Aug]W29O%0?a?!.`*^EhcXumq#n7=i(K]lEAT[bq>:d*!Y66$@HaRK>"pB'f]>I7U(BS'YIghJ.$%)
%YoIY)Punnq%"cFCTeVd+19m\3VOO3&XFqYM0ksO]hL*%6bClmVKZVkSp1n,fX/tAk4VEO.Wtf:Pc6(a=H$04Ca70#WeU4GW?JXdo
%d`2'U"rEolW=ams%gNJP$>'9i5mbmB0LJ,)f/W8.`9AT1Z]*()>*Bo\0E<(sGSQQ]?D^kGap#^tDBE3:V=sDfg'+=N]k-+tZNWig
%"d`T&8H9#54'[/^#2o;*#0<OU.%o,ZE@XEO@*AiS>0,kMqW/El-(8dSJN<VXPJq9Y9(g5$"W<R+i"T[Fa!b)mVgS=%Ek%k`"Y!V-
%euKf[AKn*$5&9(.Ld><@aTdH"K>DrYH.hI;:::gV='92Ta1tmFmTeH)%m9&a49qXns6DefJR7>p\I.ZGoIQcnR8[LAVZupFcI]ik
%oN+Kh%//Qi8)^6R1stKZ0^PR6$qh7?LodtT#CoPBW]sh9H:G=Op[3&_&;+PimQb-q.A0ofkR:_Ad!A<Q5b&V:RMl9MhADhJ'#9E8
%ZG<2CBl:s6LYXt\0"K;^,2T4r:,[^JF=6-1]M39UA-q>6Jh*5Q9Y$/2Eacn<I=@I,>^%*$D/<RnUco;[$bKVk$:obgIDp`m0g9#'
%JG4B&QCD6VhHe<9bG_)X`'e]E7b9:[K-V6O'?)7K'YEjog^N,MZcI?mm2io-FuB8fmkj:%Era7IUBUCQ;)--*['4,=Van?gY0p)S
%leo23U\&oS!B,F"7r4M6Z/2Ts<cFu7DG?o"%J3m2Kr\XTMr^YKKL"pFLql[a\-?nuU6(4;r/loFQ6q3NnsX5.FJ+0H41q::"d/-X
%9ekA%#8CF&i%:b+OnOLc16??-@'/ISIrXaB#p%edVl;dnSJHM>9"'`teIln!;Rr$edi;W,7&uZ;PJrVEAN<]-5Qu_`qGqU\/li7r
%B#WmJK+.[g1,#1*")L<j']kTGK!\?E*[ZsR!U0,sfe<UQ?^jE:lhl'L;mDpq1FZD,WPNP+d6a:B9cB=PkHLMTQ2O;>+nQo!ckb&4
%\<<6@<tas:.u?lsE/@^"k\fr&(rKoO`VoiOS^HNZFubc-.iVK/6da^o;'AQG\R`F9(22%7F0toRc&6o/<IrL&bJ3//>]U/YRi#=k
%K-qdn)SPs.?Q:q.%`Pj&0l-93.9HuFU"HBAKS?D_)]5_i#+E?&X_!a-guI!81Ks]V)@n\.SL120k/R17Fpb6uZ@hgna_(!;p(e`V
%aei(#6&#`#jIIhZM.8.#ZIR$(Ah4)Wd`lU=*"1q3kUE16"@;*-n]";#96?=g-5WbMiYR<?S\*$$5B!Z(k+Y<Vg`oBM6DaQYU7PQ/
%a+`:"Iq&)rAlN^`X36"lq1g*J+$"rB3%Y9l]!6ctA)V1:rf?[^J0F+jG?:ZW(E3U/5,=rl?W6I5IKr%fZ!o'!(,8:=&M+Jg[GQGg
%i/?'@Ic`j!jW"!d!r^=sZ&<DmZ]5DX4:`(ok5bHSa6o<@pu8Tp`\5fG`qLkUk.ZF3iU,esB-?RD5<Q07jh>E#e/7]"=+f&pg%">N
%#_+$t_n!RrIg*R].J1'1A[roXZNYjTo,l'r(];\`+7X<)*q_Pc'2oPL\4+7jWB_X(q0)F,j>jLcjnfRaV/VjWU]X<`g;@HQr^QbC
%B4WaW1EIJ(g\$m$gCc0M:M7e@X)+/I`&5J/F=K?<!H6[aN9FN7\YXAUQN[-3VXFK[a0E!kWCZ)^r"XMHGFn%]iQhWsZ_U[d'2T_K
%5ogEHYk?+^TkEqT+3NHo35?Q8"nLC%71WgLnGEKPlE%XNkEE/IfTLbj<:>Dtja.<m-k_um?1U+s][d-`1"1E^:Yu\d*LV<%)F>:O
%!ae1\hHY)AQ$4dN4N5N[j<HHP%"5+Ic8[&4.&kl\PW.7#N!2Shj<m)pHu04WKlT<hW=7M6nPq$sc/2R$eBde1lHNB<[0U9s%0$&M
%34Z""hW1,`nm%X@,goCoC7ZGq%H4TaFS;.3jOi"*2#mJVaJ9HVmn'bSkm^'o02tSucg=/H<N>6ZUi2I"FKD+-5JOlLJ,J^\=!!Zu
%TXi9'2.\PlYe;-<#$7EjRN%J?mj.l:#E%X2#/IAod`i4Unn.IbB/*,#IW$_%m&+@mJ0jsSIq<YggY8O8A,.2E#79udK[ifm$#=K6
%,:pa\2aQLG6U5n,/4!OuX<FGV^;J`t2[eTI4oGq`7,3EJ*VV07_N/$T)uO8!\/$giT?*dWl:nD9?SV>u%u$Nm&/N;jK!>)l28Vh0
%qh.*>7^;!R%Zc]!S-cJl\?;__KKJ'r&>%$5JFMDu15)k0hBr0(q/7J(pUc:?fD(4GB8o!)>")SGZ*%pHZY;jaYiG;/M"n(?7$QtW
%6nEK(&Fi)c6mPsS4)ltl^ht@!*03r@RCoL4fBoUl+uQ:26mgm7&_Rt9QcM6J)c:;HUkk1^q+?n;9.Nm0Dph%]BC?J@CTj4@3$Mqn
%Y+HaKc15_-BTZ(BU:pB2&5N[@Sp9[0N?FV?VcK%,^RMqM*tMd%d;Ro$M;cq37XP]0<FW?!Xbhme/.o3VkD*0h"%D3^nG#API<<Rt
%P^=@-Fd]eJ3&4Ni`AMsV=hNF'dc+We5:kl4n%uq<[ke$(')kY]=CO.cbAr`4^KQfGhPDO;Fabmpd='JAGcucOjgXg1;LL.I/bS(>
%aDsMYRp0(^p4K2/JqdU\;i@L,,eB<@%"S>i.+=K%$T'QD0&J5'7][$7XIZJLe^EMp<_)A"A9Et1O&g`d;R01o-Y<fL(p>eTl`I7T
%*uCR#eG]-J2-7Dh>>%\r@')UfY,mW7]9)^EqoWjE=PZa<>C:.ip)6*>b'l3\eo/.j%DZ*/pXt[Oj[amS/G8=)S(!`&Z?b>c,9(o*
%q6l!6f$"nZmJbb$PpKk^js[.0`2*@?>OQ(SG4/X@fcC6PU?shjDV07Al\k0%[PG-_5#rWWEa9++M2TUn!+U48eZ*f]`qaAIC;%/@
%Z;,c6QSh:]Sfp=fp>Y:RAA>6O\a@XT+D("Dekc#6l/]lKr#SAphqa?JIJGmj3J_)sjD[kKGE.2`[WI1sQ4$3W6+o6Uj0T2EE>0Yb
%MW=DE13Yi?Hrl?k]40[F,KCtJ(E7gCb]AgGa2[RsF?3H`I]&eI4ul!t[t+)0mc)cbW@UB]EkOJT2I;U!cH!2*l$VBIDOmD^Nn6:l
%QFkH8,]sR(Tegs_\,r;m-W_Q78[tq;@r#/[E:N##"Zk*)0Q0!WYHPWjCO!1e\u$?#i`]tE(:Q*;%c"n%\)E?JX%E'Yq^UMVro@,J
%7URun5M]ilh&d$!iZ9Hh+;jk!1`#f;F$Eu,_!tn,7,DrKT'K9fi[HT?eoU"VoK8ZJqsN]EH`s$_q!H&,??BPeDYMbPQ]<Z/hM[Pn
%n'-9BTAH"i2t]Ak5&oGNAS(Ubho5`S[H/H9!:"WJXVi3d.+`j5rl'dK^FG1jotef9lb#(lhr'./qe#fKUYdhVR/$XRUt6\_ps]4a
%mH;l(R=6ddmI2Xds*/t)ohPY`,QHolR1+<r0=QLgUH]3`7S="6:hdN_"7>BM/^UQ*8qH6OHlBBI0UG**rI$mI)d:.qm&'CrX=)Rm
%n@<]5*X(I>%fS<AqkVE#^*K,4F[BDiHNitPh6<(0YM:AU^LP.A)uul&AQKUsTr=DA86n+/,HBNDDlM;38lL-f]:e;_7[pjdN70V3
%jn.!C7=Ij1ZL8h1aV-)N6adl/J#ZNsj3BOF9I/]u@'\aP(=S(ODO@oC/]E*=^LAA0@iaD+*X]'VhU'eae.K:VGV,U:O)5nH418.&
%`Rn4"n&2OB`uh(BE&!iiLKhU+4$<"^Ol7CS-Q;N"1=qX*ohgS\1;RS`iP+!)oV\j+j<rf(6p7`I82T`U_V53f`V7MR[%4!?d36!g
%6ru`hCi8R"Z--$Z)67:(U"FGWU)"\L;VuJ04[mD*[aKtE*:7>8/jHq+J$:gbnme$#KP0)N9-ai[!iW<g@\Uc#QAP.L'tfjk_H*'W
%/je6#i?FV0XtCc9Dq0d)j,NY>h'4!p8XD;^REBu>0,pZPq6Cf`F^P,q5(?i5Y<1F<UhAo*WqAi6X)?Zm\Q[jCRA@#giK@9Qr`c[/
%nW]6nk?B>9alRd3\G#g+PNub=Hb6F6X,ZFO_3_drQG%Mm=>'kWkpYRc2-kAL24RC,C#]).P%K"nj)fb&q+<l#4as9CS\7n?Grb]G
%`:#Uj9P$e9RJ0D&RTXY50*%1Fe3$D_9imP3k'DH>rTk?T3SW"pR#BO2X5$E4&BMOJNmbK"a)*USF<np&9[)PB[pFo5IdEJF$I6]\
%<T,,]MAL$oUfHX1f;g*XE*j?trn)S&m&iW.`Ad\P[eSm*F!WSJad-rVDGkd!jccO/BDPX%4]IU+[+kObDS6IajmRGV]5_cQg.da<
%H>f5_UUQ^iRnZpgop8\?lM8,!!L'3::nH]ieJ7+*eZ1;3cdSgNSS:lBe:.5-F]1^*2EB&nD]`.mqY!!l6.EQpY>HklahQ=H_q&".
%G57T-#Asncp"VW#f3^'J?i;?:EAm#Xce9dS^MXtGp&"TGGl-:O`<m!r>s7V]"#+qkhMD'c'l9!+f?AI2^)[Sfhp6&>Rq@b)[$ntl
%ID>SaG:t$DbH(@\p2GHUcq(\3%q"YKI`jN\>?dM^8tu"69\m+dLPn_cr-h)BDb%q(p89/8rTMN`iSA1.l*&Faj)`F^H/q/Qq56dJ
%mJEmNF^7+X9l:1VmtWLKah>+YS[TCrp.Y+uT?i?kp%nL#QWQAro'YcNossY+<1'l`Qf39Uq<G[4&?f76q"aTj^J)?RDZL(Co6*u(
%o\Whrc0F'C@2aP)ochu]3q<.D5)sqmh*A$+n!76YZo`LNGsC)Xo&_/YV^<MS0C(pM<pm`rY#F`.hK,^Eltsn)]DfctUX<ujgPnD[
%l/*"\[<3F=))PFEb@"0rpP':;fD"cP5]XbFqo-g7DTFNd\9cH)e*P'P-WBjZI+BC32P62Z'_B;j9_kaGFEG8EWs(4emcG=\7W?p"
%9d^o>%_]G,`cnQ'bBR?o6HA^[dMS4`S$1]%p[YA422ODl_auqVN_WX4bMMkHIi"St2AA6Z4O'%qe7E\ZH`%61F/LPVSEHHml[06h
%Y84ic@(j'!0oq5i5C'f8aguWJBQcV+$SQK%_#2,7P2W%REmMT79Ru5&J[[PhogF]g\,A,^s!FSHQH%-,LU)L+d+@t,("iUHW`)jS
%j<#JA![mo_96dcHGThR44]D&$_]MbEFh8_@KAKhIpNj2Yi&<]=H'_pW(O+jto\tJ5ITU6'TCLp:AA,bCjZ^d];LD,aYO3V[_I\(6
%&\cZe*HIF3/I1611Co/r6+dfde0RBbY<$P(0MH$5GG,bb\cq<Y-DBc%8!;!4Ql)2bcCQ]f+,*/UOWfM.>I)aiZQ.>SrVU/[]h\g`
%*iOnT+&.5'Pe*96\Pae&2I=F;+W<n\/OiWKLWb,^J]=_)5I:caq9ZT9@<KP/oP-kjkBD=Uf_%)[I<KlBJ'e!ZfNG3UWUUH"=i,Y%
%Iff5BaUOWu`ke"BV&`aC3s:hho&JjNE]E2U7Qf6Ab@NSWmqq_P="+eWiGEHF#d2%@n?ehfaZUHWV0"/VJ3#!#m2`lN5&,0q>"N!%
%2=DR\0la$#X2g]4XR]mJd7Z4Y>+DJG.C.0na*0sjf'g..M[9N]J]u*qWu]>c=^O28]lLB".C*Vn>Z:#lc8sbAF4[!Upu8i)42&!+
%J$P:dSQPB0#bb`&F>Y8!&!So)"CW1!S?m&?)=2s5eH>RBlmn:9:t$^<"EaPk<`liqpB?qE$m!i&l<sr&[`c@HX%UfaCu\5*$&9d0
%J@J]9'`5H9#!\#E?:s9T?b*Z#f/miJ`TVY.;19#U0IjjTlFX0!eV+nZ=,M0<W0`0q>>]Q="VlX*J/d!Ra?h7:>#89qhlU5jC3\h)
%3BMM'W1hKM=Wfj]jIo/JV(dk\UA+)E(0%U/n<h[U)R8!8c#d+m'nP<EIum+bF%[Hed@YHFqgg+h%_mJe,!=A0e#D=\F0V;HYtcfE
%JPc(3b-(,NDtHa56?R3jD;Z^^Fdr%*W1en`lJ)2I5m8!Ui;n_3Fj!r!C6*^cf\8G`$\QOU).>@qY0q5B(oBf@.C=?a/@;*W>$NRj
%eA5ibjYe3Fh<he&H'=mfO'L8DnU+4>C;ak&[^cc_W1hKU=a2IQCXQrHXIp03:P.u2(:du'\#JUYFg>AR\dki1OBX:U2@.icTL*C(
%9YN$%Y+mH*(-mj3ePN<o9S\DWn[has,L,MLNM5KA-Ns[UcRC9heX(Yc!\>_.oWsEMXEP7NW4*gcX:$mCl"8BW<13#>J7%)B1Vp6$
%TiV)pPp,HtCI2l]Y:k!k!\h%6dS32dgm9SFG!<mPTiS:bk#[$LdtHGX;@<d\ll.8/<\[^Hl9VP6m3RtEJU6^$^H[1C[@kCNH+`Ql
%FNNone*BLEW37B8Xo@80L0CX-I6ZgG4U<M;UF,_P*OsRP3brs\:O5hFAG>NT;@=rSZa/(ZDXJgab%`[ls6Ym25`M%b`u8+":j\LN
%;)rm(\]s/-#X\2.8Q0?%](Nr=^6s*Ee149'ottihj.T6-*gPi,OLMVOJkA+gY*&o&J:W4Qh!44F$3C%5F[\/Q]NQN`!&_1<dYk;e
%3/2bHb55-X-IRUZ'0ue0kdP]o7_rVZbBm*t\q*\1gNp+nq4gs12h5)aW1e7lCGub]E>O_064FAeVH1_)\3tk8lW1En@']H:(%/gn
%+B3B>_mR"lo!H+]"/tjXY3+12H-9u90!WTn;'6NnG$<GJ)pPj]*cXc;?bL6G\'?8L>;`M1>G^Vl'FI%@T!@Bb!=]dqT1>UZ)[5,F
%\)343Jo07gMZgUJkG%XY;HTjnH6&cDcVa)=AI"?t5N_EVhQAL]jW!NCBA.N[$Md`qHG^\m[ukP[Q/"?AhGufZM.kWs]iEaTg+t%B
%=5(-c[7D8%;##3<n>d-kX7qcQC;!&0X'WBkfuqF#:A'S/dDh/%3c@[*DDq(TWr;WL?22-S1N&dugBD?dU[M2An'u^\oK?\b6!EI=
%lt>:LYVGCE9%#b=NQ?OoY>bDEo-+P;p=o"2>L8>_9^=jh<u,/MTO"+:WYO*N3ii5QPC+<0^WRD;\+[kS@G=6#Y'$,OEECsX-?\Kl
%_7,!_[reKP^WXFG._V[>\9)r',2ShMl)fPO5[bsD*r@8RTilg8ETQni*^)[ND0"mT>`+a)-.5i9GffZ=1`;Y^2R7#eL5g:4W]0n>
%-hs:U"\&3,pQ':,X%E)t_["'OinhIh%6--JF6#q0pd\,D.'AlK>"eoWc'4k^-0W2"f\B%&YF[Xc4p4jPkG8I7)B<,Wh8&]ijM>@T
%W)TL]Km$c[r;:*H[ZDHKUm5q/=8c`ck<j[PrC#)jEi:/UX$0KUiSC[FPq6GiFep_k!=M_Tdl_7q\iNYLmflUH6s'U-RPbCjZ,h&U
%W/LdmXCV9dCgI:D`Mo$<DfVeMVG5@p]@=OB(Do1Q<XGf#@bRjH5RidIbUp5rL,p=i;ufD(j=aCI.[jQ)5Qrr=0X'^+61*WFPRb6i
%,+6f3MOYAdW6e+M8PgQf$7>WYTGGZ[<S(,4i.)sFkSrCs[EWYp"LO*<XfRp;/bLX26ojJ/D7UCm9Q`V;(%J*T7&E2'%\F+uV.t5\
%J8\TS(mYbP"Qo8b58c-*mfAnrI9<.\IC/U7PXTroGZ)V,0-=1'#LJa]QRn1cmllAU:W]GKpn628!.H7S@WQ_f@7=RK#Tg+H,J`Lh
%7sQlI"^$G?71>:[9IB@Sf`t?;OsePq]qd%]/DkFE#c2d7-)AYPYhb='TL:3j+j,TeTHWJmp6h)&LQM0qp]2MnC4IZA(b+0`FO:_@
%=rH?7**X(?oRU,%^nC1W.[l/2?et'\4SlRS:YiK/7*:7a<)l>(;2@D^:H@H!A?OYt[p"39W0+[=GK\/=Shb"XGi@>j%gCLoeW%Q1
%Hp<)E916%u5RW0*`SQ9lPFp-m-XG;u+Ja;Y>#7AOZa=KND6mP+pZ/k,4Oj]ep/dtR+2BOp(@(\WC+Y["bq>j\i'XNg5s=e1Vt+c,
%U=]I@c,3uoY1..jq_:S5[9Pu*cp=\g#<uPUU"V*ljUosHq211Rf,UBN$Tj/(`cb4YC([?^Sq'!Lia/aA`$&GKn5rRt,#b'$H'7Q;
%><D(i3tP]O1>hURPu`N7)$884jT5d/(WW:;ge"pdE(H#%dd)S""i.eM*69':@m1R/B*el,^QI4;4&L5J_sK<p/K8r^Es#rIac3[Z
%?i]obKmEam/6*?_j3bmX:V?e].u6a[$p\1VLHkS5_@%)nfg(_OB.RY@'n5X%&OjGl"Jf\@V6l[X)B':qNY^KPD;5agg2brGJ*>*t
%r'm/L?cL'3AV+^;1X2k&-F'DI><qisB5"0l=pRciVBRKVh@t&_(%4j8\<=-=*l9M^8hIYlWQ]K?UjAeOVB@`7I[.'7"jl]O`r(E&
%#$!XV$+h+X\4%2c#p"(HNN<?81F8%<h8Z8#bL,WnSAm>d75sN.H7&Jb:(?JX::+=t9*>L>5qe:f'%b]pBPlA."LNcFNQKb3&H$CB
%m;i!q+B)1MVdPrk]C!p$IN&ABDKP$?j&aND95qu5G>27kgW]P/7\934WNS_>^970;paSS#B%m-J7fr!sP*?XR@ts/JM142i.XOje
%6OR0k>@6-GArr=ed.5YE),tFrbYGhCWCa6<%<6>gJQ\WQ'62eE,,<"cQTj'AABX9iD0_]7fV65Nl$(N)VJ49sqi"b.An@RF+g^_`
%DAg9kULJIQ^3_>\(>SB?&TLli^";lj%SrW$8/Y0UM^C9;ej**jPde_uNO`2u5#+SI!,kWd36eFSn+)%05f9o/6on(2iH=-TN8,Jr
%ptU1^pAdC]]b,s"a4$sD<[6lH$KYFkoO+r1ga?!q2g,-QPFn)9URHEIc7d^Uf,a*bTZ`-ui?S+Dl81d0Y1?g0S\!LAR)\NR7GT'u
%:_*3tK+>\P[Mbim(08ZTpP^[),7;&[cC0=>/OOKPp?rM9cD;^[l5QL#L`-r7V;<'qiMf\3rTo8L=-LZL8\3SG<gFi!qJe[S+;&+A
%s+F(e+^tiu2u:2OEb<387^8L%'PO92Ng<R>KHue"2V_D0.c'FuEjGooD%;/XRgo#'Fm$9f/QrmaAM)b32R\OL+QTi&1lXP*U#RFL
%M*&\dWCU(;XLN$`l,4U91l-pCqfU*-80fWQ?n[\m2UFu0aOb?p_S3+M/Dq\O!&-k`:G_"T:,`tE-u)MMAZ!Sbc#pY2b"X%0Y,A.C
%SuY.7mgebj+Ta.Hm-9=k=9u0,(q95Y'5lD!_5;f2a3F$#/SpD/JVMGOY,4*IL@J-e2.ikR_F#8?:,]RcJM)_WL<L/sX]EfO+l(Gl
%lPui<D*nT:^n.tG[DjjVRPh,qAYTU2(RoKR-OQL5^H<Zb2X9f<>!%`>JP@:p5d>:8H_jQ*Rh**ch!,ihDec*(4;uqUV5rFVV!YM'
%!fW9?[G1E'2fq%0.d:@.[[Q-bUhgA+i&)q8)LVYl$Drb>/LSmHXo4f<%7t@"C:>cdgYL4"g.d\E+Z+;RG&+(a)^"C1/_uNT\eX:;
%8_ZI+G1m,!43s4Y+&u/JL$ulO"@"<)@%*VXW:l1Lp/:*(;):;FT%Z\1[dbE;cLNf-_RM$(NN3eL2PY@U9AL$l=rKnOeWg76dqO8?
%WB[ESY;rdXA[A_:*U]JsCj%^Y^oe#E.ql3_27Gq!S"r],"Gs/-aBr#V[V)*A2C3Q-<;+_;@36RcGlLse;/8lEkd4j4IpQ)'$ak%R
%B\GY%eejU6B#6``erCY<]Y2F=NackGWrGRpj1)!iHSj^[Rkec?7sk8&.rsZ`YhO&>6XAO8.;InA]hB[nO$1Z<D8JIT)b9^u(Q9Oq
%Hn,$'[AW/[NJ>(JojhSTj]f'eXW>"F"2s'H;c`]lKS#oGaOH&`^kou>?W1]3=sMB7k6[KSO_Her`UEtC/Sq.='1s5uD6BJ%)m/*<
%:77\I]#3Mc3$"okb8J:3pY,Q>oRn55I;d\i'<3fd!=^j8iV0>o@&^U!n#piX'R"B'G/kK+TVLA\^O)'9]c;>BPBiT6:S,dJm=h,@
%B^NinWA1Z=+!S/E$oK%<9^.q%6Ru1PoEDh@1:>StDb\:@a9I60,F36.<\>.R#q^Rq%&1jd-u$<5)':Jo]El.^>m$bZ@%M^L'HYKI
%KK4AJco8f`o666jk;1EFPFJtTdeUP1\U:>o:6Ei""-q3o;g:4@V"5Jensr@OMoV[cae3D0o#XsQO%SRkcK.,dUb3^Nc=`ZjVi7Mo
%Oj7U0bBKgU>s(*;cT%7e>)G9pS^09^:KiiB17c`NQVY/!i1P0UjT]C8'99#*30km<a)Zr257]<A\[P:Nf$'cjET2-fi*H"].aMCA
%>Ja$NfDZYo!NCf`UQ4$oAsH\cJg]C,Z%&>%5.[4`:At.W\ua=b@=QCuNW8^T<fb@M5d(MB'.\b@Xng1=\0GKp<t_-.$LnnNMnh'+
%QfFlH$5.?A(08X8?9`7<@bg=>^Sg0klO'b/QYOR]*?-BMC["ui5b$J:+r#LPn$Trd[=DSn\`5W6c"'Kfo]o4fkLl8HB4?>sSeUT`
%]/(+72C;!t,</!CS^IG"1GK\i-Z9Do.sB39[KLnj1/U_lcD01Q"_P/206/T(;3&MrWOk_jdBbqQ7A0@C*#J<@HK@#khWEKt_.[94
%I%ZIC3=:L&%Ent/PRDJ;<C@"+k[AI4P(NLO*6j*@KQu4bq.MEs@io3aSAO[B'b8Zu.&V$^:Nj@3@U'*sXflYbE2qegq)@H_1>$k*
%G+V5GC9?AeijN-)fQ85+;,=a.g!Pc`r7[F"A!I9tG.4p?TE]h_[e<')[Bala-^-JD-XteiN1E,"VSA:7#h,$lD,2pPn_trX#PDD7
%f%.s6B;(]4F2(>IoI1Lljfm?R@oj<)<WhWp[BJ"Rh=EnjNubfXI4ZE!K%G;+HuLS[X>?D31H<L.c?(TIP9Bst#+iDWSPrdm]62c3
%4(V4O-2ek&?R>B^MZ-"<5OHdM(>-kDrKYOm\Yh&Mp9Jmg$Q:<Jgs:/6B4Egb@FB(pIR"d\.SK3kR9lbWb/;`T24C"+cp.D;kB;8T
%I]ia,VItba[.!RB@R0uAc/_01h/fd)s0d*=*OhD3HBJKZEZWITSA>C36)lL]LW[H9*'HJNC^R<CU,NFL'G2aL(3:[#D4^fL33.4u
%kA:C6'PJqj2qQR(8eo$JD"4@l??p\c7T\$:b0^6M)_$(Xp<DG#6:0YaNJZlDfcPAnRfrh4c=;[jkFOX0-O=GJ_s'X/6u's-_sQ)$
%U.^Y3/oYlhkfrH`.sdrtgR7*HY.^^efg.[r3[',"7r2.%3msu:5<K[[Z&(POf/=X*NqBVtOpoIu(1j$',+CRuL-TZX;`W+-B@oa.
%.sl-_eKOA'X\0Y+J$W?UQ^)'@4VKb(_iE>0q/#L65L"UZ)D9(5'Yd!nbc@X=0ZD@+!fLA?X)_<5@8gZe2Rca/hYQ83/]`NV/m77&
%HRGW"V9(kUo8I9s-d9e%]=YP9o+%:Jl=T2G.;=QLk&"siD4W"s7@fijn7L>O1@t.9\0oPF4#<)3G^O+p>]o>=G)FMVZTn-hR3/#g
%Vn)C?i-XJ-4B$ZLHtJu?8tie<+W,=STp3jHk,fAW'0LKW?fbU,G3]Fq_m`sP2I7B)"^675p\Gg]gPZ^bXbp:b9cf9_^gog4.CNOm
%]8;9&49>L9(;klK[R]\t`O_l\0A#$*Deb3<H9mY=V;#=Ph:e0&C-7*nfIngLDJtag:a\<c(cKnkp=<rhj"^SfdGL^9g/SA?5@UoM
%]'@YJT40q"<jqT$p7C9<L3AWuh5?4iL5nE["1KH_7bsGk8]Mp^VE>D[j-6XO57C^o#.,P-?<,&S525=6K5((JR3^J+'.(c7rgYN2
%(,U0N,h^eAdj3%5(,K)X4'[T5jjnX=,[&KU)'sU;1J&?=FF7sVc<.V7IJAXB3gp:Z$^3mjR<5H[@W3$_cMf,dB;6N/$(#RG4=4;p
%3lCU@hU<k6)47g1-KPOt[/&e;K9GeILZ`B8nkM(:gl[i14nmH'@`KeVD1s('IS3SqRJ]f5554FY48Y[>29bpRoCRBsihtFMTt./m
%9RYEq;2X8i8&B-9:$6']D8<$%!u[0oD#,[D&^'sN;'tpU2@q^MK3*7Q"MYiYP7A$sgtL4X^_B#0=K&\"R,.2QLPtTi4aNPpXgi<j
%J;J`hHq&2'Km#6e>\C'^mes/4ooPY>fhCnt0kY'9R^m3PoAOHSiJiA+`<IaRbSHdV$U`X9[,eH26;_2p*4d`J6c0l@;'+/n4=Nsh
%G%YZ9)Y.R.i``m',5]g9]0bu..+o-f=@h[C7@0/&5`Jn):#p6haaP8JAA9Fc%i*qhXpZ!$7/eJOT'E+*[mA_R,>?:R.eD$6mG&o8
%X^o39#i6[beOb:4)^P;`$GCsB<3f?2Cn0`:qaIU[:bDF8QZgt<9"VDu<)Co*pCuIeT66gH9(r,V[\jB'hLNMO8m@)ZBTek2[gL9\
%[G_3&KPu69i5TgQ1bK$Li1`o21smTEiCTh>Pk-4;lb$b%Ys<M"C+iRl"4E"JA<"%oC[^^LEc(nn_f"Qc;f:2M#<F2:ff+:&c]s?n
%W6O.L-Fh-/GBE's(M.gW>ZL7V3n<nL>)okl)Kip_osCl,3@J^QF_][Vj@nA0EPo%(GFY#&gcK1g[i7APn5N:sZs0#De]jt;/p:R.
%U.sUtId!;Y^"R(<13:Kn=iTpaUMYJ8/9Y;0TXBDUYp>)-qQu*-E[6=>^>iZ\RYcGrZNPR+mR2n[>4F<rSp%EX4tYd>PQtoo,-apZ
%=,CB6jCo8([+<1A1f*9p.^@<9\GO@c5'9dX.OJLO4AfR[a;nDaT>=:D6PK@(ep7%LPuB%'C!Eelf(2jtI9Kd%>H>9S-h_7cokA$>
%*1,<UQ.:)el\r"F'Do._R#_WF19jVjGJ.`?iY75t>$6:MqeQa;m*j,BP8WU`-2&3::a\s'dqVL%Z1t99^?qe@hnXV)@c*$0[`_h/
%O(ehHp2)a",0ad#`'1^_$X%mjVD>jY9'k$t8bj?e;^V3PAb@J]_,_M1,kbq,7be)g]#6e7IA4RmpOnBO=sQ\?;(#$'e)/u0d_n=J
%F3ik[qfEYF:Rg"GhoSH9r[Pj#ml;T_TiL>EXrO@RV"eg"[DVH0-*$3(UOZ]CR,u&%p6Cs#0QK/`]Z![i%FTG\%_fnX,GEFl_W<Jl
%.cWU@L".SMXP2oUkfSJ)LPFF8mC]dW/5C5^E2Gh8hi)g&E&)-eK]Q2Y[!$]u-?):FK/Wi!\uF:4X'!VTXK?=,oqkD$Vp!A'PSQSq
%A!>+Q0FF<*S7J\Nmed%.qWk_Zs2g[@2UZugjaS1G%ZUAcp(#lV0E4+U5P1P6s656LQ1t=G("?.DnqBgMKJ\,QT0*CYJ,eERQiALX
%5Npu(GOu@X!/A%%H*'R`VCX6qbON);gmLdUeSrR<f@BqA$.mSCWV1OLKn`:_o]^;P1V^Q6Eo=>->7#_p:1N;n0KZK*1Y=Bl3^!uD
%k*Ug,)0bSAgHG!E1J2@rbdLH=d-Yg"N8JNr#P7'ZqRpTl976?,>HO?lgM57q]@CZ:DY1rm`%EQ=M4!]5=&N#"TNsoT-MjHkN,@M+
%+6FLt3>@Ii&#c3#1[T=);B:q!X#`seqe@+c%%^b(%JSFgPj*i;n02Y<4!X@oG0L;#CUC(**gnb;k,-WehlOlVe4Ip,VGR[(nD`6O
%ZsNm@RWs$:dUn)b0El7HY<O-aVS1VHKgL!I"`3R*QTLp\pX(?*5_ea;DX#A],3FUBQs#$FI<>?'k(@[i5V&;(c(_$$dEhn1Q>LIV
%5n,9,3qg4F8D._6Xi4a*=VU_m&bon.XV;-*cgJ^gPN1'7]mjZAni]cfn"1<&e%,>DT^fO7n)$F6qYp6gBtNZ9X8e1u7cL;)j/0>`
%n,5=(F+N7`Eha&HrnAqb7JGZRD.R34G@SC7s3C=#^)cWi3Ill'3mH_<&2W"R4\OD$3^rRpCu:h\^E]t%B'+:'a.n^H3o^l.:Qb#P
%>L<b+mBr\s2RI\:Y=;J32fsGU05SVsCqKYOmiN!_6HZb'-j.CWj3b%b*hUZ2_5)K;]&PO(179k,O@UZRCL,4R/sXOHW[H?`?EoU,
%n(&N+R`X5G<h2<!peRdHgI@$!$Ds5[jdSeE9"4r&H+rh(;o_E0QF?J:[$JagP`68Y-H0GLa!aWV@&2JjjYUQO40M78jY>a&"AbA.
%Rs>na"q)sYk1sVO46B8;VQ_5jbIc"'9I7"5h?O)c)RO[VOCiZO7u6SJPc5#npUL]2GL%kP47H49@<Rb.3A[(`D.G/m@8$k5?,+\1
%'HuLrc#VSsA]G+0&(f3(m^^\ia?A^s<4Wch\B/=aK5<FZXMFe/c)"g(lr,3RHn7mX^'2;S>Kc8hG"U[=nY2YD(V<<sj8u1!bk#-L
%lEYe&,ga]7l0ObT6LPi,-_l()@8Iai'^3D$k"Zs8=6@TGZdmQ%5E%5po>d,I0(mb:$1CK>Wm6_74cQHX3a%7SQYqg'!5iY;./fAq
%n)_M^ru+(R.gJE^=hjNI!G*J79L&K</1_h`FJ1aqltE=$'iG,6ZUQBpG>J'3o<jpZ/r.ifN\YsV-MMDYCV^kLiM1>(\0jt9])Z54
%'b.iWc'<?/E&lco<[6=&7YF'4fM'i8<$T+.BdPG'8#e4^:cbo=m6gF_Nl=3:ILNE&gU5!i*DFl,5Pe79Udufb_i"LSRGIAS0,#5a
%=7*V>9,AtcOFN^Y>JL]phr(rViR4)n`Z)D\997hCj-DtPR^CRiVO&?:?E+bfp4/Rb23]oR)esskC#T0@g.+VlE8'"J[_3Sj3\PKF
%4^c:i7V<YW;IUK6m<OdkDZpnIDlKU2*T-E%1QD.AC)QZ:aR/sShjs#hJsARR,5?Na'[&mp\CVD4e)'[dLV`JUd'l,`rS':UXk7p6
%1F;SLdrf6Q';d%Db?N^]X+<top40,P2S30lD+3^<$[!M/cVdbAIA!n1e!lQGUnod9Yqb;@#,ApfDngf'4@Dp8TIsZ4^eC+k\RpWC
%Y>FRV.-dB4+^ZHJSS)SC/kqmI+Y,d6X\Y80[WR&Q0e#pg:>M=W-DW3XViMUoHPD)m='^iP9)\5(9@W>r8b_O3;!.?^bp4SZ#Kf_!
%[f+6;KORCN>MFEpZ>',t7pQ9-I7.j4DbAlEBfdq-g6654F-Fh3adeT0+^N##$-[d4qOXHJ8tsuVYC?J1WK]fWq2"mbdo8r6fmH3S
%$QP\"\47P8R$:"Fq1r[hbNf[08Mlot\@(MnJ6k!nO*E"Ce9=_]U=jq41\7#@\f<GeO(bc1C*k7SCd+RMP;Z0-j?%%5/sTA3G?LUN
%K[fD%dp,p%(MMi^]q[21PYF8hk@KA%@6;s6bkkXGLio.MX%mb>i>KB0VKE5+0Y"2\4)B-3b6k^7<dr5'KkD`.K0/Y0_D>>4PS%*L
%d&WaFh(j8UeO_AUe.u'C[_q-KgYJCj<%Cl`*h#4AlIZITq4,G<S8)V[iSbiU=rh\CTtJ-8EiPDuKnm\,22r@E__+($bE.[M'54]g
%*ico!j_]c&,J@G(=FT5fiFtK&?$L$"S3RBlVhtQqgidqNa8MTa(ET$*FWPbcTe$4@,7#j2K1B6m\E@JV6SCPY^?na4\(s=d*Z>Q!
%BoCu5(EOK!5"s3-/j(sa7e<\D2[:_j)rGh;>U.ngdct.`\F6ll""ubn^?nab9!W(sk-K[4K.2.RG\GTaiJt)>/j(tuk]QfWLW95T
%cF/eY3UFUMj11\+GPAoi*c;L*q/(n"`jrVA00D)A2of9MB]r"1@Q&sF]\/hl*h#ib479sQ77Q"^D26hOk5cA?*ioP=]C8Weh"]V6
%Q1!S(%IH8rjNQ[JKa4GZW;O#$>^5Hi]^68+UJ>deU%'2X1NYe1#qe=sLadkj.*Z[040J=kn5*'G`B><+l9&N<_@$nKenKnFG\Gf2
%5OQBU.61;LiKo*Um_ZlTVmqLfGc9GU0Go#$2=hV*C59t8Y@$GI*d?T%*es_9F5`h_Zl:Nb'3oeG28&<QRc5B6iM!OJUV$D3h[9tf
%Z8TTJai+uJ4?PM<fAqX@VX>lq5,m0/[R9XJ\hl$%1nUe_*E>>n_F*,o.WjDg?B@:cKngSdr(5ouQX^Z3i.`949iStr^8]%$UC.Tl
%BD5SXF3oVrHAIt/Sn9W<4Or5.a+]:PM,u_UP,Csc;VuZ-'n/.7_F*A<%^k;1#@2SQl<Mm-4YoR]e:i[t8\/q,mALC'NGgo.%79K0
%iLtg>2sK"_]("'kAO>$gH1ZfG6<^@3:eu.>k91W_)VYVS2hpIh)@C<6MJC3Ti>e<n`AS>pFfHY&N%I4"WZo<7CS<i`qkLBd4HECR
%.9RPZE[VWPCF5+'+Z1k.Kn>I$KKQ?'1=2kdYenU@_Y)pF&H8?o2S`;P2PEZa`GtN"9mFC^]:e&QE%m?^iH.'=?&d"C`MVfLZ*Ch%
%qSi/E+j+SF9H0*Hg]oF%pIN0PCbO61ah1c!ZD46\d]EFiUQ]-Z.lI.$N@Ja#*j<8CIbIM2=nulom`*^V0mL<EGDg??\"!'%^H:EC
%qQ/Yhpfr-;;es\8F?)@AYn6tpA\g!NG1&:[E'ID/D/\3VlUq0/AlWkbTBA3%3mf'4DoGq4cIAcKMa8a[(<Gee=a50BO@AK07Mb<t
%&]]m7rS2"LFKV.J=s&o&n<ooj+1)(2.TUnIh*Rb;4>PfSG.H/TNKjq'=\VoBpC58h9s3'Xk<ca`\4U*;U^JsJonq&=cTP_QUdiV4
%.2?TX>.,M*2367Ca'-H_:[@-f@.QAE:CUOp@[aP\R`-6/8$dRXME>]#?85LrJ-!@VReK=QNc-$]hSRE5./O<gr"ar'V>%dTe2cWh
%b0#LeLOH0.a$Ll#&(+u7im-W:n&h&<*H`\K$TaN%bl"hH_6kZRNJIAH9V*l5^pDdbe7\*@Q7bTiC>O41lFIP9h%-i12qAV9Q-OKa
%Gq@\=IR"kkH??t<)OEDGZYp2R;RoK_h\2@0EA'l!%[uPcPFjfPI%'ipDJA;ZK=r?k[/2bkaheSS!Y]mfQn[,D9)pR;#^Y@m'R"\a
%_/RJTScGXa(>riBMgg8/IK'CuVYp5PgPYZtDiF)SntXQS^Jr;#pXE:0U.TA)o84M`+$'?4?Q_]YH^D/7`HONAM\\/a?NfFC^90Z=
%(SpDOhc:d)05?kgJ6]*V[IhDX?<R*`HXIu1nB5/i'-qr@j=Nd07`(t#)-)PnC&!n3/be/i4TIrbj3EQUop6@T;<6"Ul5glU)&Kq+
%k:V:C$mJj,clIrQaJT6=3r6t-4*Z4Jcl@cKFpd*aD0*R%?f8bU$IJ336KHBY!.uHN[MVS3S+aKJmX@r;ODUIl/:mf=g(hk!\#6a!
%+TP4@:Y6q/O-I%B"g)a]je]G/_*sNh:b<]9)nPOSE^)Jh?Aps!FF(BoY0rTU`t(b_B_Q*u&P.D9aU=Xi>sT:s&IUUiHS/70%rJ(_
%K6ipb2Jpk>\'<)X)YS:0h<XXhkcZ[V,E1C@5,VePcN07S6[,G9L6(VC2tn$cp>LH=a[G'TQ=9E*1&MeoKY7-S;[H@NQVmAE87\EO
%\UXo>he/g;02K/6poNU-AYLW-F\$a<V6EE3`q:=W@%j6`1Q6`\Ad,,O5s4-IF=W%6AK2L>@K'K62\sRkI(Ar%c*%`#0rek.h?pfm
%AWXWUG]i0GrmW/L[$OUo"S'DX\6_W3H29F2_P2qnRjGu>+3?67KsK&gc,kc)])cMtIEG]JRsaq3GlO"QX"R^KM.YOA%c5>J.:r'\
%i8N\+3_pNhmAF$Y=Gaa.*j$R>T8$-CE$FRu>)f3ZDmqF=)[i7!Vhl46D<C)270Y-*5]COR3.TmB>Ebj5Yi5gC*,pKR*PW.(6E1]u
%CIrYH^c!H(j!C>MqlcYj)et]Pg4u,KRqMjOp]^=&$k\eW3m0<*;Hj:lZ+`r8P<UNsMq&,1YtH/&A.!$f(U),JjWGH/=0>OQ(<10<
%b:K'n\Qk5h<1OYWi]HQNm(a@>49C4%Z,07*+p\MFA"ALa)c3Fu?CaR?V<l5JblZ!)U2AMuik;F5@%)l\)/Q*2b/!aL2>72D1pWjn
%GH(&u_<k;P1t8^80^6W5](_X'L7#?gQKBPer:RfJOftd+OY+ChJ(\3b6%;:@bI$9_K,^!@?Ua4?g1MGoOH0FCZq:^GPa`O'7`po4
%k-0G=`iOd$EI3_f`#WQeqep#W>9'6XC2hu(/jOh$UPc0R(/:m(KAPT"]]q>_1c5&CA\8#/qcR\AUlhg!:&@6WbAr^`fKBhdEHuhf
%B0T48K)U'j,7<D*n4l0"6uh$8B7[9nJ@L[(m>8l,(jku!A/of=`_h)p41`nJ,I]EG!AY":U;K>6O+ATn\28q/hK81LW0[JpitYDh
%]sJS,!60[S$F!D_0\@bG^DKb8.XoXbB);seg$UW/rd(Gh<;$Yk8XO[Lomec.T!(i/i>Fgm7UHk=jj4%AUFRu?M(AbnJ'S2:iP'(i
%^4^I7M'42f?\AYYQt\7Prk9^DWG`rV8#NE5r]!/cn6OQm>VM2!2t5d79#5MWO;8V:[clETGOJ1k1ClH(/44<p)#M[06b?\L@9%g9
%M8u3f6_hCe+;$:>iG'""F*Fr@3d:$'8[-M04mWEP.1I<:d+pI>6a36-([2J,r<)Rd:n>Y*?TAXbaA$VY/8"r^2b=a`m"KP.gr[bI
%<_kp;mj"\q*<gc7=3(^<Zi`1h/DcR!GLsED(]]1NZ"taPd_P26eC)&WR7\"XC5(HN2ggh_/Q-J.a;(/hAj1)SZgiEZi6-31M0HL+
%(4IE*_:<RZ*&E:'[lSe+o--NrPCR%g83@rOai'QK`4F0)1DAsL2&D'0<u5\CS"uMm@MJbih,j3]ShlIX*a2#]X:\j?Yml`ffGAI/
%BsCd!SY6LRAtUKNpSgQP*G6]Of3Q,?(fRE+F>079cc.Kn(fM;9H5+M]JWG)k5(b41dAn1EYunZ\NIt&aO]g$I'jL)`="IZPdLSA#
%7n#*3@n\[p1+5TAQ(G3Q363O^K=U,hAh(_W5%<AZ`4F*<a3S^RPC@10EdP&1Ju7d+LFSbsNNB#dqBMO=">1c(h=V_P]""0`Rp`mf
%ldlqELDJKkYG?HX<d'INS^7lP'*[*HO2p7@_Rc;Uq1;s33@7h<H)BFhJa$2pr/lH<pibcA09I1Rg1<i]?5E\&guq71_S[%`<nEO"
%ZF^P_%_rqOI-h>q9'I4\pbY?Qjh),g!6ed!.nMZODFap(T\^[QYAqO/V>YH^5645hG&*mP>@_X#)a,C9RehD6?KAZ+IQ]g\^Y?P^
%7QhLIf!`dmNJ9p6&@[CX;@N))o9JrZ![4]UCl>39i36:BGlYkFYWkGWD=D:NTPAs_'21=99g<1G?hYE2nC4naP`7TG8*d]AS0Y_!
%B(H--EV%NTZ)JT8a2d8?VbtM-Zkh1WYq9h0L<B[SS_5_&7Gq9"DaMDF0`,)JrQRBD#Ch@VF.cYtJmcZ8BdUO.(UXLaE,?%VS4_QH
%#-C8#Q<DZV@Rj([Yp6`EMLkArNdRUZ0OGB$2Q3K+G>H+6c5PYiG,5K51fPTFh;Jh@kp1YOml/*F#_9C.Q4(POo@F<3Z=P8.5Kc+H
%9hrJ_]$M`#BdO-NL4o$hWC46V%dncgI)LdRL.^4+cn=&N$KpMip;<rEr+k6rQA^VDj]$D.E,_eboB@X1-ukeEf2o8TlX,uY^mL38
%pNa6Z7uM$\b_gXdk4jD8HF>$,JOsoN:._s0d.uNgIZg0""?unaq[RX#O9k4F0nLYI_KQjH]A0;o#o!?4K'rdU#$nR,%=gM&Pb,i(
%V[>n2O*)mGBQnneNu<:nO>07#<Q;SW[<Fj,Rq;B:c.ZJ6Pa7n&#!SdD'Ma?:B]MGG4,qm"g&C+?42#e[AW(^rT[*>;E_#i;!UI/\
%NC,mZ"RqJ4'qbm1:+J\VhPX"d`4<=X**U&Ar<.8;D:KA]Ei^L=]Cm5"`Zt^P1=1!in5#+oH3l/q'cNer1b0=9+ook`'E0Nom`Sdc
%n?q/qhdgY!Wrd_sXeC3)S("BZYA&?)*,):Ea]4g)[4><i0GGUbr(!PHd^?Mu;u8drDi@C2Sk5DZ[s<SQXsmB/7[Q[DhS9R__*?Uf
%gN&#lKK\;CK<?SEnN,st!r!dAp@E%ULN*@$h0jrh"db)>2S&]XqO)FI_$Rtj\tDJ6g3gp_1<>RBggcip8?fg'4'^2j#W@i&X`8NK
%:,>,[%NK#6P,9tZ%NK#rq@1$H`aE08oiF!?f!p^;99BLm4leA^q5@G3k\!""gX*q/L2,im1X0Ya\A#,A9ArnopKVAj_+t]8F.7,"
%Ef$</(a2bhn?g"uhV1CAE8!RjQHOndoohj%%M,EV3i>J8J@D,j9P4m+8Y73$Tg_$73Xru^VjZUR&ND%`\JKWLOkW6i$s]]eVsPZ&
%Gf$WHl(;cl;Kn"64Oa)-Ok]:!Q$,9,')*@a:NLQ0s!I_uV^u6H'%NPrBME#jnAFZ+T.Y45;bnQ"m<tHX3p7O:qp'%BW_pUCKl]<G
%TS]f"PoUMkm[]JEM;>\>iA\N@b9l^*?btUdl$#s!G+BXBhcTL!W#sM#r&4FYFn5pL=YR[)kEqGn@ESotES'rVfCVGrqq]a]8)J8@
%7A>;W.WACL?Q;umHb;B'GP8bT-N0E\?P-!-ID(]Q*o!1Ag&"+5f5L)*eFiaBU#4N"W9Xt".5]rZ1+huWHQRAn>UfTa]eA*/'D=WY
%p!9b?D=V>F]X9nDhh5_c7CCL'P^A2\YB>6)YTj0*Pk<%[rK,F5jkmtMe#^3F%;3l[A[^,DLfK[0)PP3ig9hRJBPb'gneBKq9UI4[
%'JuI3d&$bCo%dt\]Yc/k6_dlP#^aQ<:::@eXYqq#=W:?!WCTSe?%=MX)'"&W,W*>WZ3@S<)N3P+QUhI<5^;)`&KZ/+i4(uF9)0IN
%Fh:[O$nW_5mT3Ps*P;DLO:=.]2DK+2ZgaioRVLFc\haho]j9#lkpFF"USfJuDCU05`HcX0l^+SE2IJEEmK=k?TC<ZKd2P\44OM-/
%0S@RN1$U/?^N3%AHQj6A4M(7tE3o-[Nj"SGDnCK&U)b_`/jDHc-RVbaOUpo$51!Y\+s3E<Hr/Tc$1AX4$;<uF1+(X,M%@OX1N_ql
%-n+Td@Pj4<q@3$Q[.kbR_KB<C(RX,Xh%]&hN3j!IiWJ'i]D)AnE4$I9^kRr<5_N/k%[A^Ris*VX4RAYQXEjWe\18aF8oFaRG=rJO
%P]rfQ%.K&oVng@VKscGs5T.$#c+9]/9JcabCpgO:\G'`*h8#r[a.jOg@c*Om)>oUUq]__=NIiO#*(L:G@!R*H"#/jD62BCC+X%[(
%o!=Se*[P!^mjV/DJMVCpgo`O`T6''K*p:Oq*.m^CF8%D+:ql_YF/6*mkuM-82GAu3jf<^t#r"HpO<_$\7Z6j+lI+O#%>t5D#4jUH
%@e)G6UPF^Bhn[iD:^hOig;Ym@mc4L85Qi[3DSpBC;qN\1'MB=;NJQ-V_D+9\ElH7`RkIk<VPJ8+:bDF8PdFoMZ9qH3crFnmFsnKW
%1rD6."2:PK^%`?5Mir89fSA..Au%g<C$ITK[T)`E6;%4Y.4qV@7S"t+V9C,,8D4h#fD"nIDK<iA,pH1nXTP[u=TeVH]1fAl7bTCL
%qHmRt?:[>fVT*+;*@G$Cs,X`MD6Dl3g'5;V&c*#g0h=hrl<8LD&W9]``F(S+Ai%Hj?u-rthCnKT-a0VOm]>^)klTpY@cEF&!@ZKh
%SQ1r?l]ij`ojh9c?IFa4jRrA'=b[P^1g"ikUXO\PH^#@/AYiRBgG+GhfPf?%^UAq`?!MgJB`%,=]c12%Y-gK>0>"m(hK?4)`f7.X
%aUmYKZ3n7s3WI\>.ctXKR_CjqBeWp>Gdh+!r0pV(V]7IFDe6ZYdC1mgIXB)B17u;Mb8K_k::k`E*o+B/f)@d1EVNs\CX%"Q_T?eI
%Ehi_2/G'<%B\Vs'/ri6m7cTj81n@S/]UDcFKm<JmU:#F*GC#OhIF]oEY5h;\`>AO`Zio<7Q'U\e<&[;l<j"<(gLbBuo%gFGgaZ+'
%\ZelAqSFadP@*bLg+:!aU7U2Ur_g%e5SgHgYNcqqWe<```Sk%g^&,I5F@h07oo7D;7g6YIa\@`!hGJQps&Nd@Sj%]Up`s5h8EcT]
%>NF85CYEeZc/3[,0s<)k\0(Yd1@4KnpJ8Dg8^_mpp\`FIg7K*O="\\e[k=%hjb_Y,&c=0RI_F:HJJ7f%[g'$U(B4eUDgunPo;B35
%oZI*k0#n;ik.e$^Z1?!;E!75]J(NU,DkS>Bd1Va(hZ$P^naj.prq!@PEk$M^qlflNUg#Lia(kt[e/o;#nu*QPG4eZ9K^Pt7k6'fW
%f5>G3\qj[+b]8"h_u"G#inc?MgC\VdgcIJ*4)s)3@04eJ=GN@fBa^Nh;gV_EpU^"4I5_MAD`DqMS$-`!g2qc)`/NMOlT_j11"4u)
%5.3)2/#Q-LU]l'cJJRJAQ:%2oQ=j"?(TGrVHFf(G`H-,8+.^q4=&32DCnuf%ni*&V`4[`b\]!+$I^hdYFnnnN*#3CXmlbj(/*'Nt
%2F"r:I>o5(GD_DS9a=niDX&%AGA".\=2a'?hr&_JVrS(U!f?i:FS(8'GLa$H?Rhb"EjU?qCjQCm0.rtN%Z4]X\''0;cNO28#Jco/
%]sB56cqVTo-:Q=`DnNi+HNu$GK0^8>;"<eb@qX9r;m$NFGnBo=FfINM*<_[<qX#e;("`0GEY#0[:7baodD&iUna%B@>U\k,m?u$7
%4Lf?Rlgf[,k<9(UQ!Z_[jt@6O]fEM!AG>Wme^iHXqYB"j:*lPT?2s+aCiqrA]F0OtFmPrQkcZkWZ>Q:*2&3LL:hu9cki7?C4Y^>7
%*$#alRG>^@>"u35g$ZW@m$f@=+*S&U3hBDKT7^`\Og9.T"_TI:)SUmn=^5>5\Wi0ZNlt9'FI+YO86>fE0\4Y@#MY]P2cqM:D,-K#
%HZ+CnG/hEUlLi\Mj6m!)DGI+#^E3+-`j4'-:-HO!o@a&\[Jl>D(0h=AC&7J@)k.8UjS)pOS+U-dpGY09Nt^N[^A[Qn;K;[%I#";:
%D,n4e`>EQq%K537%k;fT"2l?Y\bfh?-$$E'p>riJ=;cJ3GCiA8qi#=MBlWO#\mS;3qrH<n>8a`0hEQIq='YY#`O_TuVQa*YipE;=
%*HV&S7D<NF8]=uKjAapgTBeRbqs!@GlK*k('eG7NFLRibiGJdYjoIH\Y4QMI3kO03,M-PV/k^_U6Zc?!K<YJX%QL52o[M&KhF(1Y
%6_k82O[eisk?^hY9%W33.?VnuHL'[LCCHK9as?E1gffgo-oXoF88I+m"=,,M:f5)@[MBlF2`'PopX?!TrOs"j\ApUDpIPcne>YF*
%2)b3sSg&lb)J@2Q/?(;G7dXR:3JZ/?i,?E:i/C,B;A,Yem(8=V+7,TVZ%'B1jloPO:8)q,rpc3,oiI1K$Q2"K%_"3;dgMqNdp'$A
%j(^:GjDJle`DD#[85Hl\Ynp5Y*Ygn^.aFiaEp4/ohZ5/;n-,>iETb8M7edj9%DBcC50uI9&YQp3V75&@h]Qe/]NAuV7EOOD$gVKM
%/"_\Ygql)jo4lBW&.^@oqg.;K5O-DtFDZu+<tCO!?s[.:CY,(;DQ`]#OG?t@Ir'PE_?pZipE^\A(XB'_s.$e0S;1,u^RJS/Y:lHt
%Zn*$f!/ba+\?8l)ZMVEU:[]8VY!Q>uA_!1s^%5>!kq:uSm9'cH6X*+al?a8snPc([rF<+@&f8B./$'.r,tg_A=(,ZR.p$T^@gX_R
%>Ob/O6sog'KpA@6JcV.?Y_'RB/$'.r`ATOe(?p^A9U)Dmo*8?FhX`u*#87PpjSkh%<ie@&'\9l(-<FUrWibIoO3WkXn/b$Zj;t8+
%Oi#hNZ,t;?MX39W.BMFj']'sl\$IkId<<fB,89I\/gHLbI>5/o9f,71S3]qdZP(s!RqICol*0/"I*,Jh9+nXV4FhSBNrBW?OIa36
%&(Z!tra7Dc6HnT,nHWP?OH8RKH%G8Bk;tmKl3/Le+=ip106$%-]te%fZ7fMZAhS+?i!#S8GB#%7R*./^3o@Q"h+g%@0/.AHnMNi#
%"VRF;BJFK-H)KbLJH/BuTn>M;?/XkS<JQaEpZT(?Yedki.5'Hi6\4o"9gqh1hX+VAqVp'!&3"Lo/.dEBopOjlgXM5;gNmpt*bFbY
%go1fF"Zu*9M*(ArV^Qd3`LU>k.sB4Q=Z\H:r_671G=d9[TR:14Ho6bD01iCfD[M^^MNSKZj"A6@+!(rtnajMD;f%ua!fOtV>[H$I
%<IIYZh#??)_X-d%N/aT5.#O!K_sP,Nck`H0jEB69RR>tM$\dm6D_d*fD'>5(+gt2e<F9,D]jB/Lk11R.Sh!C>#tO[t#3MM:23*bA
%a)#4=Ys1=!;8%F)S`A:<i^RoR*<!keCmTJc&+H9QXeM,olfXW,b.TUJNT95q1Q;$oHg"]KW6RHoD=EcK0>:A#.jD7h/`H+0a?<VL
%\9d94dDV!0ro]'LYX;YL2iL\F?qXt=j*,`VUFt2Tj-Au<4Q#K"WQhVnhrK%P-,%\"@YEY]MA1KL\/H@\Dt:S&nE74#nN*N1>((UW
%2`^FfH^p64B\39\;8X0oP/HDV%um#dT^,.-RO@0J]t9(P:sflb7r%+WPB[OY$AW4GR8XV<hI(tkNlTgGZo:YfKB0KR9\h;S:m\<b
%<W?lTmFBZY[&`%hocDf>X(TP@\ph8Po$D0d4j`ff;4]%FUHdWt65@u8(MB`iNJ^jMj]P4GToW*j`%AaW.]3,jpH)kH+jbAm_<?g#
%4);NY8Q+Hp.d#FI=6k^#$-:0afBMEBX+.mqn\W%*W/RR%.S6O5'$K;/^\:8%O$4)'E9@".eAeZ\0rCH:"us/tf%]l2=TO:`S/0sq
%iO$+d\k(0'F1OsZQIG!X>oJ7V+1W_Xkgsto(f1cu,$f3Kq8Q7M4FQ-s4)X3YQfZ8Mpi]2UHhX\9!ffD=='*^7fkfP-IDphMh`AMF
%hc3sI<_U;\-9pG`A\C71p(05BC;2r]7DF(nAik[BTC7pO?`Gi1#mSlk]1c`6&spF?q!d3T68OD:AX3B+ooH!8([($g+2Lg.Ae'gD
%/7FRZU<lSRos`I)\Y5EYj"c$^rOW^7M1FengU]QaQ_E#)LLuE0BVs\J2uY#-r2R<HUJ9PGNMm8e%BG\d#Bb+3[;,FXJ&M]=b6<pr
%G&cp2T.=l$MU%;j*]#.[:5dDCU,=%%XK05;T)B[5H@G\N$hBsk#JX<BpGN[8)dtXAYJFX0#F.8BFkq?5%heMP_B_]ekF*+Bf"4T;
%o"WN=3?8,6LApSVAHp5">%%<+g:qaDM6%PTerR'SH[>S6Q()#*A:B"+H+1<Wjk`%t/okFYhg)PH0)tb3eRAai6MjV%Bn:p/nsqsn
%@dERk[Q;*1P3%+F_/\/7=AYDk3KrLZD:gWub[-nb5P$uohlSaXd,l*.rmUWWIQ#*j@b'^[/U'(mnW@DP<Yj;)rrs:t"j^-3#"@o4
%qZ0D-0:hF3YUeh%4"&qR4aZbbY:Bk&:Mehd[,`@H?_W>R55j[;PN/Qa+#IZ/qi^/"O6cf)lZ/n*]$SZTbIf'`W,HUiFhnc!RlWVO
%^'8FW(EO[&kpoa(:d>t*g>bJH2;bS)^-0$['u2*"c<DqT?D,nTqKh?rMW4KcV`U[t5O[b^Vj>8;U*IgXO%!P`lMF,Yl!r*XQhS.B
%Rf&K+S"qB[=W7KS*iKOZ]iKW7oUi#?]=,1Pl^dVXDn/c_eIP^n^3rU+O>5K/J,XGRVntQ;#*_b7og:bS0sc2B>^h1;+g&/$NB[9g
%-EaD48B>_\^4#.0\"3(&9C=[pQs3aa=OLP@4L@\qGA1UKhLA?>c*>QqR-tPc7PD<4r9oI;IU>81Q1iAhh\>\\?`Afe=jBhu]i%u'
%*Vi"?X=PH.`?\qt%^fcc9Gi(MVA0c]OcrhiQjJt&CI_dON0uA9$]J7D+2/e2`IR32HKFD14/@SU2N\`\;Nn$MFI+5]]a;T"Rb(@^
%M<4>phDp&NrkOCOF7BHOZ5^F$5lTn"Dfi,[Qka,7XreR<=`VurO/PJ9cp/"Wc`($jfmaKk`T.546=n;``aU\*0jhH9k$[f#;:aER
%jRWo4g$J\.n_4^MmPW';dB@2DCl/<M):9;(+J'"_KW)_35UI]o,7URs+EJkg+EM3Q7W5KVYD,%/83l<$#@rS3VB877U/>\tT6^-/
%$*+2SVAoDYjn0j=_3Wt`eh<VB]$uLG3#f9`f4!11DSjBBafg1mH(PI/*)Slih;bCcgn(e.PW2Cd+k?&QRhDV*4"\?gMG@E:hip)p
%IHp]CrMIMI@V)nCTKHDm.9<n<1l8EXp7"g$)63%d)%LkGhMGYiZCI\%Y&$55WOM%lY5a9J?J`d':HH0)A[B-#Q-J1>GW'm`f!J1M
%9uOu`/ag/!Y&D#./H5G;pbn:&29_PJqTSJ6GMPZreIQeTd_KL3J$Y]SnCJ6W0!;7QQ\W>IDr*HbF*'\dHW?&n2mS_05;[;E\8NrD
%eb!A69iTX:hjHE"2R%.\]Sng.Dk_4F2jcOb5Q+,W.K0)EoB(;*\+/W'l9[G2nGd-=Pge>Ni^To,pNo]h:8<$uTc<[j8!Fjo&&L1j
%L1ZK?`7pW0q7=[>-ZYf]gu]S8Bl^LOY&>Ds_&A9a`[.1oTM?c\Dep*;aXT/dXtRQ#V"V7Rm=/%hn:)"UWW.3*s7P`X%kmACJJd7j
%8"4cB90;s-J<]<YGC(/5X8Wcl_a99FgE&lQp"C!m*%7<%V`K:lmb61p)X"$O"hetpDGdFE:BtW]PqJfWf.niK]I3Z+`Hj%M\Ug6[
%A0_:q7Oj&fRB!0"\iO`tIZqbXTqQ1[ZU/<hp-nrW_hUuaW)kq7>btADrEQ,uc7brNHco[.q-7DQ=#SpMq?r==?MXH[eRT0T44T@@
%/&$aE>f*NbgZdkb]&s\]Ifu2.P!*g<Y&:s[3>pqijWIgAF8j<'*1C[<!M8ji)n$tX^C1/X9i2D6#]&ncD0&8YBpVWMC@BK4]A/mY
%Im8C.]6O57WT%9GIQ'-+:A84@*@pe#.Hr'op&*$O!RAsdD``.s?=`s.g<GC7s%2CO];-63G4lUj`O,rCmDA@4YrI+Nf`G(u_]DNn
%j4hJloU;;5i@D$U\gVs=Z`I6"m[rNdadh(6WOtFcU"?o)_50uHf8flEL?^U$*R">nV\LYMN%T7GO06Jc<;kc!QhAm_(?aW?Io'cV
%r3<oHWRh&*f3L4Fo@5Y!Im8GK?LMUu(3oB<cU)'Fr=c/^`Pj_S)6k3#%OU-TnQ)#*=7s_41HU33cJ?o!qn!<>jrPPAF/rYf)kA@c
%BQeCgil\g\]k1`o,FR!Yn,;S7b,Hbt\MXC@gdXEN!%hT.j3PJiXqtcKF/O6(A\3GUX,i0SO6[0!f14T`2(OCVq=Q-+dE_`&`i=#f
%l(<g.T4Jas`1[\tN6Zj"pWnQLq\RRBiGl$4m8"hl>[Eo7\C7VYqpk7nm-Q14s84e+i"0@gs!8<)o1+2cS2(n!/.N*iEpuCbe]sj7
%44<lq#fqL34Z`V6<BGu#lo\EGL%^M;C8e(QXK-cWNmA;J([M.pnbi.UHTKNpW5h2qLUUW.TBj[\%u]uu??>IdG"C<Vc20_,HDNfH
%Mh,GR0>3b#\UAr<O">TI9qEikLU"9)[`ZXu`sc\X*MFXuh75DM'jT[5e=Eor,A%V]nqWNQ`9(cTC?9V5,&QO]dH=9h(C+3^<e'*M
%.\cfBZP#'loRf'ln'p(E2j[e:i4=WZ\k;,3dsZU2XnFr,^-ouhH&gOBC@0LJ8ltElM@,'R9A8\%RJ*(unYSY5mQUU-cLYoGqX+Hs
%VS51-`)62'o,X!%HYr!+#uahIW3jC<.dU.3,9T7#UB]V+9PPON+((lQpDb!)_`E,&Q3qWq^_lH&g7+SK,MMp3@MT<9c,k/.7J]P.
%?S$EXdM`'j0P]fe<deA=s*Ai+2t6gXs6C-[+7R='ZX6$us(]@S2n]F8kVFun^9jK^c$H3RBR;)@@Iq@9pqb.;>8P-e[X(WVB-dK^
%(W-cdDFCZ_-dTK<*.E'8FhdS("%&3OmJfnpRS6->"7bZiX#$,`BCqHZ^TDg_F%&=jr7>$Hffd<(V+l6*rd*a*s6pi[,!u=<bE;KS
%_;O)IJBTWR5&W8gaPQo_88`A(5d/QSr]*Q"IA$LRcF=&3\F\3dh#-79?i]X?2LPKO2C3r]^<t-dpW0LbZG+$Bo),K4]DX6Wq_"\%
%)#`nRFE,!A[,%-q/b/OS/,)>b4sca:'+-$<SUPp8qs'XYa1Yr-r()MnHXCtD&m7:$07NI2lL@O%IHF25RpOoW&(d9%>-Au`ps&g'
%;*heVl3dLSWUb9'X64f8]rGd`?G/2S:N%dK__:)+Hi1s-%TC_]+)Uf1rU@2XCMl@!n+YG7^/'B1nA^8+4?m^iYfWYi^\LZ=FndYo
%KE?W"I-$Ek5HEVp50kF(B&ZX>p^`bU9cc(X*mM:*^@lp6bO^>P\P%%HJ"[8$s65O2l!3'Y[eZ9)m!tl%bHJNj<]8:S^TO3=\bl9K
%T@jab@SXW3>bh4rV"K%7M<H?]Sp7WYl)lOG3aG2[i;%#`U#)EOF/i/7T7]mY>sIZSBU+m)1b2hgbVpeR6hf`?ZbALkR"":$<8-d3
%2117Pqp14F/)jK4rNO]*Sj.H!@2lrElAJG\s1-a:mCmE9"#.@EKBBl8RW]7!r8a:&]Yk.bfo)74<`-TB%dW*MXP`9$Zb(YQr80rH
%\%GI_SskQ9$ZE.>O7tYEB\lp"]st`R00it)F53MieA(EirVkdH>=QJ?Q.>1\hX545OQplNZAX3]rdW#TXdc1Kes&mMCuaC(K=Cm;
%rqHB'pE,ID+X9Kgj763H*diA,p[5e7hqik[It-/Nqt8S:gQ,^%SNXE$q3S4a=.=7-mH_OE]KN^c%t?1Hgte<As5+e3(iUqFm6B=<
%&,STI]C9k<O5f\ARU0,Oq\Lq##YTc"_g+0KFm[NLoX!HTQlTQ4HM//6s4KTM?JO$_(aMIgZ?"h?[SNq!POn+Tn,?TW1rYs&n)p]J
%o#WPgICaRgde3>*B![!diGA8W-hc/_It)fCE3]9-L!(9=HX1ajm=Ws6a3QTq62.g$--Hb'8G6u>,5>/Yd[B^?`Z28Ih*ejNo\!/m
%CV03-b!3XIgA#]#HaU8b2QlE1rCcd$2m6N`j2$-PW;HPEC0P#Sf[$#@r9*/=7di&+CBgK]LWdt_kr7\Ko<[Vn5.gdeUYj:+TqZ[X
%X`kFl>Q)[dElL1JGRaPbT5p!:EFJO&:FuN=Iq&5Wrb.O_f%j]*I=B@Pk&`i@!EBNr\l0sOm#I]&Q"T1([XN\UrR./4_#sA-qa#<4
%hd-#Pq`uBSY^Z0.TAh`;S7R@Ee&t"+CK8a1JUH;P?sWcie(MS[9cpnqfW%:d&R%V@FX'rg7bg0)m]*%.oh",8hsL<(::fWsrL98q
%"3=b1k\f@$_<_'Sr)`Vtp%ld/j_r2[]?lq9BsHf9!33ArCnbmZ55=7&S[EY&H#WQhoBl=b])P0h^@]L+UNpDE]],#r[;,;a]lgl7
%p1DtuXHb0J*"TKre,B^P^#*A)eN\^_Ijk#KhVQ!IM"?D.0&;A9)g;:j?f*L7T+2oUs/3%rT0$t,BBA4_s!RaTpZ9<@M>>,S96fN]
%)9;X5oG$_;?[TPb_PO5]?[;9Vi96$)N.+"ck-+1X[_(j3M6HaRiUO$6,'E!Tp?p/d40S[o_=>M$KltF7FOKe?S\GCkJ(jhup$1<$
%en5ri`0487?,Y[N\Yl;(e+UuZ*M!L'1T,\m?VWVm]ljA.me4JRf9bs^s6]I(X7]*r):JhJ-(%tF5#nk#0;eFK;`$ha=]c'uV@Zcm
%Dg`pcrV"Y4:N*u8Cd$ObpZUtMgOCl_'"tSknF%CGY1<N:SRQdBgli[!2`XJuMY6bF:r4r!ll;^qj47htfJu8k`u!Eg)EUH&l-O2U
%20P#,d_WISbh.b'*Oh@:?tU8u&da[GobJhTh!H!/<0R^",c<D_J+&8R$3-Kq54^"eIN9<lZkAAh3dti2rD)pBeZG#O>rg9a<$qUR
%'.5[kmN"@>l19bfh4OQLE:*FWE[,kLUITM\GL(NK*!P9o%XbJoqdATrF6cX&$JE`_*fY]mM[fYECs*^rRp2?u\8Qin**b[\Q%ekP
%+;#9EGZKo3H'UHEl#cE2"j6baX<=1[5<ECVd-AXnSJ?h'PTLh/nFFNSWY`PGk?lk.pN$%'b2M[8gRT<*`H#)JQM++5fm"6b^_lu8
%#[:*]4:adBi<FoSl@12CE9<r5*-H8eT>+rTOH/K@o)DTC?"\^.8:Q'?Ql$fcfOjVmiJi;EJ,95Jd+f083APkp8PGj<oGK0;T/$:p
%1J@c>o8c(&mYJc@`KD/VFkFgoJq5"QiWr#!XirOaKYLuQYo#s&Z14S2;FIPVqmMgeVS0OYo4X;"XK?mI3KG8$-@(+LeU6+-N^2:!
%XW?tkg_Esr++&MO>-p(2+6bRn)(T/Kh-F@\%sWBiG-F$>BDguE=t:)2^ljIIRsp+7OQN5ah,uXO3]s26WBY$f:[DBEMVba\VPcNO
%d@@i/l#u5NVFu-T+ZjPgGAV__!_R[j`oonfL@)]0\k>">P^W6a^3>p"S[MDnk_C.\J?jCQLAhc3geQTXe&Q@`?F[PRlCRP7An`G9
%oRm8QpWXmjkd;LD@QhH$^Lp"-/7Vo2CDO%.c7sUaPZ[[1iqkBC?fc:mdUu^<a'm09HgeNC@cq*=7ELD#[D2D*h6k"`*"H@*Z[1`a
%/C\H@S&[/T1@"^3,EVdb\=toHp0"lM(&iW(o?P1rQ!>PejOWJ`^E']SCfQd4bta/u/OVsRppR9M\;97i'3@Eg-b0d7J5dM\rmu<P
%fUM+fBb=6*rF_Ib]tP\?d!k5rHe2iqE:(Y[(H]8^@u"jGlaJY#\Ig2#q>dLX!QQ_j5XXFlJ^M.9b?\NJQ4/`?]sD#6mhVs!jI\+K
%c:+WbkmaQ`Q?$m#rl'6ZlWs>U=7905gq.>ci-;OkleS;CRgt2XPJqJbmV[!^&f8CMMc\jEhY#3CIJ3b,f8+Mrb+W)4A7aR`M;M[,
%WC#:L1`G`g;=up&olHSpl(VH3WB-X`5YI]XoKS6TH2#=4@=qSOmd`#<:VP_3o&^G-hL3pmA,Yc[o1T'b4FV1Z/1GONAUs>\h//R8
%/haE;mqtE+4PU3BL^smCK"tiCW'Y1_+dZI6NB`j!:Y%[:kM3^j6@7]6q;O98rf\sZrM8ZVUh"RF5O[T]:Q54fp4nhT"o;:<^?/#;
%eKfQI=LeB,)A[cKUA?8lJR"i;q";nP&)ku#;r+(Q,ea$!ins).4*Pmus7Pp5p1gq>]=W.Uf-VbLk@O2We_,hd+<5l"TZbl'lPjtM
%CR&11s72fTTX%C]'i\48FE3hbk0)mO.+dDRN"oD9,0Dbas#os&Q:o8jq+SpHLM#tUdFL@.FlWFq0/FF3HbX`IQ1['pL,pX_I\oar
%j(Bd08Q*r@J*mCC8Sn\_dEN'"Ja)K,.BG\jRA&70Yhbcp`\?X-4)Pa<pb5QXED*/*6:==n],Y:8>jk>cp@?.['<["@X#@+CHAqa`
%b/&pq]?k*2BsR`s]fL55jg:A9%7P7`Eh4q-5/*0T:AX.Gl(<EMqrR,k-7N;,H2I%.`u?]3cWeiFlBqHU63"iPlh6^obqWLioTp3j
%H@q17AYqYg<fYuY6_ubc)5cJQNQ_?Nfm`ttbPT%=^ARa**';@Dp?:Xu#?SBqSNZ+ak6:h0\RWh$=n.*bksm7oE.%b9?gtDkT1Ant
%s7,L)s*Vd-DW<s8B+"ZcoFh1ur4bDk5PWtjqU8gDDu\ED<?/Vrm-1k9fUF2`iB@#egWo)i-rd1hVJb*t]%/[l[VaRK7U*!UO[?O"
%3R\@m%Ru7Hh9J]"ib*nQ/Ge&P_fs!gTAct+An>E9\gkli\!e`0?Z^/>U+0/Ce>4qOXjX<1s$J33WFke@65`^d<FtDXG,B(I0.L/p
%1'^N6.r(9pPXSdm[VX[;JsUJO\ghf9L]^pD,(<`hs/R'GR-8LTgm=MMb]M7@Ff!eaZ\6,ZBe-%LCunc#1LobQU4^@>#$d/$/rM-'
%*I+b&I:CaXAR.,]d5\_;D+e_L?.KJV:..P"[Z)d%<Y]rYNHINT'a^pY9l%q",$boe/R_Y&6mJna,^-4fV,bnIU;>Ps:%q.pXC%I]
%O7P]:R[I2k!UC:`<R7,U[Ag0oJ_XJ`-=qF394-9d"iu!63Z>E.b/Sk$;7:H,/'s6f9p7D5-`&PpF[No1ca'BELD$FW6NSS$FA4k5
%9keJ1H"r5&cBbV)U+CkY%T[:R,&?MQW_4?'RbnCF3fsD*TP[;"'(a*TdHcSh74]-FeP&qCFk[hgRtVtgaA_$Qd*AfKg1kE?;(dh>
%"S8d.,otc1C\gic"B!QQC>CO'Bb:qKO>s!7pk>]S0)YT_THVU<K!lRL%TkAs[`4V6NM/KRLm#4Z&T*K$!f^n6&WS9E8\\tUm@I9b
%Y@ucD.M+323%kE_dM:>`2Hi[B_"$9;2aReYR2NZB[Q"HEYDm8^7b>e/okC\R,]u.LW\,6&b7k]iSWB)sh5XUP$_^.=<cjdtW2*Xk
%XQ`N3GLOd?>r4,O*CWCbe]_bhO35m/Z#7;n\sAej:ee"Tco4YJ<qN?5(ci0+8U<kp0BeMEZ^Qc-C)/KDmBR$bf?K8gN'=*oFk&hB
%c&A5b]?KYc7mq_SqE7^g[V<O%92*dKB[q@0Tf&epgg"\nCJF-C'XQNQj(PKn`X+o<1O="k@r/9AFWo9ufES@OX-4rfEOtm8hP?EN
%f<eOL?W?eFWq6_ZmdF64?R1Y$[AJ:Kd?4^0Dkggl(eBLd-B\S(1+5Q*-q-.k$a#*k81YJh[2&(/>-8dQ0GA/(EkIKW^F?ut$e_tS
%Df`lco]\0[XbEoKmIL&uU))'%'h&)LNi4.U94+SjV%#>.X(REgf/9p7Fe]q=T$cq1d+5='5/]$p"r(9?<;t\3l*Mgk_J`(n&rDT+
%CK%a&JrdaugM=a9VL;#t>d\Y`S1;u^HD]n!)Z#VK(7UVG'ap=tp26dX+VG'ini+1UWTZIla3gUu>TIp(kUo_C/ehCfl\Gst$SbK0
%bQSU/Z\"duGYRR]MOD<cVq9OB/K_l6il6$ITH$hJ\un8cfG-;m?"IU_(72J9<Q#Me001EOj9cN=hc:IJlt2DleNi*BG+=h7,0I3g
%CU!.9VU;47XJ+*IZ7m;]RF,+.#Ld?a^Eak`^C!#jQ@B)hY</+2KF4b*e<@>J:cPN7?lGePPmsUW4.*AT0Wf#^aM,"rnRP2<O\2;d
%T,+DFYHnD7-9[604=qB>A89O[o(6\nQ\r-nI61CMEC?g!_]0@o5T@F/qL]*N#=VFoe9$&JQP#S:<m[9ep0#:fLAN5jf/#!XV\5Z#
%Rg.$<C4^3L)HR>q&q'rLDH"u#9Zk#EqkLOd4DGMBl*gc";NW0&84hh'#Xl%U=MUS9M267/m5eiDCc#^9%CUC=O1>,B-J%Tq%+'/G
%qst(4.CBOt]u^\"HPLA<jO^c<)uM%"&4]-'$Lb%ZYVfET7!,_KF43!WE7Q"kRc41k/i'FL=3TToJ0H.nL<G6nq5gZ7k><p19/hWH
%G%'KgkQ\FSMWAe7O;"0]3k=m*AS2YcT1#]KQ>ML,g+mnp8\umG_B"(Gl1`WQm]GcOp,;,2:@pS.rq%I[-9I&oZdFN(>7[p4o1q8R
%XiTG"giYBX/9EJk<bVt;^ZgR<)0CrS50*FG`V,-8`M&rEkm)SBJ>e2h+O`Tb@6^SmKs"#O6U3G+LMT"LGN^MpfQQubB!?\liT"_j
%2/0^(N?8:$GF%[lMGJD?;L5,g\uD,dio*SZ8b-X\4Nf&<6hh2kl/Pru/2XqG>.S'V]'QJ;m:*+.U/Xok&ia18A58Le;\(`,I@LM.
%=9H>#"5QPG&..,P$NB&i8sf`H:S]ij9;AN[+mPTS7]XU(qZdSu"^7,>?5[!%[((5Wk[ej7L4_4nW>Z`b3ilkeHL#6hkL!;[ODIL"
%Q(;VC\36*#5KH+^_1N\5_hu1'3s)u2^X!iSTP-d8)=#jL%0IG?")X<l(oEt`Wp,$OI"m,TC9.tRA1tOOkgjTap5m*_3eIAIUbjp$
%kT@mID;<r]`_A0cKSIcIknHZODUc'>8uiTJ0/X8Eg.Ps>PL$>4[sNjaArEM8OWk\u=ip<eem%/t;2*b][\n[/"qf[`F=>e(kUbep
%VY0#RnRaB67].`GG[sCmM5+E-SQ7&2RP!+%jKEV;TY2#0!Ed`O&3=.M:Yh4LgcR8S1gHLS-4P5+b1<*d@'l+*ep;t@H(o^"RC0CD
%8A:m:8>DAtjL;Za(;U\272N!ECr);,BZVVE&2g``U0Eqj+C/)s2gC)\^'6nE/K+K/ED72O/L2;8hYA<:L"%UnHW"?maQRImECa;j
%<0\74&WsXMO+e"YVK?b*G["%MYMk<$cl:cAWj_9+d`k:o^F`#?cu%DKQ"3iO[$TIkAg0!Vfr>Rs(2X_j:ME>);Ic;3=_St_%I#.;
%&_E,9,k3^5m78t>16=l,_e5)5WbNWsJSRb;dU.-Oh)7pKcJY#_L(n=bs(%^eXKNV+'!`j9$;Pq$a+@?XG+!A_D]ifZU4Xu>2^?sh
%M4c"RdsCZs-!\n/Cmk^#9/2Q+F=(i.Ma@Xm)sI[mZ8V51aegCLJW=,(,)&CA/%m+'nXPW<7A,1l88Rd8K*=QaeJ>fcl9J<8IB%n+
%ETLJ1PrdY*6ILlFft13W6jJBe6>\44Zlj2slk3J6EZ&ZTM2Y0?VP@(Ab6g^D0VUg3PM3tNZJLROU6;Z8&qDi!-U`Va7MH4cUu2f<
%DH5r=)\$*D'n9u]\/Y"A>D%G.>j'7dJ=%Su\:R1m6nj$s?IJtecr3;5PE(TBp-%\AL1YD"VBUP_:7FX5qjNB,\dN,=Neio@=YPhY
%i?BJG@#35/i&qP/Q0oXq!82]IR0Y^*pI8+)WXGaKg1b)u1#li!HOg,_^GCWg(K)q4h84j]9h.TT\3IVKU5Q4Xlc/._,LT[e(^YRf
%C1uEQhW#_&X[H279@sp2f$\[U$t)smoPZTr-']9Y78+>\po??S5XZ(bW<Upgb/oLKC;V.Q<V%p0<0R;JFGuuQr^gX]dF7>mA<g0_
%8T^7ha0O\^iCUs/S[9<g"34=@KcUhg]o0+]F\rYZEm\/^+'`sN!/P#oOPjm;7t+?9<AL4(N2Ta(Kf^BT-c5k7Q/lfa&?/(@'2]W;
%`^uf]+06Zea")*a50;<<Mdk@u.pI6n5tYZ!\&.pWlNYc'@D%\XTGgu^?[l*-*O5`D2H"YN`sWhIi6HlB2_PcjjV:3bC\VIg^8`[0
%/.Q)0E2Z\UgW#dT`\S)Hl1]eIs0++p!BENk"b"L[C$J6Wdi%.^dH,9TS1=AL6'c9G$jYJmG\b--M[m0(\K%EBgPQJt@2#HEM2n$8
%amm\C,!(_^hEu5kGBZKI(>7<"F]s2qrY=u?*/&,fF;V)_B<39/68'JQZ#m7`H5L6@,$G8WBBXK881rOdSc\AfgC)uH^kSr[JbWO4
%;dEpnP#X+#'j:ecOO5A-dn3kHjBgO/I7VGa*>[4\/66RWZ?%n&?,OZqQ"ErA=UM7JF6MZ#Ca2I$p=rg*Z-c/SUK`Q`;Og@/FpaKO
%&R_Y3Y5^g9<\(]`A;E^(i\XGkGBaW:+&*8dp.l'],2sM^mnQh;,Rl-:=L$QL*+G'HR+UL^KU=N/GdKol*0F74VDq!#Oo\mffN"I&
%-ua&:PtbLMT>TrsI=BRh9=/0HWXV8R7YGX7)kAnNG7<,UZXApKnpWcB;:=$/FD5$pMuKD=b">p%dl[fjZ.heqOo]"HcGIQ"qg@#N
%\V$[ZkV/-MbZ4^,/6.2P76:.gi"*`Md^G(V[[K>pZ.mB5Cu?DDIJ@66-dOkgJdTLEW=0CN4/m>Xp@688GBXXtmPd4D\Cs),/2[!Z
%Pug(feL!j-#XMJ_\J8s"K[at$h"QSp2oSR#RhcmHerlBVE,<6;l6qVq2o;Sl[pj>"<PQ]5Q`!L&M!]dQii>Bi1-#2(WbaesMg'9E
%:[o-Da%\n[XDQ'GJGQ"0XH-15mfb>\(9q=(C,s.]GK!gLEIn/p*ADZcn3SOnVQ$UK4AS;:,>@Di4+uXAd"Aj$'H8,T4D?NCSopFU
%#Ue5mh&K1#OFKpGMG+L^WF-`9WIY5snH-Z?X'n66^c:,"kkbqfMk_$4T4m3Vnr7SsQQ6qJd>^!-;II2VMY2)lS6dX5\=Qj4UjFVs
%qe/nU*]+pkfS%ZVDHOk_[3Tn+Q(Z_Ll`_\i.-'?81S=6;_NPbA'Nc`\L<P$C#rR\1A$AC*6rS_naK-o?BLkhIL#m7eR2I?.&E$+h
%U3h"[9']AKA>_ltFJ]YtC.AEY='$@c#t-@?')d!qnO=]H`>jRD\Bl@UV%HAi7pERJD"ft`4&$R<+DM;ZSno@TiH:&)i$DBc"bB'V
%#_F4_UP0ir5uhlZ9RiDGBWKUX<n52*"htU!.XVgT,0*:Y-Ij6$N"BWQMk'-B<h:E`6UW&ma(grflAP^rWF3HeOl.(&GZ$mqWQFEV
%6Q?eE>[!ea&dX)`rCO3]Hr>tkq=!7_'MGH"Ng;.,R@nKWC(1,/3g6ZoOQ,2$WT03V&a:VT!Zh"rM3p(pFGC_Xk5[Yn+)FU5E;N`c
%Xe$7c,?V7YV<P@KQLg5?H;L]fki2lh`^pI>8Wa&-a=NDs(I`IqgY@M#a^H?\f*3bMTl+o0iiA-36O"8gL(*O.(T&*q/W_q@[Qa3#
%:Ej@N<?0;giCSqe$@JVUUt\6h8Dho@#rHkRIeqVZ5_[9$?%B14Wt>7F*^8GYCl"G_c=t2E*SPua!fbU9S*%e5?G[9dE@"@.)](-t
%40t_5#0O;p=ls3"+Z;oBQChYUQj<(1gGmgp$,DnrKrN>45+U[]n;XA/D-V+7&>LR4bZ]9SR;kW\KpBT!-A/[P'c/3;lr1qZ1Pc&(
%4l$:!#Gl%U'M!^oZ?'"j"kCo`6A1VkF0[k(&;&*`qgbfm6=CsnjACp6-1VP6W#"JuN_%,j#8*6R@s,o6_m)sPc#./j(a[3QH@LQM
%dW*qKLap?P("q&RMo/rd,/RUp_dWoT8L][8co'<lil`I\dDj`ml<n&.KKoP>QO)tIW@/s*iD>5i2r^WIF:j?oAAW:L3JYX[_(,)7
%bRouL=Gh&>^TOOK8WbCSg--G]`Z^>'AEendpXMrI:efIU-:I_X"lSKQTquUu96MaWqRh]\S*hh0'Z%TW0NH)iaqum`P(YAQ9.B&$
%MS40K\TBUs,c($aV&5f2R&@`H)4P];P:[Chg2]WWaIX?;&esU@JNBTn4$*cmhHIO3NF7j1$rhij.jB;NER,f#V(US,%o6BQ;;dsm
%"At(b$W8UoMI=_,lWX$fd#BnRJDj',@It+fj>S8NmsN>3_d+E!n*6S\5=q\!CQbU2]1V?:n;D=t^q2l<&^DQ*4*AG$FcG)bm0n+2
%7P_JWr1&5Q(V<*CTBm5`G7-fLPP3*$&/i,fe/*b97Zf;0h3k/8LE\I_^]FR%+lim"_G(UlmdP?66L[b3BdQ0,bf0:(4CqCn?<!dn
%mLY9n+FT2)q:sr'"iL5LlMr):qO,Z&pc"WgY#3.W/&)fdV4:sg7>cps*=OL1W6%5!b9j)g$EV^1e/)0G@7VX/(=g"P9k.Qr8l*H9
%o@:"f12&Lj&h-URn3CnC$eeZ.V_G\s%Z:`&0uE`!pS9(s1<EJQ*RPubi5gLmq0^W'FCC9Nf'_l[mtk?s(2#oH#D&=3FkE"TkL$OX
%)76muqi\18F"pO#a<X9,F#j:\&[WVuG%Tr5C_-^Vkn%g:&UY<j1/t9I*]pB'0sDH%;6PPo>cCPZdrn-r0E;Q-Gk(Ui4-ArY(IM'D
%\n^P53Kc'HWM&c,S)b(LUfM(^n8ULkA"&X4QPA.VAGM3..gpL\>ssAmKp7Bu5Vf[Mq]ju07E0;SIJrFce@X0e*`oce,aEN@&*$6[
%Xc:iI,Yru8ZB/U]Nne-=$O-5fJuV\m+q&9\(cmM778KrAi`Tm%EV5,Z@5C)D_;_mUhp5)UPk.0N:P!_JE%GjM(XXQj]"m:i='\'"
%G'PCC?A8(s*J\coLt5WEWT8,"V2d#3n1n:,6kkHAeBS:o:lUXP4^P&?\7?CU!j*jV";-N@8_8(7%8;G^Am$Q\0p]Q`VFo=A6/(k9
%8,tqL[+?f[+,(,;?RP(@Kj4ZG7M:"6auddT[?/B[>`,Sa6N0!JWR;'cP+9[`e5bm,_DN.b5)h<RH@eGoXtYlSOcg3TU1'$!7+&,Z
%*9fA%*OLiAg:6k\+_I?\%51r`q-H`%eI+cH>O0G<.QGL<?bce!_6]G1GuVWRROj\-dT&PE!8/h2=&e+;klo0D26&174,0&k(+!5*
%1a+b7bu.r_NbVKt6*3\T1Zr<h,"ET:oTf3"'j6?e"ikS`.W1c-#U4mC!@H:8eWs,B"hrBU79>U;0!K<f]28e81S/oA[@*F>?A9p^
%)2>sH#Os&`Z:O5%i^BtYCjpHQ]/2Wc_b#,VTYmMR_Q5WM\/4$1+JMdebA$@:$t<B?5u<AT(4C`@MMfMTkV^lF&Oe]b4A6Q2Tei]r
%<E(Nm9fc;@)'Nd$8.2V5a[HA1-j?b],B4["iJQm,OH%G;BoRFo*'H>oS='UZ&]LD?_4d>XQ9-Mr0<##PEtm,f?-Zk+'Esb5T7_fm
%$5Cf(U!$<t61.HMU'/WF78JdbD-R]kim^-+:.LceKanB8WA8QuE?R89O_Zjo"mC)6c_ri:/i&8kWNQTu`sTq3,T>l$'aLt!W'q2^
%-)Wf<(J>lAMMsuM<?J;['H@'Lm^0d[(_pGB7N`ma*Hc9Qlr"u++bMmFUi8<K?0'\u*XHb0TZ/I@_:$2bZBtkm,-B8((o#mp8.;1Q
%,)EQSL*=s=9T0RJU60b])\JqmE8Z)([p=c>16LoRZl8UO_)[<b.n?jm<)JbbPcc@h&u9)-K`m=7X-.Nb7\L/H$>#4(M%-*,keZd-
%nq:JpUa^K`l^T@o#B1&K+02.qU)p;W$UP1[^Ts&eDDWn[Pee5_&fn/.M64E)&53_E9kZX9`>)ri5SOB85t'Rh0?\A7g?=aAP*Ru5
%diTBZ!/2`DXqh7IpU_,+TW;#cSIr5o;/34-e@Iok,pd.j97T0;;>JtG(q8B;3YcVkL7SB#[E.WaKBe?2*Kf?7/Zj-<<Qc.4@oGkq
%<$4MjUl1dH+'=gm#`'C%geF[B+=.OBpq!#b"&[QTiJDA$!fuEmPMf"%=_H3;YG8ea?\(o#h$/<M<:KMC3*1Kqduu?4V2hj>r,jd@
%b="qA!CUV]lm6Pk9;uA^LkuZXpKfBa7G?E.7<TufkG18Z5Bt2-N.<W[dRFZi6uP0eNIF4GD-ZT5+t],g6trM66n"&]X@d7;?):Cb
%Kt!7(hL[SDUG6c%mr6Sb&Zfddmo+0s@_P^s5[Wi7<B:F/g"QZeR>C87mT8s6CHSS75:>'!eg0d8:fo;YMbHP4T<sqNeB"4U>4dC;
%!MYIs@Fo=Qj$ZsMe3XY>[M7!lmF[Q7AE1`W'6X%s@00;*MIt757+YLCQ!KY"Ln\Q4LrcNP!kKM3bYDs#`>P#+J-ZoVIgA$b?:AFW
%$N5BFPg3Kc'!jLD"."l7]*JHO`=54[:_\inNC(),\1g9?KZX;+j=B:0R&GLbY&.OI@1`MX*(RTa)putB,5b9odmI-8l(l^%OJXiJ
%<JZLD$=Y2GW1f5<H[&hQ]b*SX9Vb54]7N-cLt_:7l!gR88WRba$PT_MZ:`2Y'1!TA"VIJnMQSMuaJ;I\<bM1Ql2-&Zc0ZtRCIMXW
%U3eML>:Lo&UFUkNC_u-[9ctpFaPE#uL,-,HpK-Q)krf=aQ#[&Flh[qmo*&4Gl",J;G>YUIU*du0.pu'o_,%NnQPj#jW^Wm[B"S[]
%22I!e"Pn+XNjYf&5h%Bs:JkCJ12@XHB$q+pU8W"$N')3fdLn5TL'^7?<'`9:g'u/2f*]uZe3>O(gcu)gMn6mqNp"QPZJU<?cL-K"
%1-efP@>K.PoJ^l37M#kb`bk6;1WPtPLsEPS#Hf>VAMrdG#f6Amd?#a/gR#?bB)U6lPQ=rijQRqa[-2)>W1_`gAK$a`opeP*Di;aB
%)0PPPgZYHn-;N?2IN\bph4=[F)5fI1H@a(smP)G6Wg2qHA38(m/l?5[2%a041uJ9+TeOt(S[KU(FKt0^HsZnL6fcQ[[@n=&eE_Vj
%e`Snk:8/k'3f/*D;&@e-/rFFu?<:4moo#lJ&@N=0Y^W<KQ(N_E1/fq\#SX$Ujn./M.?n])4E$nn$IL=^G=4Utc%Z<@&6'Ri(a6Xi
%?;2OdXWHjZhCT@eL0n!#\W1BaHHr4>K10k*U0LJT;P*Im1$>4!5t!dalDk(c'YCS_O%j!e5ZH97gdE8WG63$0%LnghMqHn%ln(1V
%'B4L86R%_53)"t1548rjO/"9AWJ!hLoTE*CG6D3jG\!)\Vm<*:AAj02M0_f.f;IY#RP&ogSRLc=qTH&UVi>MB7^4COUNVfu^j?_B
%N%M&7>LAu%GqZ"*$g</?qVJogl8'k3C"8=8#d2%=aZmn?Z(*)D$POZk`Fb&nI:X?Z"<aEr:Nk7;VtD6i2*X3A=Xi`,&7l;&GH,Bq
%<X2?QiZ<;`<_QF8]IDR4q>5d?AoG!6rkAa%D47<:H6"BA/aD1uD08pH%AI%WMp[93_\5HS5SPA3JB/EZ8d!]q!4bOi/uM,i!_'*E
%$/Xu]/(?7ZUA-'kaOd<6?g,LCa*6.Z'Xl37a7VcTZ?R.5h;geC:"3JT"rfD3YZ4'0?S_28\;]pM_:G*%>L-<C7E;3@OY7C<#Ngof
%fN+BJ[RGEq"sY%l?4JH=5\'][.G``tLThgs*RS>^!pdoE<ILa6.,kWeZYlVqC(XoI3\:('U:l*>M(UsJZN[gDn4p0fidh%c:He/D
%o1k.&-EDI:):(C%PIga9&=#j6#8KFnBU/l8S\=g:="u*r=m,n%'sh5('@/5;0u2<rhr4IT3.urD)L7nFpQ85Pq#u#,&eSh_"cNlP
%rN+GeXoX?grh.`YB`&[k+X#-'(`PlO(.u#'4?gS@"-JmH*tYEIQAAm<SnCUYJ0ou/j0qTQQRogY[$?FsglEV=cU@!\09teJ_NZ$m
%]TN"*q25m!)J.H3%d#c>#FS!P`\S-'^eko\^eQNk]Ol:;TWA3"'[KL^<s*NO&(Sn[k9A[:PlmB:!%AQ$"m%PB#cM.I%=,1`5`&/E
%oS`Fo0qM>gf>teME%\#4l;)1p1Wt,!.H:S/MhE3#XCuN->=mp5PR&h<:=EVJUtCX--".LAnkeZ]dj3dhmN0R)X;SX!8cns6&lmho
%b)uc9J'#)hk&eEloR'\2n>InumP.bt;SM)u255a6Y6/fQ'SMn8WAh&U^_:g6>+WkPJa<fOgtinE-Gugb\Gs1%6an?X2jAGj"jA)#
%WERfCicS+Sq]LZlT(bid,2pfu;#VApkreE/,;RLZrJkm*aC#h%!XX^%8JJ-VgDYSm7G'ZM/.&dRG-o.b0euJ_*Os$kCBce"[QnBN
%&6k5nM'-0bZLNq!U-:in\MoF,l8c%e\tFm?qV1KSg;dYbkE0ZjCHK8F:c[5$KoKoSqsH+QHD1`X:VB?Ch<Aq3@$7-GjIp,K!mL@=
%[TNEgLTpn-c3!J=S]`dO%O5-[QCQ-p@RLX]_qO`/K'XdS+8R+8-P;B%eXCHV<"jKBEG.al7_q:m-ua!7-?Y".`2XXfJmCtg)=dj=
%F,HNp`"eeQ8]1V*aT5c#aoolBa0q]E?^j>s%<#(2M?&c1R[Mi]Mem6b+7CCn$TSM5X4XctKM=SLV8VadaJVU+.QKsA0SNd$#]R1,
%ieg*0ao![k)$u8S1f$:'[:s2/Nc#lehFMtqq8qi`6-l)NU5D.='d6:j>VE&tkLc/KM)`[!a,;qa*:"k0JW*YKT0]b^-9_u/[F.qH
%lY@[tR<-8#j=?i^BXLZEaJ$EQp1]tnT(c-9M)a3].Q&[ajFjM6<jWj':f.`ET3YSVm\8WrV2hHhR1dCRGF=7N5J*;\Sp,`GBK6\H
%H*5A<Jo$+GJ/"!/%kj[6?#[7mZ0lT+&=j)?I<]&t1=Pd-R&@a3RHXp8Ul>ac=IAQ")3n3C?<F).:d-QA7qNJ[A<euFn^R._OloPu
%JG/QR17'$IEDFG1gl*Af\Mt0Qn5QoJTL<`Ob->TE,%MHHA<fYq'O"1$+:&<e:2XT!5fq74g^sS%ZmuYV2*t6rBLkO/m6a>T`=ts.
%l`Cp[V\VEX1:"cuQZ8P5U5,\P8U8L$q*S0t`=t[jnMJ(ANZJM?l5>Y8jleEl6FW@o&m5AS;`k6?&N?_DrG$/-p,mOeZ"7E%k>u1M
%8Tm*_7Ua:N:He.u\t-G94^d\M!EdCTf<[g;7Y6H_JEYp9,-e16"F'tk/J)V&Ip`<:2_<n.WkVY8^l_IpP#Ft.-(H*r3ei(D3fgS(
%TXd&$O35O?;N/I#Mbq!8R*I8Aa=7C^i[O@,NS=uQiA-E!NH4HC8otelSfYHh#0K'/eg%)+A;[4TFmOlIjfDhr$]i0V4=Z.06r:"+
%oiDd@,dSaAX12\tVnbC2ij.PQa:?Y=n@V8R2\^WJr2REXOfTak.@rZj^cF)9X:Ni+(ADS5?0@4r$?Mne,Us3dE(!^=3%Bs?H+#K.
%8$_DV1+QP*CL\\[&4?^"`hp4)MO(:R]$89YdRg!!!?auL+ar?9(e)e_X"Ei,&jRP)\WTN^@.beo)(&JnS-*"f`ghS*=,P'.Z]9-j
%mHaU#^lO@.Y$cu#,(O_dlM'&/ZlF3OOig..U5Z?uVHF8-QZ6Wp!ko"C8UuG`4!FgS\i^J5&I_W+MU_oA@!j%=7Jc4X;/hOb_?Y]F
%'BoZ)_M`_bVHF8-<rb8s]n(#>=(_;4G$rIUmOoUW3DdplZG%?LNk7joJgj+=Ou>#`MIX&Ef`VSsFSP<TEjJ+V7-Jl?h&qFW,2"I#
%Z4;rX![pOI'QkfHWh`:8O<]<!.<eItSj)/H-q/R@gsMd.5`r@R\A5gio]s"dT>=FE-#ZsCJ1Un*`enSe6$!+lRaPd14jaC*JTGLI
%=jl2B7'!rBYdpNCd:MKL_3r<a=Rs;V88gboL9Y`R.Rl0?*srjAGS84C1=9p*#c<,J(."ue"ps!2L`4rW7rRu7VeB,8npl=&E7[EK
%<ZF5N:(d4%JHua-=7H?d-@tZR'Vq(>UDX$@g\BD)J7n0$<p,LA28TE&U+1%r<#B4XLb%RbSLgX=-'\H>RW?C10NUi>+'LmD3`CIQ
%1#jS"9h!usq!PcI>1DWRK-l=9,d$AUM/p2_1Er:s><MsV)Rc^i>7grZ9oCc_*&+8Lno^S&iq-pE>a,_LV(L'i82=o5IUaQ1'=Gog
%_t45J/Onl9?jst`@'D2tTBt`L?j]jMGnoVf6);JJ`^EBY&(*f'-`0K)"qGYV&-UO&'1m]!0ipW.302S)/e`MWEb!03NorZeoNab)
%:$_6k0?uIiG\cS1(]d$%-3?RM!5)l!7cVX!Hc/DMij@e_6q.qh1JuRIb9E%uV-pqYK1*/>o0+QKJ-,8:dlPN@@="WV.]tC8;7.m^
%aoG`U,IG>qCE2nL<%!a%*R1Kr*!D$JcN')bcnl[_Ca`-*^ep%OJh[]i8`bdQ@i7[_c_8sI/IG=d#[tn#+#o@G!XOC`4PWFHLGD?*
%B0hesWuK1`P$8sG8P5^f?s#je=JfrSS`F'5&0I:6I.:13W4Nd=F"3c_"3+hf51ZJ6jXgkc5u]ctGlG&UJuBZ&D!*:!pBWm1mYG$u
%.KT(Z1@8I9hAq`J%\aEFP<>Rlgp0`*q[A47nKed8Q:GeJ->%e'(@bo?B"X6KR:sR8Q&L$?=u[Hn!$jEnd./;L":)Z_(I;o#G;hW/
%;"\E.2u+XkBVjuZa'TKiGbI)%qnn3#RAb#`PWmfTUB.26;CUTW#3&'Gmpte[T-u7G0Xd+1:!l7a+qE@X8/:Y+K'D_6o#YWuc>"]O
%kt96;DpE$\c>'o8Cu3HOK$J26cY?;&CiuB<REoW^cYDLd"9ce\XNpuaa9"NGKMRuT@E8LlaF]/f!h%+4CWOEna9'f2K]L2SpW*=@
%aT<F'KIt<`s2Y4cah_Q1!dMgQMTH!GahcKKKu07reB%mWahlQL6VY_>+3MDSaoXuR5uu,qBZbjOb!\tH_;NIfZH<<hb(/*d!p[p[
%r5o'ObJW8\Jm$8"8'?Ecb62Y)K3?BK\'"lMbCR.G"3Sf?\'"h-bQ@skKGD]2.*Ot<b^iI3"(07T1!Ba"bQO<WJ?$hF]Z^JXb^p)E
%"SKuh#L*Aic%?8G6=nCE;k6Bhc%L;c6=nEYhT^\WblYf-K%8*KkadJ)bl\F#`88ak=O%%=c@B$B"Dc;8=O$uVc30rgJ@<aTaNamr
%c@Q_U"9Hi!'@-e.c[lhVJW.oC?I+.@cN8aFJX+O_W6^(,c\.8')a]Vik+=LH+D\bXk,<ljTa,kl'CpkhjNO%5RgtQ8Ag2;(7Fmuc
%l+nFoj#A@jHXr0CR3(^W2bGB3!(t6RQ->@A=eer:L=]srSB2USP;rgpB6[/%GbV8o5C)jP1'S8#NA/KnL6OPr.<dmO`l+pZ_,7`f
%W2>>QAW=[O)mGSfW[h`A<Se:pXC5XBA'M:`Uh,QiS"A<!3W(IELg&Z2]Z^D#)5HcnB("bTb0-2KQoe>fE^!q"TYml,KR$K>1P[u&
%N.oKF0:=[412e"Bjp94j@@W`q4nFDJk0-&\Sm%R?r%r2JC>Sm;XHBi7K48mkcK5S>boAa52sN>;5]>5PhlNNf\YFV["tXBs7a;jU
%S2I<,B>AQ==R41>e/;bu1C%IRNO@'%-D!'t4DUI3c<TqqC#W8_gp9JRB+8k,)@)lp`-lZ&rB,Gf4`1ne#7@+3M^D3Tj%b@E'nE?P
%W/_=tBpJhd2VH.Of.obt@g0KV7\u/5P,S/0U6<ZU*>UaMAJH"`@Q2p??j^^],c9eD'ukZ/3Jc-Yo+ZGQ\_NX>%r$$4(@A'7>FSc6
%j4b8QTtai5`l%h.7e,mOScfih[L1]k0VZDtf5"O/#_nNoH-XN3D'I6OfGHaSXHO`4U.!YM58eoYAR^&rU.W"-9Vc.9;C7QH<bB%)
%@@lBpULUEAUjuHDA&iQJb,Y[W!M$A?>6ii.7mok=6Y,.u-k`o#V[RR>b?VJ59T($LMQC+u**\.hjC^oA#"tuWlKuk9!Kfqb-kU6O
%:tM,6ccgZSU8T7s>0'sf2/OInof?nW-+4.j*quK4r,^R,#+g2iD?D,6p,%QZ)jV`h*a,*jq=-a?F@F>=27@=b8/D>A:qAMil,rC#
%/7"h5Pa6]"gBW@uLu'PR?oZpG"R2dtrGeM]Mq1th&:mC2!qDgNa##9NO9R0/=OiGQq*GPH&mXDr,'\pL()UD6QnN/Fk(8Ff+P(6=
%GYo=n[hN7fU8&2q+fqbBkcYg4J;Ga%g8".,"3g&A0*gXAJtpC9(9bjh_^tLm61Amp6S+_1^f-68oT6pu=/\i2"qW5G]Dtf4.>lc!
%MdE]P/QYHl-5kQP&Hksr%0*C\-fGKW^!Sm6%(i9I?qcBJ"^]"d<L2Ntl<ek0]:p"'=SUqYHd_"<Lo=k]S^n<8@i<=/3I=XIQ(U*Z
%^dN=q=$:^pZ6Y0]qWT)n#b>OD+.<0AqR&X]??jn-!<b\G4C4](Y-HJj(L't_iN@YAaf]kOKUr3=<5u"FLCpYlm4N6N>/dQF;8\m\
%60:`5ag+R!>!![)']=+;L9)POK!%(os(OM<)2iW*ES]*N"MCOl;+0qeX#*=I5_jb@CD2fp,peOf>IElY3%.XX<*D7`J4#,lIU-u&
%)kE<VA5nZPCm"PXlo,Uc8oU8P*1d6#'t8lTJ?(sN$J7+7TW^*=:d^ss'5p9d_<3/9efu@hM_>XpC$W\aYt.8R;\s\j?"1`ZU6@\C
%hHQSn6`Q8[aD@\\Zh1@UCSb7XHR<,W*&n:2MlmIB?:$0+h&?-snLigO:.U#[/uAYCN%EnWk/[(!6H=tn-KlXi5it.B]`F8`iA$m8
%/9)t/2ZuMTQ4&Mi,OVUp3.dQ)O\#+0Dpc==f,kZk%OO'opR)<;/>4o:&]G5!(V%O3*JjQ4IIF+.MBI_4lV5K5+`#oFNCRSgcP9([
%cs93$1`@rPmQ?S[Of12]MFJ75&S\pL2)<ldUgI@WX,Ls9#4;X%"qM_p1^R8E.\5d@'FmDlD#'Ot2D5-O#ua`nJ3.G%&;Xg6!-"qN
%aVPMNF\TS`eQ#G@lE,Z?kYe+77eSBYR])F7Nr,mgNWp[Ajbn^3-DDTo2@=r85Ql9jPl!M9\A\Un=-`>YO^G5#\FsV;"@:]d^]roR
%`eC!,68qC:e3CDQ*)^Q_TVD9]2CC;C[682/+HjFTi-e.,\`p1's"[GL"36AD,!SR3G@XBs?'#-DCq+?HJ@il?k_^FSN2;%m%`=q\
%7W^=V6u7RgJRG/]?^F2<Hl[I8l"4^7iRT4B0+fLtG>rt<Jgo!p\ukDj6pm=A,_ZZue3L0n@>=PgZJC@ol51.\R\RZDak:"Mr`2c!
%!@:jd&t!aY?gRohK2EgKX-1KmOk4.V%:@/g[p5<,R!2Z]1<h`"4*`1Z:G2X^+jgSa_q0lri.1>KU2_WT,AqN*iQWn#Lbo$]2X4rt
%VkK#Q-(DCIdP[P-++rT+`%p#cEUu/6M]q;%\E*#g=Ur.sMs(^,<A9"$Wb#dIM\[cX;pC;hIIs*S'*K!Z^Ca==>6HMA>TsmM`+CR8
%/lpSZ&/f/YVKO[*-Apd$q<JS3o&.0@W5C^fg1=.b?;rLgT;6RL^^!8]Alt2b!KF5@mTXR;7sbk_:[8gB8:rP&Pk1^CEgic=\W,A<
%Qn'3/?N@%@5^shIF>-=?_TGu1Nk@!&B_XXNSaIDL,3\c+*ajYFbB_&5hFECAfG_CTMeJ?!TW,:sEX*3cE4pW4IXMLj#*hn]+#kA]
%nilWU0qn^/=[\$9!Vb1+$?GoqN-C"m(`+XZI`gnd*Y=>$5'Ym#d=Ca<U-ka':7ji12$&Q2-H"TW#KK#)WTf$r68ZRVn9&4_3++k,
%BNtneA=R8]1SGkpNu*b'+Ahsc@_%O2NCdRJ\oFH9]eKD-5mgVH?;OA9OWP3qYr-c3(=>,1>R*9sJk-5C0$]PlKWX5!ZA9"L4l[Rd
%No9R")A8%7Q#R=0o+ZGq\Hd7M<^S#]M\4N7O`>>p6t<<rD]>In\50$;c-*o`go!V_B0/H</qZ(YI6%&dOD'=AiTnL>EphDuY7"7L
%\PIeN.LZ*m5HrEmVF.(4h?U5',KdPm-bh9)+m2%s3EP=(BT0'`>B#`Qcb%H4"`;Ng2^B;MC\YIlU-j1O\[u\'h)-Gr@k6a1RcMT^
%?KU$KBY$M+:8TiP]U(VpglQ3&pYkGXLiRCLafc(MaLMI/"%nE!Mt%>%\LNA&A%W=Y2b'$QT2'i@O94j?8La-gMaApmBlhp4;WV/^
%6_Z<l#Ho'o8f5ku)OEdUF/&f,*C1>V.ia"GcAak1)W?,>\hTqL)g1`;JeZ?E96=DG3LAihBT0(0l`u<Vi>m,;;inq4'`rdch>s.)
%JuD%n%Ru;pfG_CTMeJXT)L'IPmlC.#OD'<LiTme*7X6)9U+6UMf+ir:E!L(X!;Eq#8l[$)Bri7J2ll`R(f*('9sZWUMRo;I\D.X[
%'=bK<3muUaNY2fFm-fDO']U?]2tAX:WEF$JO0156Y__MI2qD]NhW3u4><AXZ)hlpbV5d!p2/Bcl)S2>fiN3"+)-Y.:luZ1ld^I&C
%^nQjB`=`4JJ0iq,qb$>i.?=T_1PsOu*duk+BS>n,U6MSGYjG6o5Hra[Lk^7)@sa.iSjbI[Kl<M`#s`&YV0!1(mTbSm[(.R4Od0<e
%rH->"JNsG&ja0e[G:A40Y7%%%9jC(5n^n/jfSGr"HK93O6mF3GI:hZqME#)jAtT&o4jr`KUK*&-rZcAE8!e8[+cIu6-rC%J1As9.
%V:-f3R\t-QBoMSFTii3"S8k:7nh%;dP8\f(J1+&c)%tj*0/(G@a$(\Ri/*\m1Nuf=_[&d[O\q*2cMNk%kj/*0:ZHGL*/ZI.0oWQ"
%ID9C0#l5F#8e1[&61?@fa>S%e`7Wg*]\U.],Xqoik.&?HqU<1IDT(bGl!#<$r]/.]nuc\ad=n1GT(>X<AI:YCUJDr!h420t]GDIN
%D2bDE<NNb%G%nsFs3FF;@AJ??0Z+UILg\5Y#5@lEl`u>d(3Q![)<"j',>b%9NUf9WJRoH'GTV:gO=8-jRf'bc<'KN-6",a>"3QE^
%k*[`]\X(.Bjj8r<pZ*qH9cK*EA;4VNf4arfiR_Y3Mi8=XS$Psp#-blYbB&VSCbKF<q#BfjfJ)>M+r9g7U4,3I0941d=D![e1_@m`
%lc+aXcd:b)*?8+B1+%\p.r1)WaO\GuZA=N-MlD#+Mri#3Es7;:bFoeZU`:n"=N<5;H&ekh]1@S+%>hAKIAT.c\I3flfsEn#7PnX+
%CHm<P4n]oTEYRfi8eaeM+nbtPX<iTL_Y5L6+]iFq8b"kB,,-8W/dm].UCJGN`6uK\`TX>jEL7hGCTl_ULbY&97jG4[,)Tb$?f+$u
%3@h>a#/Q8&RM+(g/E2f&jO4Joc-i;d3QCo'Z,Tnl=S0_3Rc`cpUX>He<CDhGGcp:DYD(h`\6+7I4#8.O]gU>)Ekp*_&KnW"&$j8E
%l+k\\$%s<R[84i49u_jJZ'O:V-cT[Ndf)!Ib#4OnC3T5*n)bU\nHPjF6/eC;/d=8+2n;=d+#q\%2'g=Bd,1V^1Cs,%>cR"D6N`ii
%6k`Y]U.[3RE:/O>6(<)p@:N#f=[Zs+hWX8Z``n%/\Q6H*!2jnVVSDQWn1Mn?GO@>jdC_<@]P&N1Cm5'V5-lE?`0betJ$!]e2^#-D
%!1@F[+okH(\jW;N'-Z.$8utC2*+ccXFWDSe0tkUg^f<mhp5nEYISL:BJ&B"9b1e7D2Hi1qUL8-PpR,TTP?$A^b9#?AQ;QE_FFE<.
%cT4K44*L2T%c,Z'L,0JcFiS]K''n]9MM/=[$imo8CqA<MRG0pk!+kMgkqDp/PG\ThQ,#uSk:2$-50oFAr\@6L0V'CJTVX>6dSKH$
%GJrQSSnAE)H^AG??0!E*]R/]9DP5s6hTa^GF0C#@M?_cL0oSYp*m]NgaLYS&:?td1%ZGWE+ZTP99G]fq`K/>aQmQ>`QF1ahK##@(
%CqRm]J5<Hn;uhZT"Y(:L8F"%mr<>QR!*jGRdftOc`<449pa0,VSp06ca4)+AVJUPPmYo>Q)SWY:n_G'DX/I5pEY&73SbBF6TSain
%XI99%Z#1afLC?<M@Dp&Y&5[G#:`U`Z=k9_@r:[hA(g&!&<T-Lq&7HTZ\::&AE)[_?8X&(W/NkKtr?BCFH>jPuCrY+q5cMW];?;5J
%0I3=?@K,T>71s*>Os(6O,ik$f4G7N?a+SCHc`.&@=U\WT=Gb-$1OpADZT3e%MHe+$ECGP9$)GobWnQt;/50r%aD:3\E^Y-p_P#,U
%foh3OnYeR1!OWhO?RjEbPEC1l9%8BhlrnWgYrgJs>0UjcW$kY]#B*^"?DW<la-0%TL"6Z"cnK"m!($mBq(T(H_rJSclX]c'E$mA4
%6_FUp3<p:7?=/qoWl+nSZuc'K57#sV@JmX^?OZ2Q%J0/kUabFDE'nWZ"?%uj0Z0sop&RkhgC$^"')SIlI03%)!!H3=_i#?A1n%\Z
%)$.Uf0<bTQ.#qQUYV[BP(eZ=Y4;jrr@!otu.5<\:6J;Ut<=I.Z,%*P-<^2=dQU(1R/a%+^>Fn&\HWXp9TF7!'#pE-0!(7,,>UtO7
%Y&tIP$,pg3W&+_<8]2Z8"PZD3mA#1`SO3egA6HOcR)*kT2lo+=(_;@G(/Tksp79!'!ou6h^]7DQ%@CB\BXasMYRgf[!]e]6j9N)3
%W$E8]?l>jeRYCi"a0Mn/_8`I;9?b5)M:2V"9[$S%ZcTc?ge+Aj?p`jREQ4#g;DA8#Hp;2ff\tb\$D;8.EO?aqiMK1H$"eYj&01O+
%%92&9#E'%G&lo/HC[=RJ!+RT$@n(ZjKS^'R-O\[$cAF"ZO+?Z]Zk8AH,eO4<Yc*_/4\r(H+1`D\cjaj/,_\utnd&YE%thnr.ZA`B
%'K-J+Y%+u@OXJPEf9fsAl@,`F:Vr3Gmchs]fP1C`%JX,XW63G0:'X@UJ@]SYXTKJLmF;^0Z((&IQb"%5KX]@/aU<DC92+C6##b9U
%'d1q6?kO-P(i+0%FI8R;Afk!-D1W+4?kH2t9Qq.^8RbArS/sN>Q@R@u,*;E4p9opCdPfBe4QN/sSWSLf%?DJ=8sKfl8^FPWL-'UP
%">l?.Ecq]Q"N,W0":9OMQnT&J:A>m/32Pj;Z-P5#/E&fPZ'\Fsb>TEh[L-RDJH?)?47I%g>3-o/5s(HP5B<__C`n!ULY!2o&0sV<
%L:8>QifeXf_gAdkK:*H!p/&XDO`EG)Lh-b?6n6`s3?!\*B]UAn&$lksgj3>(JbouIVq-#LK0_C]9WWoT=&neK]qOPH-o6];]#Ft5
%3(#AIbCYm@LqKpaC'S6MiF1Y*l:rZnga5C77U./NB&1:0g<L@qo6u8SM/c.Q1Uh^=7=[%7`[*`%h";;RWGG]P$6YXl@gs$].hEl!
%_%8^Y5!B67BGOWX2`ZF4.*8/3)ZX'nJZ-CA@G3gbRZETs@sm8E+NJ3Jf=BT"f_,qR(SJ81F'a)j#ei?-9_r0,[M@9cgrV%`d0*3^
%2sZ5.YTiTX$3rFWX'.RAY[sKSGfpgr4I$DSY0[LC0SnfZ-rsDd4K+*n)V[VBJu2+9828m*^l09^G&)[()^Au3R.MdrXb!G%2MS.U
%l`Q13Q$K)/Z/jiX]EXjgo78"\J^I$hWTC*IMMDlHYU^X[g0tI"G",[i-oSGNWD#'\"Cm+MR)MLA,&Dk9YhdAJMuphOi,4&n-5:Ur
%:)JFHqPfWV]a>U;af)if'B"5qIaI9]=dj!61h&]p`W[YC0Z^)@AoA-jkkq)#)(!H:P+s-RD8TR+@9<i_iUIEuVpS7-J>HoSQ^p"K
%=P/("kQ[%i:N<r!,+2@5TQ_oA-M.$.A0a;\o-Lm[:JS]%">N+[6l+(0=#<UH'*)pKs/H[h*cMRi8S1WC78b>Zg<c:o0GT!B)=,TB
%%o,U3'/KF3KU=]b=u54Ml?K++aWhBACBd2&AK&.R(`A>e;AI*iEKgM\C\m"<(sj&Y@8BPOY7)'6Ep+R^`HPh%h/FRFblT^d`12A8
%?Kl]f+m5_siU5e(ZsEGg&2B9\Qm[i\kuBL^MCia$mn-XinBSYKZSLkAG3,t09bXK7-:/34XLu^#Q#%>k=2q'`"`VhJ3Q)o\:tWqK
%fJ;gUk;/8V'VcI!?+<QtdT%-.h1Xu`alA<$6]OKa4IiVe+Pn5mALd4p0hou-3><16Mnu1hAHYl[C(@koeEP[q>^>.\>b&8@7nPUN
%\E#V?b^E5V-%W!+j$h?8J9b`h)^MqqoaKDm5I8t9a"\XA2C\+!/G-[?Hidm\;nKs:2kI5\\VNg=+A+4(&<T^(__k(ld3]"#F<E%:
%Si"n1nGj=6L]]YV!EL!cYUG6_fp]9Rqto1<eCeAi4Fj.XR2mSL^9*c@-,sO$U;[c7Ot'+r;q.j0N'5[bGAQ\Pc=k!8dA2DXH%N,_
%j6143LNmc&+;Y.0n;HXB0b%C@P/JFr[5$'o*)SG&%S*:M&^!Cm9h&`iARoNeV;jg_kp@cdKQP%K6_LW=XMa;k58_Y9C`e*!)M$k8
%IRV+'6?PqXdE#bKL<lq8d$3s)o+e2KB^lu)QOIYQR\tcJ%R5!1\JD,<7M$!aN,goW$E!shjg*U`ek'g9@itcn=NaPc[2Y8SBB!K7
%Ha<33=W+.H_#.n<*qY'uOJJPqp\CX@T'&$Sp&6G4j@p,WeXa$LA&t*\m&FL1Pi]1<U4EEqK1S_d[@9GLI8*U_Z7^ie8eq4@i&dN@
%:o/a9a\N9g.$J@0OJ`_48*?XR1:"(6B03sLa`KiM1DqP\;cQgd9Xu9E5H,"XDj@,k&=b$CK.NQc\_J(bciY4oRr4a]`Ipo>F-MNO
%ESD`,UG4Vq0a;qQ))==90Vf5W":t^TYt$h;VFH&S5AappReO])-4%h;D^2F8)>6/n`Q#1\]K%ZK'4iphdnEM]iM[.(fQJLXLrc4h
%JXrepT4a88`.[m'j#4D[U@`rQZ]_*9>M`a2'Y##`jO(9riUXX0jte6;RZi`Ub3S2$LljKqjCBPlkqUZ<ntE@?BQA@BoZ$MBfN?G$
%epbCH5HFmuJXc,q#<lSM[?rDh.<(IRW-C4d'c.d#@prOEqiX-rJ_.<Wp_1k$NhaW;9#_3G?7)44R"030'Msq'WH@'tNG[D6Y7"7d
%^'fL6^giJFBW/I7?6`%uNRe81SRbp0kG2Z_>g&SlQ8&FM6oB#_V"C3E5Tp-_1bm`'INbN:QX8TA.NVi`4\m_@1>h_g44*1N<ian]
%LaIWB`'bhb[?,aNS0?(]m3a5U%n"P\X-bW70k8KPLh_aN+$3"pAK#2O`#`Ioh6^2*YF!j;k.&V!+dG`2`OH&FEI[>\],VibXW/\X
%\QPbGQ)#;'7Yd_tb]p>5eOkY>H<oYX,C?%_#EVk]OAVEr3fka>bk:mJD+\EF84M9(<WPio.84>N9aQO9j/l&]i0_Te%RO$kq!6-3
%A5Eh#(K7h`):1m1bQ,u=9O=&EE\V'EiO&S*G;U`U=A&W*'%`pb\uBOgVL(OOT'=@.qLj-nP,t1s@_RJ93T]je=_i#'$FY1"?(tKI
%<OSB_iU@lLr3rbZb/r;ODN9W<cZI$ES2p/FQ-@gkm8D(nqE/+JB*R:)jBspehjnDk<gc]dNouqkK'uJ3WUifI3nlX?1@pu[mH@Ks
%>9qO=T(KjCEu`R&2gB[PIcLIrCt)&FH8ikLp%*+^C'9LW9iJ,RY",?&ir\a['H=Tq<lG^lo3C.rWP"F4phl*jkbfoNeK(TaTT]s&
%ZKBs!R<CjX&EaJV,g2\%n;DL34NI8r)+Wg\KG^$>aCVo8s6G<R-XGok*%,hlC)#,D/!I]34Pqm6#sHEko916hDN74K+*A[LTF<L"
%`QWC(ZeXD2#<L$CT60@B1Yh$dW9]4!i+5#^4NI->nY!3nnS+VE2ojI?O#k$p[8$!1B"?W`55V/MImi*hA?/#RHDSU2aKTPNM9"B`
%_0,)0%>`*"Ra8)n1GnqR\d_1tQ9#]lK?,88h,qoc3ti?KC#h*Hme^":)r$62@_*AGC2gTj=GK(,:>T*l`JMAI:ui)^@BGQj_1SEG
%B\Sd>^@jrcEmQadcFRi&C:R*>dO/1<SC7Zfk=\&sE2Pn!6YEqiqhL+O]!'jpGoI5,1_K$lKsP;8'm*U<DE8!7K!LCi:lS(NRFM=+
%7$WF:7\8*>Op<3o@F02a0MHte?U$M8cof$Gq\TNSQ6``dU?Bm3j!a?lDI!6n9/q_Z[Kf1f9@^DfW"\<n$aMJffh<`&FRVPK'O&Sp
%*s5EGWFD\ant_#Q<Z>&B%iI^_:f>n*rFoR@D&\i7j6KZIoef$_r88%V?8iOoBkItl[ct.0BMc&cXf^Q7Lilr,<Q,[nreO=S'Nisl
%ZJCkYF2]9o+)5Xt0OJ71C*Ce%9[HHrqVe,^!O,!DPe:<#nO#a<8;$J,a<X;J7iYOKI6R_9ZoaW/Rj3Oh`:-4Ne#f"O4kL*,%kE3*
%,$]HJd\L8>8X7iiZYLc&PW/[O"[$J,UOY9oZ4&X('8TJa9TGX4]ZW_(29G\S<Pa*cHThJ.8BVi-W[QAcBMlqZ#hFa?,gT$cGQ:b&
%SeoqX^n=/@SFi78KX1TK-P58/Mp;ogEUM7Z[M?)?hN[\:"%3EgF:+RqN(HF1U;fYq.q![Vpc?cp_Q:)35X]o@MFGmW6\]hE0:0V1
%A7F/_*o9rAHn.5d%jj#OW%eRPh/![QXi7CVLh,\B,;QFe4Qr[Mj^]R:@q#BUe@38YGLd+W$HOG+&3;"uI-#rE9S=mtVXDca79O32
%s/M*X5qIc'!Sh!TA?<9BrJKOgd^H>>L!MP_@)(5\f:P:5Q+0IKWm;cY!<?@O[Fle&M=s"c.%B7Ok>G`?H<a-+El(\*_nLVVZAb^h
%bGDRT9i@7oE:^N1Y7-"P(4h+2Y6=BBA>n=GArTgPLn:[PXYo1kc5Nd#irV]O9WKGt0s,F+ZO;huaD9L]Rt$&BQsj!lh[J\XRT]sG
%8X!L)P<@`:^PuEK=Z0is#si*cG(d\L##n^^o&Ne<N\-B-Q"8Q,3L1;4-"2.HcheQ31FA**jS[A=&BufB?.<G[A82h,)@sJo*)X)1
%SgZ'-VQ4NFiG4:9Dqq$?O1Vu(&8@B4CW=T^Ddt$/K='%9.pJ;Kj6LI5_Zh=7=NW$6G`"PNTWY!u`^FKClg%:`J$VjeCe13eYt"&R
%XdBN$qS.a:3>4uJLr[Q)\/>bu#PjNFg%o>*g8'k[cU=n6kQ4VDoKRlI+PBlJL65l28-F)s,+QWVSFe/^KOTFVUSX2LWZ^Tu5%3^&
%lrj"He!>'e79<G(?<<j/-rbbMBOE/"&V<KCM$oLu%7oGeX()_a%,&XhLPT>KGPt_G;GJ0D_)Q2b4(o!5OZaS-<\+:iAt_jV?L`!f
%<b:1B!P%7"CK\"bj7/+f-ddjPd[6URoO!DB.;VRla:PE`:F^?l]<d>jjZqg*]Uj?gGme_VifL3Y(M)1-3L4]Oc(/L\kP,'\*^uZ=
%P2kZbgtnHB!'GB\Ripd,/aI_oh4sg>]FOHq?OGRBOXm0nm%fq(/aebTnrnktTnO]IEqF.Y&i!JfZM4Ku?]:9e=&afoY@rss&a]'@
%W<FJMQO-M,c[Z-1<536<#>l2jA>0u77[5,6c44hE/3*?5Fo$6'C^7<$Cm!0/N(<jFY4\`ST&El%R72[aBLcM+:_PeJIqM/^/2i_+
%A]fknOPZkp.iX##)b],qL9I@B>MM'8CRlJS>]Cuj=eX$g2jt9<`/36Y95%j=MP3h.'9ioBZ$:*g&-BJH+CTFSO[F?3XD\5nT`qNN
%,)rFuGj)3e$D5s5_Eu;`%p0/+-\aEg?*ON+<>@Qd]?N`)7V8Vb<2]L<7"k7V;W>+Mie6d"Z''eIg#hPf%Ul%X2N*+;>0&&)\N=t3
%4rnQ8]Cu%l9tsc"kte=m,bq[:G%$o`$Q)9BBZ-JgS\)sc#E^=h\a?TT"[!#o1crQ^:P0AFc.*gW:W5^Npt`:_JuC5=r@Z]Zo80'I
%Y/Y/CDM2%og3@+uoQ]=d/ZdZf],l)QYg%l]c:!1:nb.ok&m7@A+i1ghBh^]=.MsjE_.Poc9A+%M`(MSj_c4)@9oC-M$4%!U*edL.
%E4lG-R(9u39\$$L)8!@MbW:&JjHSR)D:d,LfKuRJm?+nDPQF>4L/l[k!E!)`"Hj)u=U2$?Qu*;F1hi$bOi<1G@9b;Mien5i8HF'%
%i?f8TDn[-b7U(nq<a=G2Fh\f3c`IlPLn9:K(TJ2>7bWEUc3KIts*q45JE.VMc[_tDYWV4%FWc:7s#qM-7SZa4XhYTUD,FXnLhtnV
%gG)P3+u/8(=p,(9qPZ['[<2(,hIpVLQYPrE5U3EU10Tjq(duJh_37"V=5\u('Y$;TBZ-j'KMP')4(n%fWWQ\XQ9.#-%?TX=pEkhW
%m.Mi^&#-#I(.9Q`'T$*RD<#:0WH`H9,etLOIp;Q9RJ\<E*4G;$*"`N7,$WM+E7A952mR*"6mA_+"&W#j#bi+-4^?t\CiWdXSR2A\
%eA.]N4-#4_<?S<9r<0&(KUY@A#DcWINk7#3PEoj3VF9Ts=;2V'J;"g'.Z/.E;+Bb;R6HE0J=2-%+1$(OG#FI#ONA9:d:#r`p=nSt
%lZY>R\?mrJ_0[H+\Kc^Vd00up(.p=Bm11D*$?[e3&=$Snkq9UOA/:.CJBG\?6#!;8gIo?_Za`f@0YfiMM'DC:91"nM!5u\D>,Z+3
%kR3+p['PtHa5mO#1mg7E.9kW=JQ(I`bDAtQ/TGWCk,C\j?(Y_r]-s2SVJcYs$n#,rO[1U"7)[2\#GVFQS%/>u\`u60"BE](A:.S%
%:Q6TO'.a=49,-U`8J4FaaiNgqU6p'B#6YUcX%[OIf/?N0*#`X']:<R8cqn\if/TKGjM1m'4fWB)lOEQJ5T56IUA,A5eL'gcd**F(
%K!;s[#dTeTUSA)=GHb=(i*1;>-),p_PnlP[U5F1h"*d/[DHA=03<A=bR=aCX:iTV_Z61t0P8IW`cLA(I"&m2h'2@2rmLL5R16>KK
%1-d8=$:"V'V76mU,)a*XX"D5``'>p4WK7:[8;SJ<<%3h`k`0YMpd%2SI]uD*SNmms*.pf817!GZ$E1`/H'C6mC&tpH,0k\CLBWRB
%JqkeN_9,0"N=`Xt:I$lg0^3m2h?(J_iXYNF6'*s-3V4UEFtGku<2.s+"&MQt&ML>Q):,#p%-j3jl+kWOh0)XR/ReQ2J#S\5,BFrd
%Ph$Zu<CQ^]+0THJ%6kNBacShE/m]n-N=(*c2G&Bon`3,GPmDJgpnoQQ<@&d#R!6%o!i-%BD*!JEOH^2+&_Af=-rWtV&u(\l'%[\$
%f-E5Mdl[fjVfM33mR[nQ,7;fu;tic?N**5T:2JP)q.Qd;$OfE=!*aHKYehC.>"#6EBV=oGPSX[g715XF3q79AE$8jrJga&G"]5t*
%Zp7ed;bIjG[Gk[]e=eR=@=AlNbTmeJV%]3C.38sB.b6>0<@&sB]N]J0?=skfLiFd33]L8Ja9$Eb/%DB1$TZ:]>PbJOUBaY\Up>_R
%E"WclYH&tn22H"C"f'"niE8G%GZZY[d$cNZj^k\PM1I"-":be`W3#4Q[:iNjibSB50WHqo85/EPOl<cE!cn#J&Y9h"]3N3=k!R*+
%gFs5$`[]5`:*!22T5.*n>*Gd=EG>_HHB?-$kjP1"2-RWG'3npZklD[%ZESoJ;FG.10e"qfLc_uNm&WXLVCJQ!#>pu?ro<=5hB+'R
%<E:)4N,rGXp6S$DouK$3j$q-q:['uP=]N[6;&omtr*R%h[gH`WBF;*Tgs[OV-!Ab^=`m(L'hGr3<+UIJ:rO@iR"GZ:VQVYYojD52
%Gjf%IGluZg`JEjr<\%(ufjUCtR\dg2MSgJN2*MWQEpe_jfdfCHK1)f2]%>cdW)BM6q*D9Z2#4Gm'W`Oj(0Wu_)HT0-;k_[CF%93'
%Qbl_)'ZNJ!Zq5fN]s3R&R^ap_^jZjFVNjpYjI%D"4)hC0Z6'`J9iA5,,$g%q\E24d&o#307TF\Hn,a2m]VL8jc#GM`#jY(&&>*2r
%eVK/"Lroi]Ru+`Bg2ILh-Ji;)8mX5U<`Ro(b4uc)@;m)]7u-/^Ct+n8,,Jkf*PEuG-?iI%iS*;^[n2#MhrKq8![.ekCGgVB6a+to
%&QQ5pRM2mkJ4:7`AK,P0&91iW0UKtK,<FY"&_g7e:^aqYU;S<.*70b1C_g^D\cp%.1hfugYFRV><GRq&[5TD+KCA)o4sW!Bcd"(Q
%k,9W55+25AX@uT*:2;s<jpS1*Vg<_VF[je-/,b^%aI:6VAS.76E`<q0/f)u:5);XmQ!)8R;,*p616Y11l)2`nemqCsf=EV-ort*p
%;FXg2Vp%!KA3MCtZ]plQR`KXIjO<*VO)G?G8f;1cT5rC_;q[hf]M_db.O3R,P>@,.8j<&-)<]==5%S903(PqB_=n7gN*JV[<adaI
%T,6b<ar*mN*ca"QU%>@k18:oU9nSk5Zcj\"?93!J:P&8>>SZk%PP!!hSn7#r19tQ*4/]A7q0AFnlq1lY-6qL0o/)Ah,!JedO^?/Q
%dps_O1'6V],"n[a2.n-0L76r=Wlrk%A61PX1`71'XP?ZB(2A%B,?;PfPEYUZ8tI0g@:etD0m&2W&gNV9(&k_BeBiRl5KT.TY"I+i
%Yi]C(PaRBNaD(IGcJi*Q[q'WYE\Z6=S]UL8LNKCS.-=/IA^a&sUqK,uI1KI$'Y1modp3tSr?8dG)=8:4V7\ohB#Z<uYp6/8`2A>*
%BA7fK.&6_aX-"SVDjQReoXlhp\7"1"g*EsB0!\Y>17CIOQSKI84RX0T'NpD5=Y1[4bp#=d]!s\/^6FtRbfk*>Fa7NiM_OTu)-WZP
%c,`UkAN@);]bss_chl^<..a$q_p$8XB'!#K1:4Yd)-KnaHUb.o.r1T=J'H'qqF&]i`2QN89r;MXP<;tsfSj@DkC%?!b4D3i(X:%*
%k%)%Y;J)Nn`JI]h`6(WCAgLom;S!af@@r'SS?V\!B;A\:'"1rBhi&hdkC%>ZfCM1ooZPK#An?cGF3Qnf\2\j!;iDSS^T?d1<ZX"@
%UZm&2S7V?*BB09'ZA_r^b)FQB:])fil1kJ9A-sb=)3kS!OTfMTSS-0g=Sal6iXDNI_K9ZK.nM^gC<T4N*YAGi0i.M>%!;YV']V9U
%7Whg0-E0`$N0P\.NJsuWJ.Y.@7bJr=hhn_j,>UY/-B@;KnC5BX1_To_!.tZMr41_2l-,6gS,>)j7L^n;3ThH*&^UeOTP4^s#f:O2
%?TQ5.S%(<h+rCad)Ep_'&nFA$n2biaYV;bL8-<']C\U;,!HUNO(7tFb0*R&CT+sp'@#%>#$qLDOjoH+KNRn@+-;oH4fr#RQ@D!iP
%<6[dMnYG%@E(2h@2/s8N^S-Vh`!Bb*_G$(JZ%fG<K*&>%j%V6Fd0cU-4?]W'Qkk37F[q=(!b'#=0^`5+it.UkbEVtbf,aY7h]LB#
%(3)sohTVP>U8&!d7@jQUA+s+G9m"8l6W@j^6*O`sP_@GMF0u(r"c6Eno>dJfYiJT4_(9Y_QIBU'#9d1a[.1M:_i<2hP_fbY5TI5@
%_GoTgR<Zk-ilmO/ENjtGE*Qg8aSp45TlnF/3L=d5mL7dGArc![fqP+2d0c$;c6H+__s*:4:PbJU$"VZG9J\dD[P8n"]Anbg]8T%;
%(omchB&lMfR=M7(H!3u%'&^R))#'"IOgPXG"I%fj/C,YpIi:ETXJ]aX\1"#IK.UM$L@.fX'Xhb&V1MG\-N45$,+7J319cQRfQ$oI
%*Bjd2C)N'E2/S<L%AGbOmlJS>s4c>:[:jS#flt:1L[RYS_n&j5F^I@mYT'ronKN>5Kk2ukeX"6tc^<+)D>j?k':DjcEN-.95IJMN
%=>8RY<EXU,N&Yh&mWaS)Hk5KLgl^10=<&uVA*Pkfij-.OX3];GMk,iL$5Sth>/Rhq9GmnRFP`n&m0Il9>=m.W%Mcaq;`58EP()Al
%<X&WI8.\CtO_3*n(o%A6iH;Inka](qDnEM\&&<#3nbCOU8;M1(&d.]"NQV:]8I8(A%>$ER2QC[i`<_p`gR@0SBb$'M2B@(V0?Gk*
%9M>f!'mF-V7@^8tN.>R#T[=SQn>&4:C?J=Fa&LQb@dLoTZGEBJkp+O_eW#C2/es"s:>40rG2B+(m7QUS@ull6_HEpWCV+!'^f1D#
%^PH-J-gfSd4)`TqI(TrZ4InW2_0ucP5\SmXDOuCsID.Q+,Lc-22updg%.6?2>r]2J!fP:HS//[r9BDELaR:<S4n)dhpIS`Z(j*J9
%2PU<^a<NRSO=6&EK/LuHXN?nCeQ=56"3?cFjo?IF$I46`dqn_3&lG^'):3?f6P_j7:JrZLBN%^?/"el"?*LpM6<]*;9dR!'0MAg_
%G+"2/:bZ*)%tH[\3BLk-12'0k5Ckn(9)PUb]"W,?eNo\jD;(b=fD/k,i:nbM/E02E"NC]Q(&&b]<=Xu"*jfEl#YfuY[KQ<-e*WH+
%:k6&7<&oWM@g/Ugl@nUNh!6(X.=b&$mV9RA8UUdmha02BU!gFA)S2(`^L#f#:^R41k7FCpW)>HKF35&^1ZHIj,'-LF)<8"b-cM%-
%987+0cNu6Le=#)jB6F(T??fZR+6!k<!UE&Un0(J.&=R`6>Yl!-f1B/'n3VZn,t&^d!4E)GE?b<A&Y>R*8P>.q-9u,U+N5cT=kEHh
%\P=<`$TT?g?NVjK]8]j3P41C-%Nmc13ce'0(a<r.d6WMC,srB36*e[4g<BFlnMI]/IYggM^gjKdQC=D9k6c0g58n(>Z5HWP&s1\E
%&de*E^-4R).ZIi3]>@iX40OUc:Jr2P7U7<FP8i@Mkt?J2g;Rr;UW"]kK>X@^9NWR5XF-Nh9qX,rO+OOaWcb8rOjfuo9/]PhX8T`O
%D<V>/[mK]f\QkZS.>f(c6o;<Y-lS@sl#5!E7LD+d!;n65b7R*pQIjEP\ZcL<+;i)`"D'e]YGj08Cd]dlWcpE>%C2]0@9Wa`@2a+7
%k10*mB0EI'AAM2/m$APq1#rm^DUq`]DY7;K=7FpZ`TE,(rR1'mdTfP?Rh!9h)PbU>)2`Du-)GmC\tH#E,faRbnW'8K+-!4(8ctT6
%WhohSX.=o(SThmg!?O'C]odTU&cj>_Zp+'F*.th;"lN()SCM2KhI21u9iF]S@]GJcI"e51\`qH^E7[A\N?6^7ih=>!knC+)c8DjW
%Y%)h#kP@52e;rlCV1jh4D\)Qn2.=:ZZjNtV;/&lg1bT&-KJ[ijC'&]\N28sf4m+t77])e'+q00@Hg8@>iZ=XC.!I`ZWQ#nAC4J4h
%&CQd\9!.#&d5KL\l?&S\\a1Wt`&g)P^0i@W:usjuD,ZF>L62\)-G%V2=@fUeP]/SR5V$U[PL1[L4aD?*Nj+bjM63pVO#at1:uA.X
%M&mN"$M_Y4LR3Q0GQ='C!<IU%ctD_U0u1RI3.Om[PWI+^/6nf:WNQ^Lbd'VaDpG2r8BE5+NiuH?EA6*YfU@R7J1'$M1!+%cMXQ^g
%DH@cnV`T&%2qG:pY;`9\D<:&[KMQBQ,kJsPhd?3d<"gk37!*Bhq&A<"CSAV0,:tUDd3LAsY?<(h_1NJ?"C61j+5K?8BbIaIZT(A;
%g.YjH1TG$$q8/lEJ;7)r[gBJ4LjQ3:QpV,7_RnG]=ic?[1?uaR>R3?go;`_9J0<8d*/]7$m\C2Fc[0'e.3(e$VGdnC@gK[.O":#n
%ZC.#YfEKF3F0BV:'=LtGHP;t,n83K977_WcD8__@P\d,A-kfF7Zj$1D+JR0J(5kW_/kidb!#/3A$NQqS!N"=dL7=gb.^J@C#b<@W
%"SrjKY:BF$;'T2S_=KF_N&2[9rNnB#TUU$tctRur@Gsjq\*5S54B=rZ+VQt'@!+P>aCCm7>REng)4$+4OL3)ugeiS&d*s'+!EZiP
%gE\qPVI#%j/tLoI90OMke*K=[8;?i<SqPY2C#c'dBj%SXK!/:H@T_j6SD_M#kR[s.2)pWF%Oh94UWAC[k=BIs?^SsMKFmSVC3[lj
%B_QDo0$K8\LP$8,6,OY/(k[3E5tP)IbXN.'U:t.AD3hB$hOcUp,Hjmf"*5b+9Y1UZT8[8IST5;-ZgG87^CD;N`Y1DTqf^RX'NQN^
%J\qOgA&YIr>,'hDC.Y\m.q"jI/hN$TmNgR9e>DYqjGs*d_/ZOFl/t397L"<)$5$<=CRPcXf\0Qp5jg+\b_!1*>AN53;Dh!EaEU]O
%&L,Ka[AJJ5qRa%>b1u'YF-Rm:\FQcZhmGWP.CO,gfh(SNbsqq/'<]sSY+pm;:p3L3%VuLtiX"3`A>;o)j!U.lW$s?\bLeY*$hlm\
%!MD'W5A?AD=DZJB1nLRmPKt"d;-V":*[@5H#6dhm\p:LS:)^qLh,Y"nd>3nE_>>'qN`Lba1-1ZreaurMGlt0):.>Oc0=Uie`Z$?R
%?9JHK_bVK.C-.1G8Lg1H7WlF/)\m)?G't!OoF/skN32u/?@fJqOSFM=/UKN;G[Y507ErY<W4^ikZ`2baSuq$7Gdi#(Ql$+p:8L(%
%2<s*2Xr@S(1g^Z'@ZR&*gd7t@+,<cZ/,Pou=;b8QT&LG/(N3JtCM6jgc?N+%_5L#o.d8^oOcCFPk(r4>NBVkl([PcW4rX`EoHpJ0
%-f9pf_gXMqk[ueg<=d@LGU6r3Lh"%r]'m/!WoG/TC`7NT.<-V#q@0YpU3,uGfSJ\H8Fp@T19c>TW+DKF>RB&;G)Wh\,S.q0=$CNE
%kt'3?q\#MWlKlWmmsA["Q161?i3TkR%u`=JOLjE]]gf-ee,_(A_k4#YbRVTg6Zq3o&U$k7>3!0:0#tt,KB'^J`>`nW^g4%kU60tA
%BdG]@G^;6ASSHIRZ&un_oB?`i_+HhRQrdu6!,H8^Mop+l+336jj\'JL3pZ8j0]\bsLd\EV#+DBZ=u]if^2bMr(XR'IB=='&JTSq$
%R$X8'o#_*=L-d*$BL!\jAhOB)fSF-Xbsp+.eT@<sJTYp[5W>[ea2VisEjU6pZ%hjH`H(H'qT0d`8X"`FYRq6?B]I;/>%fg)r#1+m
%J<<[G@A@-5)ESFOoK3(L@_EW#4*099AR+FSZS^4/)JuD8mPe('$SGk/<TCqcW`64_+s%Gcd*0\X)Xj\q>95of.8b+Hp0;[]7Nt+>
%7QL1O0.Rn4&pXn\(1]Mm70;>FVS;9(LbnG_FuH'fDRZDn@to`e<jYe4^o2s3IAs=&N,UjbnH@N9_A>7f!*!1^e?_bp*V.>nhDOD`
%3G0Rj-%HSH=W;c+N-\K@E^"SVLquAB4&Y>T<("i+O'5IGF_Cgh(9<Y@-4Q\61Q.7`lS-MN$7"jTbt(^kA%:TCNZ-;r9(SGg):lLO
%^<SP")3(uaB9%piZu*&:CfFgW*ci]gFII)k1,bk>k4mQ8)-uLKdbT!e!?'(0k)n1rZfRk#l1i,Yh-D'=WB<GdCh."T%'o`"N<Tr\
%DQt88oTJ$lM.>U1LTjO-4")b_3JCis-q%=cBN.8`(ff24]Qt/B"lNmULL[*jZLfm"8\$Vpo1irFIdZ7flH8!3(j4%jO>?<PZ:9m/
%!j,RIgN&;-L2R2.Xb(7-(=+C7D3JmkZ<paulFbCsZ46Pe9G_qCVDCS/p?OCf/`["h/\UK\%(WK5.i+E!;lSe*0):n+R*Rn@Lh?Ij
%\%+EBf@cL9_d])%)<pUNf_Aa/36GB*G);DD>M-dZ!P"S=l$5aV\gDYkI:S@B,Gu(=lT?E@E6lUIJT#Wk/8+oeL'7m6e%Gtin:3Z\
%).V`Oe3K@WnZ4[)+jf?%aSA$s3lf<"gbU]k&2NhRF,]JI@+:R!]i;u<"\,Fj\I7#&MG.GojF!VKSS)IOmMSH:i7!.$I'K-rIMsKG
%QegA%P(^`O!BUuQYW,J%kjc_bH-uWW6:U6_QqrN@dl!?%_^PgZgpZ7g>"+5F[aWc\mLe_UJtp,j0hqE!ArOBGLQ&l@E&nA.M8$3'
%*tFqt3Z:8PmgZ1&b)Oes?-#ROmUuT;gRTt)D0H13A@1qdVr;Rtm0>Z]%iIC@nD'b!o@<UMS3FcG(gP[j42cPTTfoqj1>2$XVs[sM
%p/ba;ae#X5qoBC2l?,/t6^&n-(f-Lk;6S`_4$@?5m[U89dPDB:ZdTZd;MQ5?>&)DiSl+<M<Pjbdj%SFckjc_bcRAO1+X?Y@N#cj?
%NNnZeEN"+aC,U5/NUDus7[F&@fpe<#BtPShMutfuS09s2Jj@?[LVS8-@q6N"13*TjFH/NG+]tV8%X^8Y(`B7@LtgOL%h-_[^^Boe
%QaGGo]EXcUbo.a<`C\V1os6:ZR.smj2^G9V"/>,GqSO9tjPscid!8pZO9XOb<+$7"D0j#UDo]q%KQ`:U]c.k9o.nY1>eWs-r38GV
%IRgHpNce`__IK]SB0S&R+9Dr:4u/7mE_$;Nl>)sH_8htR8'#?tE"_>VSl'0@"dWlAnoM]$f8kJg%Udig8^"9uapY[oqT',m)L4V5
%\?Fr!NP*ko)nXepriSs7fF"b.6.f+S&%BMI4+P>s\g\DP7<7ar0>!7&<_aPS$4f3[AB5&7SWmmlo@36!4bC,0"ohbk1CfB9laWap
%5rb/RIXYgW\\mE2!Lc$heX*kc$qC=MZ641!guH`g_F#^K58r3>-i?1aAu8$<Js72hL@(Kea_WdC;EKO>9*+'C9m]Xn9d#eIGIZlc
%j^]*#S/`+$"D"+QaT3tuRT\+U1*tLF+#i9XoHhbAUnE$%So4\>;cB>oM2c,$9]UjM%Dmj<@sCNt-*B5Rfe+#n%*6LU.OlPY-r^Kc
%A>LakX)(2LA6X$j0b@:?dkd-C:n@'j/N'"YgnU3:7[]<h^"]nLWorM6^^3(,:('Tjb@o[fEJdJA1/-JCH^#O2h:)f\5,/fgL:?R.
%;"7?bPROao;,WMT6A7frK>dNe_$3qR/d-'-kdd-ugR/&tZm^Wo\^,JaCL\m`JU=(TV@Us`Q^=jl3?MQ`r;tHsL`3-+:o@VRP]].g
%E7ibg"5[!;%H-:S2EfitQ/:9Bd?[B\@pbQ&-m<5/(K(@jL&CsWLPh)$QXqq&5LGhb$PU#h'OB73%;<V/+)MkO*ea8lfifG_"J*#1
%?^M8j:^(;&@T:-Z$PTj5(L&]p)&%C'R$`P`->>(,8%U+`JlSohi\-1qgV?(Z0RAF]lrY2/oq;d;*Vi8i+SP`@"X&MPEE=GM\1C.,
%&16VSc'@J:N.W%%:=DDWU'=`GF:JU*,\'1rF17<;`j[DR8CV;'Sm]T"3O8PtRfiAFD/Jk0<'LE/"pLB2D6f;X<-b5ZG#&<\X4BlD
%rJt2m['*1oLQ^+PIH<=?'.I5QCSJ6?"Un)p9n6iED)'EDU629US$V3eU!nX+1jrUI3eh#%kQ02E6Hc6g.55u>H5:ML9PtsjWmNW8
%c-kCBh0@VQ;21+#Zn6Zk44GR&0P[Y0Q&Sm8..%a0?ja$ZaQLP#m81M#P)Ohb!`qHBid_LO4dmaLhHmK&ff!Dl[ObG**sY@PNLqqR
%aio93*3(MRbc!)9?1m[3)r<cZBaWfa1Jbfa!-'El#gA63E7^<[.Q_jrMjTcITNMHn\C@Q:VjA'A.sn5q@+Q\c5`s$R'ooa45Shr"
%dd.^,.W9HR*N2se/HNJ5/V*B9ZCB'5#X>=9c1L^/1ji8HH+Q00]Th0Ig#qlNK-W9$`mR6/85pYaZNkRf]rW]jV\lk,SM"[[Wlt!q
%&UK'4>agik<EbB@-JC7Z'4SSO4fTDjl4LUSXo"sf)u@r%:t>a5)lA"b[qG$MFPmdsbW+0(8m"r$2K0]4JU`rP/jY^+>>G^h_idR?
%\pUVY4(4[M>)'_DjCp7]DIHQ>d^ecs=6qIV^8i5`\>mR)YqGagX$1S\*+;*0%"op-d;N-rT2o540(8`("0Hm<0FO53YGEu9*^]#s
%#U;_dL:tu"e7fOVLX+^h1>:O//W1D?/BLt`qq>HM':bO63HL(*`SMb(Cm-+VTY6>ZP"eq_g3YEo*kK(?<1)u+.)8h#[_6A7_Q"aK
%cBWh:@c+o$Vh<1mm"?9N(h!W(FR=S1E5ZiWl/83DaFNDf>l)n)#=0O><REY#S(('Bk/=(B`-,4!Gk>HZJCVhDgGg?nkXtKlKsMYl
%!O\VD!L8RBCBCcC&:1LO!s((p.Ld9+&_gr03@t$OMpV`8*;kIdB*8ckk7)nl0ZXOj+VsPVKoSMdkTKHT1jmMaO!#N2JCm\W3>ATU
%`4Z\S_`4p>pVe>fU"F<4b5?;Ml>rK`Ba:a<F;D*0MT2C.;=1^bpe/`35aQA+lBoqS/E\(MH$Zkk!.^q@"YsTA+56nGh7OK7Q[ja'
%!>skf+)d:$R&%pYV`Z"Sm)*_8mO]Hl;I?!ZFI;6a&p0FmMErPSZPJgl?^I3i$6LiMJ_P.=Y5bF6`7919=CkAN*Koo`e3Rr\Wl7$N
%^A7#88u.i+;\.#?K&VF572ea\jZR;\,>L+1696FUD=ZJ7QWUN&Z..A[?EkYb&+cU9E2NmD)p[0E/j1dHKV66&/i",DPDCQ>H-h/3
%;Ah1;MF.YX24uM%@l#8?'r,'Q2!D&,/tRRJA)X=Zr'h:`lMF1(Oa0<,.63@.)K!#o+bT0'XtQsuTi.ijjpeFK->^&2,%h's9jGV\
%+\Q(tpJ3DPXUBpn.k+A8d5I0TY[s/NWH_P0J1u*%;kg*koDa!?@;`EOcTN+V>=f//*hQEt*G<K*fhX.]fi/+IZ__8JRE]HuWMVsX
%hpAFg:YJNk(u4KNY/m^DPK_)O)9kP(kTQ77B'5rHTd3lL,k3si@L=@)R0h_l`+ZTP*fN]&J"rJ<00mKY#Er!s0=`ab@e6Id6.2ph
%FmX]2PDQBqTgs'U2I*6YW$fu+Ff=YK`!FqA1j2poK-fS:l_A+P/'7O#<a+)n9f]gtdf9\7aWGB.#a"q^8:oN2&2kC`+Y`<7?)f["
%#f#S*5M0e+l33,[EFb)_ogid^$=!%O@ESg#S+$V$c2m<;Vg+@K\;Y,fl0!S?7>6XoMg4QjjWiQ!6b!M_H^1b#m3R(LV9V6Ygj_)W
%k\qUlEXc;K!m=%j6i#.+eV>V4Mm9.k@3a#S*naCW44E`Np(FNm;;/oMW#=7@N=8C/W@.5KT2Z^jU=sbDUuFt:WaG:55RC4A-[I09
%P@D+Ic@[T$\`-?g"M*s,\AkPr_7*R=5srVone<g)Hq>P)TT#B.e0$J@]-S4CLdpS<8:)m.C[9]M#r9dNbr';@:%/#@\5om>_&q6#
%7`qR?HG%]V\kk]S@BH>>H`28\etOXt*\U@CGABd8dgIg-C1hk[eoK&4"_Pis*V$IU3io_FD%BX$h-,@I)lFKXaJ[QSL\5&;P*_N8
%?LWaC[&,3W&*C[Z>D6u'QD3/8T("LNoX$mLYd3W7lLsRPL5K.9AL*u?Zbsp@1G'fI?8n2WH6[lFg2^\_f"p?*S'jh"-8#$lR69ku
%B-V*N'r;&U>AgM:Z4$@>m%.N9PEe._ETKT..T1GJa+O:qf?PRX)6R*K<574SIT<Ma5KIo/43hikD2(')/K7/m3mR2.9!2Rl9;II-
%[d:*lZl:r;0@-`^b?<-r#;D7d5&&:%EQVKZc_H`6m]U$Ehc?7YQcr=L>Kj1DPkQl=EdN`+`G[9RZEsM-f&O.lhML[^8W#(VSli<J
%]!K>D\WV#d<#j<.?dBbcMNh2S0tHR\Bs2)n,ACVNAc\cHs2L4!eS,d5"joWU<2FA2qR3c3QbX%UJkaI$DIfDqNKcsrL-c8&,)6FB
%cRfpMEs!uh[:G"`1sSp*R\fET7rW7[-$1HXbKPZEkfTB"Bs9GqD/+ED;?;9X;-)W:W<WUc2+4>Fodo\o,5Jc';etQO@So9gR,V0I
%HctZ_C0e)XRKB^_GV.+qd,^NjD<Pl>!ZCf"@ST$t*Oh`>I:\Sa'u7?!7:TeF^jV9/U]ubrHM>5O;Ni%dL'#l[<B<Wd"=4C#+NH2=
%GKFMt,hl(a)50rn511;M7-$hnQa%fF,TRbZI0ZP2JTuPjZ6.:&KX)&%Z#K>90h:!+$'ji+D!uGS!oR[)e7IM8VQdBC/ImK*buP+_
%5UWi$2^[[(&j2OVO!Nl>,6pXYWL&co2e!m\EZp6ict=q:#N^lD`\J5QO%%ej@=.BVYh5aNqRj4naf1%&<E=fGZu3&>;W?ic(o'7s
%msWB"eJZ5i"=PXr<Yj(G$Rr#CUqqX,@j/CgORQC@6B/RLJ`j@src2Xd5h2j/SA"Uho#k*3D8hT)@7]`=,+BD_@#RW:`^CuFg59O3
%JL09!Y!*]O0aoKTL9q[?.ZGUba-^mX5S5`LXValK$nJ<3"A(u/V@es?OPFSA\2>N4)cT]u(%@2U!M=/_#/tUMZF_7\hhVna85_Dm
%:)oEW%L=CCJWjI?"EE=?S8B7N)nFYAm`<6!p2/GhN?Z)\DnmSA%Qdt>;t'u2\kCq,.p$R;#<$HT2("ACqg)%`$K%ak(\?s2>?c4m
%df,J\f?DdQY/lt<d@B-34*5BO7KAH:jmOERXf!iU.g4uA^qr8uAEP;D`>S+t-ZTY2]>snbW7X8.!,(K^m%8hsY%?.)W:.-N6[Z(2
%@MHMbOo5L#+e#P/5*Ab(e>s67E3cXTB%1@Lc>l%VVM]8o`sdem6jdO9V72K?KZA]^,"oS&G0u?(I3e(LoZF4XmZ%(A;`EMW<?t*e
%g_)tnl-uDj8GQZ#%.U/D,=@uO+a1[5:LT(L0N?YMRq,3kf%+F\mj$5=VeB>rT28]T(5WC;ZsqFf:n5eK#@!5Te=L8#aE/L1pr#Ni
%JI"q'Q4o)^`SsOQ86$qtFWUqbKL87lO@V(8&dm*@!^;an;()\b$YP.p@t>3GI3decNuadH?t-C2:fJhW?OB6%+u-:u82TKY)AW\!
%QNE;5?jn@rbmD@C+p"Q;Uad)M$:N5.]pg_l<a?OZ^PEuhN.Y3t@%'9Dn37@GS:C?\G<RMpI<'8lj9bIAOm`t8_usj>"-m3/E(-]j
%m96?%TN!gKF;ldg4Y6fniY^RCL+lpY,PL:n]):qq0\Bh]$u!&EN3cGugR;?8;eq;EXFpf3>$Gr?dIV()C7;7?>M%R==\$*$'XY9V
%4eE(%2V93oW"hsV&mK8.!T5>^O);FE_Ug@@Zs_'o>Iop4`NE;X*=*(%/r$]QODMHZ*B3SkC=[5YEH._0%Km!6_-CF]H'^E#(eaaA
%!F2:CQkUmd5f%E6ca:^UBPb-kh*fdZIpE("fLQ,#QB".q:<dKD9A4dr"^D'sV'<pepq2I>^E!XJ^eMVB=#ipm:KDEJa(PQ.c?G1Y
%Z*iL[g>ise\:af(T9DCV3[AB9RfLn\j\Qs^(:F6Y^R[1TJ>&9f1k2E]aIjQ*:,)t5PT,qn;UBs]@c[asBK1=s&((=2js$'W#A\Qq
%6(Y(6VOBE15pAm^)d<5L&2#m$b1E2D%'M3>.8:-lA9_Zk,L*A"\#JiXNEYqr;Ld/n$dMJ%n(Fj[b8cKNQOYck5F_$m@X)Itf,7mt
%qRELT[3@+Xe+-s0F27:f;Bonq88_>CeP.h^+f7P3r#4b&]WtpmL@815moo^0B/Wn!fpS.7f*]YlLXUW_VSr>`GBd](fHl!io#cuK
%V3)/5cb"qDiK^5aY#A^WLK>6QJOChf?J3'Uo#=:=^p(u@WiLMIb:6-q2Vb*_<Aous1J3>+_^Z$.Unf#P=SjHmoVUZUh:*2kX)%k*
%N'*`/>qqq2P/,<6b&rTmTp6W,#gh#B-:FrR4k!8"=;]Y\kLRdOC\/B]V,2i\Q<(GL$4)&.ZU,JJ=@4U.GYZaZG)',,!GAQ7e$,hd
%E'%U;g6&jp;`.*'#tld1_A/9Qad,u9^RH!ae2anAFG+=&A4nH-h,Qso:6A[_=`U;%k$.H93jc1(VN<KSLK52&C+>@qPn)BdV-neM
%-fp.[%fKVfQ%^ZSleA&,i%dsgQ]2EY/?TaD5j&^%K'S]Y2%7rk6?%`l5qjld.*F0"nQ!+]RqdIWLh%BI'*NPH]u^0)5>A%)dj=+i
%2"bEV'pCpP[g6ogn16#*W>7.*B8jJ3+Q@Z5kf,3R1e(75WTMoY$[&S6P>8PU:1DooH&Mu\\d#d2%bg-U,.C<RlU!6'0T\r\dbpcl
%MLIr,A'!1]p]2C/4WQE0H$"$l,o,fnZrPORcV[Y@:$$CEd#b#Mb5Y&Q"OY[9,K0?5FSRl.!B4B,T?,%$JF4#XZuT]QX%)mmc,7WC
%]\?D;eMGe6*W2ng%`\jX#gMBnh\s\Ub^IQZQt,2A9KAg7Z]'n@.!+0jcZ5!"LH-<S1NM'fJ(WukqpW?/fX5GOr/N[!PtCS%Y^2&q
%49$15<9cu@?b&rd@o5D+q47Bk1BdBFYeTe%EO9ugL#kK#@BhImJ).QJHhdKYbJ.LNqXXX'_o$u<qtC!M?ckUj4?\)jmb<N3QQQ/!
%j80?OCd1IW0CcNThgKnLk4.i.n)(kV%R9s3X3Y0I43H[2Q^7=ZNimg-lEg$O`Qp1:rEmluD>Uutrg6c`:\UmWe%Md]FKZU3e>m>g
%ff/pVV]m>%cSudQ\%3ZfXkn(Rl2Z#"KLT&D]s7f.]S@B"UPFDo&Y=6n:=SJl9H,!8CrW<?r-XM-A>0;*0Ptq$0]m)N"`(c+)5Es^
%%>+f0\e!7Z7h5^q[73a"&(="!K@ZhTDOHp4rH2b<H'gOkbejp&Q$o#UX6db%=_/];bUWKDIo_tmH*bXUlsNlILH2]`50TX!p0l7J
%Z4HP>eTGLl4[[MpBDWP+5K:a252?f2J%A]5TC,_H1S)E*or_*S&[n=Y-#A($:Y8p$PCM;*8fRe7;>Ep2p6FmF8nt5g7Sjp2WEk&s
%#kn[BhR27/LHe735Xp6NDJ/o-Y;V1A8/Vq'5Pb&ss0Qu8,38e'DfbaJ'r'fqB,X2<p8\+iS/\tQP;gYIIJYhVCu-<gZpa.'\D]*h
%*><_;pqP]$rOgqYh=[qt2RdeI1CoE\l\ZE+@R#6F"LEaXiQA%9"96dCSS#M"S?M7VlPmaL%4/A'KQ`[M?[YBR`ok,:o(@d!^O5p6
%O)NpjHh62$baZq.:K-AELGt9\04'.A>eY[`bPMel042Emlaq)M^\mreNurk+8TE;GX7m]#^4.VUe@ing^O-!I@Q(YrbeAB"h4N9m
%IZ_78Bmtg4qZ2oQMm'j@rJ*W8p$%t?+5c!LMWHM\+.VG(IfB0oqSDL$LYr-sh7(.Jo>AJ$TDtF1nG.RHq<m3c+5XYYI/*3rZgYVX
%o7%:;2t,V^;%J/M?X:DCnF/TCPD@?UIsV,RquhMVrP@Zhs6;Q;Y<Mi5m;[&h~>
%AI9_PrivateDataEnd
