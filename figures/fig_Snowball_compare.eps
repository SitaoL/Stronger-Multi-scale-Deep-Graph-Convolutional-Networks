%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig_Snowball_compare.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Harry Zhao
%%CreationDate: 5/15/2019
%%BoundingBox: 0 0 355 279
%%HiResBoundingBox: 0 0 354.6221 278.8912
%%CropBox: 0 0 354.6221 278.8912
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.2 x274 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 11495 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFA8FFA8A8A8FD7AFF7DA87D7D7DA8FFFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD04FF7DA87DA87DFFA8FD17FF
%A8FD45FFA8FD17FFA8FD06FFA8FDF8FFA8FD89FFA8FD1DFFA8FD62FFA8FD
%1AFFA87D7DA8FD55FFA8FD0AFFA8FD1AFFA87DA77DA7FD61FF7E5430542A
%5430542A542A542A5554554E554E542A554E552B552A542A542AFD047FA9
%7FFD04A9FFA9FFA9FD47FFA8FD0BFFCB6A9CA9A97F858460355F3B3A113A
%3A5F598460605983A5A8542F292A2AFD072BF9FD042B55557F7F557FFD05
%A97FA9FFFFA9A9FFFFA9A9A9FFA9FFA9FD31FFA8FD0BFFC2BCFD09FFAE88
%3F3FFA3F3F64888989FEAB895D825158777EA8AE84A9A9A9557F552B2B2B
%F92BF9FD042B552B2B2B7F5555557F7F7F557F7F7F557F7FA97FA97FA97F
%FFA9FD05FFA9FD2EFFC3BCFD0CFFAE893F643F3F3F65ABCC89AE5E5E3382
%5E8989AEFD06FFA9FFA9A97FFF7F7F55552B555555F9FD082B552B7F557F
%7F7F55FD047FA97FA9FFFF7F7F7FA9A9FFA9A9A9FFA97FA9FD05FFA9FD11
%FFA8FD0BFFCAB5FD0DFFAEAE89896464FA63AA3F3F895E33335E5E8964FD
%0489AECFFD09FFA37FA9FFA97F557F7F7F2B5555552B55F9FD062B55F92B
%5555557F7F7F557F5555FD0B7FA97F7F7FFFA97F7FA9A9FFFFA97FA9FFFF
%FFA9A9FFFFFFA8A8A87DA87DFFA8FFFFB5CAFD0FFFFD048988CC8864FA3F
%393333FD0A89AEAECFFD06FFAFFFFFFFA9A9FFFFFD04A97FA9FD047F557F
%7F7F2B55FD0A2BF9FD04557F7F7F557F2B7F7F7F2BFD087FA97F7F7FA9FF
%A9557FA9FFFF7DA8A87D7DA8A9FFA8FFB5CAFD10FFAEAE8989AAAC89645E
%3F1639396464FD05896489898964AEFFFFAEFF89AEFD0CFFA9FF7F7F7FA9
%7FA9FD067F555555FD057FF9FD052BF92B2B2BF97F2BF92B7F552B55FD05
%7F55FD057F54FD04FFA8A87DA87DFD04FFBCC3FD13FFAECDAB8989AE5E3F
%FAFD043F89648989AEFD0589AE89AE898989FD15FF7FFFFFFD05A97FA97F
%FFA97F7FA97F7F55FD047F552B557F552B2B552B2B55F9552B2B2B557F55
%2B55A9FD0AFFA8FFBCC3FD14FFCDCDAEAE898933333989893FFA3FFA6489
%3F64FD0D89AEFD19FFA9FFFFFF7FA9FD077FFF7F7F7FA9FD047F55552B7F
%2B557F7F2B2B2B552AA9FD0CFFC3BCFD14FFCFCCFFFFFF835E335E5EAEFD
%04893F3FFA3FFD0E89AEAE89AEFFFFAEAEFD19FFA97FA9A9FFFFA955A9FF
%7F7FA97F7F7FA9FD067F557F7F7FA8FD0CFFC3BCFD14FFCFCCCFFFFFFF58
%33335E64FD058964893F3FFA3F643F648964FD0789648964AE898964AEFF
%FF89AEFD04FFAE89AEFD14FFA9A9FFA9A9A9FFA97F55FF7FA9A9A9FD057F
%FD0DFFCAB5FD15FFCCCFFFFFFFA833585EAEFD0589AE89AE6464FD043FFA
%3F64AE89AE898989AEFD0789AE898989AEAEFF898989AEFFFFAEFD19FFA9
%FD07FFA9FFFFFFA8FD0CFFCAB5FD15FFCCCEFFFFFFA87D527DFFAE89AEFD
%0889FA898989643F643F64FD0B896489898964FD0989AEAEAEFFAEAEFD29
%FFA8FFFFFFB5FD15FFCDCEFD04FF7D7D7DFD05FF8989AEAEFD0789AE64FA
%3F3FFA64643F3FFD1A89AEFFFD04AEFD24FFA8FFFFB5CAFD14FFCECCFFFF
%FFA87D527DA8FD05FFAEFFAE8964FD0789648989893F3F643F3F89898964
%FD13896489898964896489AEFF89AEAEFFAEAEFD10FFA8FD0AFFA8FFFFFF
%B5CAFD14FFCECCFD04FF7D7D52A8FD08FFAEAEAE89AEAE898989AE898989
%AE89AE89FD053F64FD0689AE89AE89AEFD1389AE898989AEFD05FFAEAEFF
%FFFFAEFD10FFA8FFFFBCBCFD14FFCFFEFD04FFA8527D7DFD09FFAEFFAEFF
%FFFFFD0B89646489643FFA3FFA3F8989643F3F6464FD1789648989AEAEFD
%0489FFAE89AEFFAEAEA8FD0EFFBCC3FD14FFCFCCCFFFFFFFA87D52A8FD10
%FFFD0B89AEFD04896489FA3F3F3F64643F3FFA643F8989AEFD1B89AE8989
%89AE89AECBFFFFA8A87DA87DA8FD05FFC3B5FD15FFCCCEFD04FF525252FD
%10FFAE89FFAEAE8989AEAE64FD09893F3FFD0589643F64FA3F3F643F3F64
%893F3F64FD138964898989648989AEFFFFA87DA87DA87DFFA8FFFFFFC3BC
%FD15FFCDCDFD04FF7D527DA8FD18FFFD0A89AEFD0789AE89896464FD083F
%FA64FD0589AEFD1289A8FFFFA8A87D7D7DA8FFFFA8FFFFCAB5FD15FFCDCD
%FD04FF7D5252A8FD18FFFD068964FD1389646489898964FA3FFA64898964
%64FD108983AEFD05FFA8FFFFFFA8FFFFFFCAB5CAFD14FFCECCFD04FFA852
%7D7DFD19FFAEFFFFAE89AEFD1A896464FA3F3F3FFA3F3F8964643F3F64AE
%89643FAEFD0489AEFD0AFFA8FFFFFFFCCAFD14FFCFCCCFFFFFFFA87D527D
%A8FD1FFFFD0589FFFD048964FD11893F8989893F3FFA3F3F643F3F3F64FA
%FA3F8964645EFD0AFFA8FD04FFBCC3FD15FFCCCFFD04FF7D7D7DFD21FFAE
%8989FFFFFF89AEFFAEFD1189AE898989AE898989AE89AE89643F6489FD05
%3FAEFD0AFFA8FFFFFFB5BCFD15FFCCCEFFFFFFA87D527DA8FD21FFAEAEFD
%04FFAEFFFFFFAEAEAEFD0589AEAE898964FD17895EAFFD0EFFC3B5FD15FF
%CDCEFD04FF7D7D52A8FD30FFAEAEAEFD04FFAEFD1889A8FD0EFFC3B5CAFD
%14FFCECCFD04FFA852527DFD38FFAEFD0489648989896489898964FD0A89
%AEFD0FFFFCCAFD14FFCECCFD04FFA87D527DA8FD39FFAE8989AEFD0589FF
%AEFD0B89A8FD0FFFB5C3FD15FFFECFFD04FF7D5252A8FD3AFFAEFFFFFFAE
%FFAEFFFFFFAE8989AEAEAEFD0589FD0AFFA8FD05FFB5BCFD15FFCCCEFD04
%FFA8527DA8FD4AFFAEAEFF89FD0CFFA8FD04FFC3B5FD15FFCCCEFD04FF7D
%7D52A8FD4EFFA8FD0AFFA8FD05FFC3B5CAFD14FFCECCFD04FFA8527D7DFD
%54FF7DA87DA8FFFFA8FD05FFFCCAFD14FFCECCCFFFFFFFA87D527DA8FD4D
%FFA8FD05FF7D7DA87EFFA8FD06FFB5BCFD15FFFECFFD04FF7D5252A8FD4E
%FFA8FD04FF7DA87DA8FD08FFB5B5CAFD14FFCCCDFD04FFA852527DFD1BFF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD13FFC3B5C3FD14FFCDCD
%FD04FFA87D52A8FD29FFA8A8FD23FFA8FD10FFC3B5BCCAFD13FFCFFEFD05
%FF7D5252FD1BFFA8FD0CFFA827A8FFFF52FD08FFA8FFCAA8A8FD10FFA8FD
%0CFFA8FD07FFFCBCC3FD14FFCCCEFD04FFA8527DA8FD28FF7DFFA87652FF
%A87DA87D7D7DFF4BA87DA8527D7DFF7DFD1AFFA8FD06FFBCFCC3C3FD0BFF
%CAFD07FFCCCCFD04FF7D7D527DA8FD19FFA8FF7DA87DA87DA87DA87DA8A8
%FF52A852FF527DFD0452A852A87DA852A87DA87D7D7DFD0CFFA8FFA8FD0A
%FFA8FD07FFC3B5BCC3C3FFC3FFCACAFFFFCAFFCAC3CAFFCAFD04FFCFFECF
%FD04FF7D767DFD27FFA852A87DA87D7D7DA8FF52FF52A852FF52CA52FFA8
%7DFD1BFFA8FD06FFCABCB5FD05C3CABCCACAC3BCFD05C3FFFFC3CAFFCCC7
%CEFFFFA87D527D7DFD19FFA8FD0CFFA87DFFA8A87DA87DA8A87DFD04A87D
%7DA8A8A8FF7DFD0DFFA8FD14FFCAC3B5B5FD0BC3CAC3C3C3CAC3C3C3CAC7
%CCC2FFFFFF7D7D52A8FD3AFFA8A8FD10FFA8FD12FFC3C3FCB5BCB5BCFD07
%C3BCC3C3BCBCC3BCC3C3C9FEC7C9FFFFA852527DFD19FFA8FD1FFFA8A8FD
%0EFFA8FD15FFCAC3CAB5FCFCB5BCBCBCC3FCFD05B5FCBCC3B5FCBDBCC8FE
%CEFFFFA87D527DA8FD4BFFA8FD13FFC3C3C3B5C3FD04B5FCBCBCBCC3BCB5
%BCFCB5B5BCFCB5B4C6C6C8CFFF7D52527DFD18FFA8FD0DFF7D7DA8FD0FFF
%A8FFFFFF7DFD0BFFA8FD07FFFD04A8FFA8FD0AFFCAC3CAC3C3C3CAC3C3C3
%CAFD06C3BCFD04C3C9C1FEC7CEFFA8527D7DFD25FF527DA8FFA8FD0BFFA8
%FFFFA8FFFF7D52FD13FF537D7DA8FFFFA8FD0AFFCABCFD07C3BCC3BCFD0A
%C3C8C0FEC7FFA87D527D7DFD17FFA8AE3F643F643F643F643F6489A8527D
%7D7DA87D7D7D527D527D52A87D7D52A852FF7D7D52FD0BFFA8FFA8FD05FF
%7D7DA87DFFA8FD0CFFCAFFFFFD04C3CAFFC3CAC3CAFFCAC3CAFFFFCAC3C3
%C8C1FECEFF7D7D527DFD18FFAEFFAEFFAEFFAEFFAEFFAEFFFFFFA85252FF
%527D7DA87DFF7DA87D7DFFA8FD047DFF7DFD13FFA8FFA8FD12FFCACAFFCA
%FD08FFCACAFFFFFFCAFFC9C2C0CDFFA852527DA8FD16FFA8FD0CFFA87D7D
%7D52A87D52A87D527D52FD057DA852A852A852A8FD0AFFA8FD30FFCAC1C6
%FFA87D527D7DFD24FFA8A8FFA8A87DFF527DA8FFA8FFA8FFA8FD05FFA8FD
%0FFFA8FD2EFFC3C6CDFF7D52527DA8FD15FFA8FD11FFA8527D7DA8FD19FF
%A8FD31FFCBC0CCFFA8527D7DA8FD28FFA8A8FD1EFFA8FD2FFFC2C6CFA87D
%527D7DFD15FFA8FD0DFF7DA17DFD04FFA87DFFA8A8A1FFA1A8FD12FFA8FD
%0CFFA8FD25FFCAC6CCFF7D7D527DA8FD21FFA852A852A8FFFFFF527DFFFF
%527DFFA87DFD20FFA8FD25FFC1FECFA87D52527DA8FD13FFA8CABCC3BCC3
%BCC3BCC3BCC3C3FF52A87DFF7D7D7DA87DFFFF7D7DFFA8A8FD12FFA8FFA8
%FD0AFFA8FD26FFCAC6CEA97D527D7DA8FD14FFCAFD0AC3CAFF7D52A8A852
%7DA87DA8FFFF7DA8FFFFA8FD20FFA8FD25FFCAC0FEFF7D7D527D7DFD13FF
%A8FD0CFFA827FF527D52A8A87D52A87DA852A87DFD13FFA8FFA9FD32FFC2
%FECEFF7D7D527DA8FD1FFFA8A8A8FFA8FF7DFFA8A87DFFFFA87DFD17FFA8
%FD31FFCAC0CCA97D5252527DFD12FFA8FD0BFFA8FD23FFA8FD08FFA8A87D
%FD2AFFC8C6CFA87D527D7DA8FD44FFA8FD04FF527DA8A8A8FFA8FD27FFCA
%C6C7FF7D7D527D7DFD11FFA8FD0DFFA8FD09FFA8FD06FFFD04A8FFFFFFA8
%A8A8FFA8A8A8FFA8FFA8FFA8FD05FFA87DA87DFFA8FD29FFC2FEC9A97D7D
%527DA8FD1DFFA852A8FD08FF52A8FD05FFFD047DFD04FF27A8FFA852FFA8
%7DA8FD0AFFA8FFFFFFA8FD28FFCAC0CCA87E5252527DA8FD0FFFA8FFCECF
%CFCFCECFCFCFCECFCFFF52FFFFFF7D7DA8A87DFF52A87DA87DA87DA87DA8
%7DFF7D7DA87DFFFFA87DFFFFA8FFA8FFA8FD0AFFA8FD2AFFC9C6CEA87D52
%7D7DA8FD10FFCFFD0ACDCEFF7DFFFF7D7D52A87D52A87D52FFFF7DA8A8A8
%7D52FF7D7D52A87DFFFFFF7DFFFFA8FD0FFFA8FD29FFCBC1C6CA7D7D527D
%7DFD0FFFA8FD0DFF27A87D5252A87D52527D52527DFF7D7DFF7D52A8527D
%52A8A852A8FD047DA87DFFA8FD38FFC3C6CCA87D7D527D7DFD1BFFCAA87D
%A8A8A87DFFA8A87DFD04A8FF7DFF7DA8FFFD04A8FF7DA87DFFA8A87DFD05
%FFA8FD36FFC1FEA67E7D52527DA8FD0DFFA8FD1BFF7DFD13FFA8FD39FFCB
%C0CCA77E7D527D7DFD28FFA8A8FD16FFA8FD37FFC3C0CC7D7D52527DA8FD
%0CFFA8FD0DFFA8FFA8FD1FFFA8FD0CFFA8FD2EFFC2C6CD7D7D527D7DA8FD
%18FF7D7D527DA8FD06FFA87DFD24FFA8FD2DFFCABBC6C97D7D277D7DFD0B
%FFA8FFA9FFA9FFA9FFA9FFA9FFA9FFA87DFFFF7DA8A8A87DA87D527DA8FD
%14FFA8FFA8FD0AFFA8FD2FFFC3C7FEC97D7D527D7DFD0BFFA95555552B55
%55552B552B7FFFFF52FFA87D52A852A852A852A852FD1CFFFD04A8FD32FF
%C2C6CCA77D7D527D7DFD09FFA8FFA9FFA9FFA9FFA9FFA9FFA9FFA852FF7D
%52527D52A87D7D7DA852FD14FFA8FD08FF7DA87DFFA8FD31FFBCC6CCA77D
%7D527D7DFD16FFA852FFA8A87DA87DA87D7D7DFF7DFD17FFA8FD04FFFD04
%7DFFFFA8FD31FFBBC6CCA75952527D7DFD07FFA8FD2FFFA8FFA8FD06FFA8
%FFA8FD35FFBBC6CCA87D52527D7DFD39FFA8FD3DFFCBBCC6FEA77D52527D
%7DFD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0CFFA8FD35FF
%C3C6FEA77D52527D7DFD42FFA8FD35FFC3C0C6C77652527D7DFD35FFA8FD
%0AFFA8FD37FFC4C1C6CCA07D527D7DFD40FFA8FD37FFCAC3C0FEA57D2853
%7DA8A8FD31FFA8FD45FFCABBC6FEA6525352A8A8FD31FFA8FD45FFCBC3C1
%C6FEA57C4C537DA9FD77FFCBCAC1C6C6CC7B7C52A8AFFD2DFFA8FD4AFFCA
%C3C0C6C6A4747C7CA8A9FD34FFA8FD43FFCACFC7CCC6C6A4A5A6CFCFCFCA
%CFCACFCACFCACFCAFFCFCFCAFFCFCFCAFFCFCFCAFFCFCFCAFFCFCFCAFFCF
%CFCAFFCFCFCACFCAFD06FF7DA8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9FFA8CFA7C99F
%C7A4C7A4C6A4C7A4C6A4C7A4C6A4C7A4C6A4A5A4C6A4C7A4C6A4C7A4C6A4
%C7A4C6A4C7A4C6A4C7A4C69EA8FD05FFA8A8A8FFA8FD17FFA8FD33FFCBFF
%FFFFCFFFCFFFCFFFCFFFCAFFCFCFCAFFCACFCAFFCFCFCAFFCFCFCAFFCFCF
%CAFFCFCFCAFFCFCFA8CFFD07FF7DA8FD81FFA8FD15FFA8FFA8FD17FFA8FD
%15FFA8FFA8FD2DFFA8FFA8FD06FFA87DA8FD14FFA87D7D7DFD13FFA87D7D
%7DA8FD13FF7DA87DA8FD13FFA8527E7DA8FD12FF7DA8FD047DFD06FFA87D
%A8FD14FFA8A87DA8FD13FFA852A87DA8FD13FF7D7DA8A8FD13FFA87D7DA8
%A8FD13FF7DA87DA87DFD06FFA8A8A8FD14FFFD04A8FD14FFFD04A8FD13FF
%A8A87EA8FD14FFA8A87DFD13FFA8FFFD04A8FDFCFFFFFFFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-05-15T00:59:59-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7rqOm+e1m46fMZ7YarFc&#xA;u09z6Uz2ym3JjXhG6iHabmnwnw5VIZVEeWbfzDYafqUt7HcJcLEhiF7cfWg9xHG3qyx0lk4RO9KJ&#xA;VafyjFWSKmocRymiLdyImA+71DirfC+/37F/yLb/AKqYq7hff79i/wCRbf8AVTFXcL7/AH7F/wAi&#xA;2/6qYq7hff79i/5Ft/1UxVbIuohRwkiJqtQY26Eip/vOwxVdwvv9+xf8i2/6qYq7hff79i/5Ft/1&#xA;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&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 7.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>arial.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>BookAntiqua</stFnt:fontName>
                  <stFnt:fontFamily>Book Antiqua</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.35</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>BKANT.TTF</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -278.891 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 278.891 li
354.622 278.891 li
354.622 0 li
cp
clp
20.875 261.519 mo
346.375 261.519 li
346.375 4.64404 li
20.875 4.64404 li
20.875 261.519 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
98.9951 26.4028 mo
95.7402 26.1709 li
92.4849 26.0713 li
90.8398 26.2212 li
92.4849 25.771 li
95.7402 23.2529 li
98.9951 20.1421 li
102.25 18.8823 li
105.505 18.4751 li
108.76 25.3062 li
108.926 25.9683 li
108.76 25.9849 li
105.505 25.4731 li
102.25 26.1382 li
98.9951 26.4028 li
93.186 28.9502 mo
92.4849 28.1001 li
90.8491 27.377 li
92.4849 27.6182 li
94.4199 27.8862 li
95.374 28.1011 li
93.186 28.9502 li
98.9951 33.291 mo
95.9038 28.229 li
98.7871 28.96 li
101.878 31.0513 li
102.024 31.2939 li
98.9951 33.291 li
105.505 33.6753 mo
103.85 32.3882 li
102.679 30.4409 li
102.53 30.2842 li
99.4878 28.2271 li
102.25 29.3818 li
105.505 30.041 li
108.76 30.2651 li
110.02 30.3223 li
110.751 33.23 li
108.76 33.5981 li
105.505 33.6753 li
214.01 253.183 mo
212.92 252.958 li
209.665 252.465 li
206.41 251.03 li
203.155 248.838 li
199.9 247.809 li
196.645 246.968 li
193.39 245.215 li
190.822 243.516 li
190.135 242.966 li
186.88 240.798 li
183.625 238.19 li
180.37 236.64 li
179.795 236.302 li
177.589 234.666 li
177.115 234.162 li
173.86 230.227 li
170.605 227.194 li
167.35 224.411 li
164.095 221.27 li
160.84 216.685 li
157.585 212.683 li
154.33 207.417 li
151.075 202.838 li
147.82 195.51 li
144.565 189.789 li
141.31 182.78 li
138.055 175.272 li
134.8 167.018 li
131.545 157.612 li
128.29 147.536 li
125.035 137.443 li
121.78 124.715 li
118.525 112.815 li
115.27 99.1938 li
112.015 83.3262 li
108.76 67.001 li
105.505 53.0811 li
104.839 50.8579 li
105.505 51.5752 li
108.76 56.8433 li
110.416 56.498 li
111.526 61.5352 li
114.78 77.5859 li
114.782 77.5952 li
118.037 92.1821 li
118.039 92.1919 li
121.294 105.493 li
124.549 118.979 li
124.553 118.993 li
127.808 130.92 li
127.809 130.925 li
131.064 142.301 li
131.07 142.321 li
134.325 152.138 li
134.329 152.149 li
137.584 161.231 li
137.594 161.257 li
140.849 168.963 li
140.854 168.974 li
144.109 176.221 li
144.115 176.235 li
147.368 182.927 li
150.623 189.808 li
150.635 189.832 li
153.89 195.886 li
153.9 195.903 li
157.155 201.408 li
157.163 201.421 li
160.418 206.558 li
160.422 206.565 li
163.677 211.52 li
163.699 211.55 li
166.954 215.77 li
166.972 215.792 li
170.227 219.554 li
170.231 219.558 li
173.477 223.218 li
176.722 227.334 li
176.745 227.361 li
180 230.939 li
180.009 230.948 li
183.264 234.343 li
183.315 234.389 li
186.563 236.952 li
189.813 239.699 li
189.847 239.726 li
193.091 242.012 li
196.335 244.572 li
196.399 244.616 li
199.655 246.45 li
199.664 246.457 li
202.919 248.199 li
206.174 249.942 li
206.238 249.97 li
209.482 251.159 li
212.709 252.523 li
214.01 253.183 li
237.577 258.003 mo
235.733 257.951 li
232.938 257.873 li
232.54 257.816 li
229.324 257.091 li
226.088 256.087 li
226.063 256.08 li
222.808 255.255 li
222.782 255.25 li
219.577 254.616 li
216.385 253.267 li
213.146 251.625 li
213.115 251.609 li
209.86 250.233 li
209.837 250.224 li
206.615 249.043 li
203.391 247.317 li
200.141 245.577 li
196.924 243.763 li
193.7 241.219 li
193.678 241.202 li
190.441 238.922 li
187.203 236.184 li
187.19 236.173 li
183.962 233.626 li
180.734 230.26 li
177.497 226.701 li
174.253 222.586 li
174.234 222.564 li
170.979 218.895 li
170.979 218.895 li
167.737 215.149 li
164.503 210.955 li
161.26 206.019 li
158.011 200.892 li
154.766 195.403 li
151.521 189.368 li
148.272 182.5 li
148.27 182.495 li
145.018 175.804 li
141.769 168.569 li
138.521 160.88 li
135.273 151.817 li
132.023 142.016 li
128.771 130.653 li
125.519 118.737 li
122.266 105.257 li
119.011 91.958 li
115.759 77.3843 li
112.505 61.332 li
112.503 61.3242 li
111.395 56.293 li
112.015 56.1631 li
115.27 56.6602 li
115.7 56.4609 li
118.525 69.9673 li
121.78 84.748 li
125.035 98.9731 li
128.29 112.882 li
131.545 125.636 li
134.8 135.822 li
138.055 145.759 li
141.31 153.597 li
144.565 161.018 li
147.82 168.769 li
151.075 174.979 li
154.33 182.705 li
157.585 188.379 li
160.84 194.793 li
164.095 200.082 li
167.35 205.533 li
170.605 210.411 li
173.86 214.779 li
177.115 219.039 li
180.37 222.666 li
183.625 225.488 li
186.88 228.172 li
190.135 231.131 li
193.39 234.565 li
196.645 238.119 li
199.9 240.548 li
203.155 242.319 li
206.41 244.835 li
209.665 246.312 li
212.92 248.116 li
216.175 250.545 li
219.43 252.349 li
222.685 253.102 li
225.94 254.25 li
229.195 255.826 li
232.45 256.929 li
235.705 257.685 li
237.577 258.003 li
.426154 .347417 .353185 .00985733 cmyk
f
24.1299 26.1621 mo
27.3848 26.1621 li
30.6401 26.1621 li
33.895 26.1621 li
37.1499 26.1621 li
40.4048 26.1621 li
43.6602 26.1621 li
46.915 26.1621 li
50.1699 26.1621 li
53.4248 26.1621 li
56.6802 26.1621 li
59.9351 26.1621 li
63.1899 26.1621 li
66.4448 26.1621 li
69.7002 26.1621 li
72.9551 26.1621 li
76.21 26.1621 li
79.4648 26.1621 li
82.7202 26.1621 li
85.9751 26.1621 li
89.23 26.1621 li
89.272 26.1641 li
92.5269 26.439 li
92.5952 26.4492 li
95.8501 27.1831 li
95.8628 27.186 li
99.1182 28.0122 li
99.2749 28.083 li
102.53 30.2842 li
102.679 30.4409 li
105.934 35.853 li
105.983 35.9639 li
109.238 46.5142 li
109.248 46.5542 li
112.503 61.3242 li
112.505 61.332 li
115.759 77.3843 li
119.011 91.958 li
122.266 105.257 li
125.519 118.737 li
128.771 130.653 li
132.023 142.016 li
135.273 151.817 li
138.521 160.88 li
141.769 168.569 li
145.018 175.804 li
148.27 182.495 li
148.272 182.5 li
151.521 189.368 li
154.766 195.403 li
158.011 200.892 li
161.26 206.019 li
164.503 210.955 li
167.737 215.149 li
170.983 218.899 li
170.605 219.226 li
170.979 218.895 li
174.234 222.564 li
174.253 222.586 li
177.497 226.701 li
180.734 230.26 li
183.962 233.626 li
187.19 236.173 li
187.203 236.184 li
190.441 238.922 li
193.678 241.202 li
193.7 241.219 li
196.924 243.763 li
200.141 245.577 li
203.391 247.317 li
206.615 249.043 li
209.837 250.224 li
209.86 250.233 li
213.115 251.609 li
213.146 251.625 li
216.385 253.267 li
219.577 254.616 li
222.782 255.25 li
222.808 255.255 li
226.063 256.08 li
226.088 256.087 li
229.324 257.091 li
232.54 257.816 li
235.761 258.27 li
238.995 258.543 li
242.243 258.726 li
245.484 258.909 li
248.725 258.909 li
251.98 258.909 li
255.235 258.909 li
258.49 258.909 li
258.504 258.909 li
261.752 259.001 li
265 259.001 li
268.255 259.001 li
271.51 259.001 li
274.765 259.001 li
278.02 259.001 li
281.275 259.001 li
284.53 259.001 li
287.785 259.001 li
291.04 259.001 li
294.295 259.001 li
297.55 259.001 li
300.805 259.001 li
304.06 259.001 li
307.315 259.001 li
310.57 259.001 li
313.825 259.001 li
317.08 259.001 li
320.335 259.001 li
323.59 259.001 li
326.845 259.001 li
330.1 259.001 li
333.355 259.001 li
336.61 259.001 li
339.865 259.001 li
343.12 259.001 li
346.375 259.001 li
346.375 260.001 li
343.12 260.001 li
339.865 260.001 li
336.61 260.001 li
333.355 260.001 li
330.1 260.001 li
326.845 260.001 li
323.59 260.001 li
320.335 260.001 li
317.08 260.001 li
313.825 260.001 li
310.57 260.001 li
307.315 260.001 li
304.06 260.001 li
300.805 260.001 li
297.55 260.001 li
294.295 260.001 li
291.04 260.001 li
287.785 260.001 li
284.53 260.001 li
281.275 260.001 li
278.02 260.001 li
274.765 260.001 li
271.51 260.001 li
268.255 260.001 li
265 260.001 li
261.745 260.001 li
261.731 260.001 li
258.483 259.909 li
255.235 259.909 li
251.98 259.909 li
248.725 259.909 li
245.47 259.909 li
245.442 259.908 li
242.188 259.725 li
238.932 259.541 li
238.918 259.541 li
235.663 259.265 li
235.635 259.262 li
232.38 258.803 li
232.34 258.796 li
229.085 258.062 li
229.047 258.052 li
225.805 257.046 li
222.575 256.227 li
219.333 255.588 li
219.235 255.558 li
215.98 254.182 li
215.949 254.167 li
212.709 252.523 li
209.482 251.159 li
206.238 249.97 li
206.174 249.942 li
202.919 248.199 li
199.664 246.457 li
199.655 246.45 li
196.399 244.616 li
196.335 244.572 li
193.091 242.012 li
189.847 239.726 li
189.813 239.699 li
186.563 236.952 li
183.315 234.389 li
183.264 234.343 li
180.009 230.948 li
180 230.939 li
176.745 227.361 li
176.722 227.334 li
173.477 223.218 li
170.231 219.558 li
170.227 219.554 li
166.972 215.792 li
166.954 215.77 li
163.699 211.55 li
163.677 211.52 li
160.422 206.565 li
160.418 206.558 li
157.163 201.421 li
157.155 201.408 li
153.9 195.903 li
153.89 195.886 li
150.635 189.832 li
150.623 189.808 li
147.368 182.927 li
147.82 182.713 li
147.37 182.932 li
144.115 176.235 li
144.109 176.221 li
140.854 168.974 li
140.849 168.963 li
137.594 161.257 li
137.584 161.231 li
134.329 152.149 li
134.325 152.138 li
131.07 142.321 li
131.064 142.301 li
127.809 130.925 li
127.808 130.92 li
124.553 118.993 li
124.549 118.979 li
121.294 105.493 li
118.039 92.1919 li
118.037 92.1821 li
114.782 77.5952 li
114.78 77.5859 li
111.526 61.5352 li
108.276 46.79 li
105.045 36.3169 li
101.878 31.0513 li
98.7871 28.96 li
95.624 28.1572 li
92.4092 27.4321 li
89.209 27.1621 li
85.9751 27.1621 li
82.7202 27.1621 li
79.4648 27.1621 li
76.21 27.1621 li
72.9551 27.1621 li
69.7002 27.1621 li
66.4448 27.1621 li
63.1899 27.1621 li
59.9351 27.1621 li
56.6802 27.1621 li
53.4248 27.1621 li
50.1699 27.1621 li
46.915 27.1621 li
43.6602 27.1621 li
40.4048 27.1621 li
37.1499 27.1621 li
33.895 27.1621 li
30.6401 27.1621 li
27.3848 27.1621 li
24.1299 27.1621 li
24.1299 26.1621 li
.67953 .634058 .618097 .562646 cmyk
f
346.375 87.7871 mo
343.487 86.6479 li
343.392 86.6099 343.279 86.585 343.176 86.5801 cv
339.921 86.396 li
339.671 86.4131 li
336.568 87.0259 li
333.869 86.7212 li
330.871 83.0879 li
330.681 82.8579 330.398 82.7251 330.1 82.7251 cv
330.098 82.7251 330.096 82.7251 330.094 82.7251 cv
329.794 82.7271 329.51 82.8633 329.322 83.0972 cv
326.469 86.6343 li
323.932 85.9912 li
320.767 84.4741 li
317.512 82.915 li
317.376 82.8501 317.23 82.8169 317.08 82.8169 cv
317.062 82.8169 317.043 82.8169 317.024 82.8179 cv
313.769 83.002 li
313.554 83.0381 li
310.299 83.9551 li
307.381 84.7769 li
304.449 83.5381 li
304.333 83.4893 304.214 83.4629 304.088 83.459 cv
301.164 83.377 li
298.169 81.0132 li
297.991 80.873 297.772 80.7979 297.549 80.7979 cv
297.468 80.7979 297.385 80.8081 297.304 80.8291 cv
294.049 81.6548 li
294.024 81.6611 li
290.861 82.5532 li
288.193 82.7778 li
285.27 79.5659 li
285.078 79.355 284.81 79.2393 284.531 79.2393 cv
284.475 79.2393 284.419 79.2432 284.363 79.2529 cv
281.37 79.7593 li
278.53 78.7183 li
275.411 76.0811 li
275.228 75.9263 275 75.8442 274.766 75.8442 cv
274.692 75.8442 274.618 75.8521 274.545 75.8691 cv
271.734 76.5029 li
268.846 74.3862 li
268.67 74.2573 268.462 74.1929 268.255 74.1929 cv
268.02 74.1929 267.785 74.2759 267.597 74.4399 cv
264.566 77.0879 li
262.086 77.438 li
259.182 74.6543 li
258.991 74.4712 258.742 74.376 258.49 74.376 cv
258.337 74.376 258.181 74.4111 258.038 74.4849 cv
255.131 75.959 li
252.264 75.1509 li
249.021 74.146 li
248.924 74.1162 248.826 74.1011 248.725 74.1011 cv
248.716 74.1011 248.706 74.1011 248.697 74.1021 cv
245.814 74.1831 li
242.848 71.7583 li
242.667 71.6099 242.442 71.5322 242.215 71.5322 cv
242.107 71.5322 241.999 71.5503 241.895 71.585 cv
239.063 72.543 li
236.196 70.9272 li
236.08 70.8618 235.949 70.8198 235.817 70.8052 cv
232.576 70.439 li
229.464 70.001 li
226.329 68.6763 li
226.205 68.623 226.072 68.5972 225.941 68.5972 cv
225.743 68.5972 225.547 68.6548 225.38 68.7681 cv
222.125 70.9702 li
222.109 70.981 li
219.333 72.937 li
216.771 71.709 li
213.642 68.4463 li
213.451 68.2461 213.189 68.1382 212.921 68.1382 cv
212.839 68.1382 212.756 68.1479 212.674 68.1689 cv
209.637 68.939 li
206.617 68.3433 li
203.559 67.6528 li
200.46 65.5571 li
200.295 65.4463 200.098 65.3862 199.899 65.3862 cv
199.881 65.3862 199.862 65.3862 199.844 65.3872 cv
196.589 65.5708 li
196.478 65.5771 196.358 65.605 196.256 65.6479 cv
193.416 66.8491 li
190.826 65.6079 li
187.725 60.7129 li
187.54 60.4219 187.22 60.248 186.88 60.248 cv
186.843 60.248 186.805 60.25 186.768 60.2549 cv
183.513 60.6221 li
183.329 60.6421 183.151 60.7163 183.006 60.8301 cv
180.463 62.8359 li
177.837 60.0972 li
177.647 59.8989 177.385 59.79 177.115 59.79 cv
177.059 59.79 177.004 59.7939 176.948 59.8032 cv
174.151 60.2769 li
171.251 57.8242 li
171.063 57.666 170.834 57.5879 170.605 57.5879 cv
170.342 57.5879 170.079 57.6919 169.883 57.896 cv
167.489 60.3921 li
164.926 56.564 li
164.852 56.4531 164.751 56.353 164.639 56.2813 cv
161.384 54.1709 li
161.22 54.064 161.03 54.0103 160.84 54.0103 cv
160.724 54.0103 160.607 54.0298 160.496 54.0708 cv
157.787 55.064 li
154.976 52.687 li
154.795 52.5332 154.564 52.4502 154.329 52.4502 cv
154.285 52.4502 154.24 52.4531 154.195 52.459 cv
153.916 52.4971 153.663 52.6538 153.504 52.8872 cv
151.128 56.3691 li
148.677 52.293 li
148.491 51.9839 148.162 51.8081 147.82 51.8081 cv
147.689 51.8081 147.557 51.833 147.431 51.8872 cv
144.552 53.104 li
141.967 52.084 li
138.886 47.481 li
138.721 47.2349 138.451 47.0732 138.156 47.043 cv
138.123 47.0391 138.09 47.0381 138.056 47.0381 cv
137.795 47.0381 137.54 47.1411 137.353 47.3262 cv
134.61 50.0313 li
132.017 48.7163 li
128.781 46.8911 li
128.722 46.8599 li
125.467 45.3013 li
125.331 45.2358 125.183 45.2031 125.036 45.2031 cv
124.832 45.2031 124.63 45.2651 124.459 45.3853 cv
121.962 47.145 li
119.296 43.915 li
119.144 43.73 118.928 43.605 118.692 43.5649 cv
115.437 43.0151 li
115.38 43.0049 115.324 43.001 115.269 43.001 cv
115.196 43.001 115.124 43.0093 115.05 43.0249 cv
113.066 43.4731 li
112.015 38.2612 li
110.751 33.23 li
112.015 32.9961 li
115.27 30.9619 li
118.525 33.6831 li
121.78 36.2002 li
125.035 35.123 li
128.29 35.9048 li
131.545 37.1548 li
134.8 38.3662 li
138.055 37.8359 li
141.31 40.6973 li
144.565 39.335 li
147.82 41.52 li
151.075 45.4092 li
154.33 43.6182 li
157.585 43.75 li
160.84 42.4561 li
164.095 40.5732 li
167.35 45.4761 li
170.605 46.312 li
173.86 46.582 li
177.115 46.9272 li
180.37 50.7891 li
183.625 49.4399 li
186.88 49.2212 li
190.135 50.001 li
193.39 53.3853 li
196.645 51.23 li
199.9 50.1519 li
203.155 51.96 li
206.41 56.7422 li
209.665 54.1592 li
212.92 51.4673 li
216.175 54.832 li
219.43 55.7739 li
222.685 56.7412 li
225.94 54.292 li
229.195 53.7432 li
232.45 51.0122 li
235.705 57.4619 li
238.96 58.0801 li
242.215 55.7881 li
245.47 59.3911 li
248.725 58.9458 li
251.98 60.6323 li
255.235 60.3491 li
258.49 58.1172 li
261.745 61.646 li
265 63.0449 li
268.255 60.0479 li
271.51 62.5093 li
274.765 60.71 li
278.02 65.3013 li
281.275 64.7891 li
284.53 63.436 li
287.785 65.4243 li
291.04 65.1421 li
294.295 64.9272 li
297.55 62.8101 li
300.805 66.9722 li
304.06 68.6133 li
307.315 69.4658 li
310.57 70.2393 li
313.825 69.1318 li
317.08 65.8472 li
320.335 66.561 li
323.59 70.2939 li
326.845 72.5903 li
330.1 65.4063 li
333.355 69.814 li
336.61 71.6118 li
339.865 70.6763 li
343.12 68.7749 li
346.375 74.8892 li
346.375 87.7871 li
343.12 105.411 mo
339.865 103.344 li
336.61 103.716 li
333.355 104.649 li
330.1 101.141 li
326.845 102.296 li
323.59 102.817 li
320.335 103.232 li
317.08 100.917 li
313.825 98.269 li
310.57 99.0093 li
307.315 101.472 li
304.06 99.623 li
300.805 100.944 li
297.55 99.8281 li
294.295 99.4829 li
291.04 101.032 li
287.785 101.299 li
284.53 96.2939 li
281.275 96.1079 li
278.02 93.3501 li
274.765 92.3013 li
271.51 92.0532 li
268.255 89.7441 li
265 92.439 li
261.745 94.6001 li
258.49 91.8672 li
255.235 92.9819 li
251.98 90.9663 li
248.725 90.583 li
245.47 90.3491 li
242.215 88.564 li
238.96 88.5669 li
235.705 85.6108 li
232.45 90.8052 li
229.195 87.4541 li
225.94 84.313 li
222.685 86.2798 li
219.43 91.5532 li
216.175 89.438 li
212.92 86.0288 li
209.665 85.1401 li
206.41 81.502 li
203.155 84.5249 li
199.9 81.9692 li
196.645 81.3262 li
193.39 81.9771 li
190.135 82.1079 li
186.88 72.9243 li
183.625 73.4302 li
180.37 77.1392 li
177.115 74.188 li
173.86 75.5723 li
170.605 70.5029 li
167.35 77.8311 li
164.095 73.021 li
160.84 67.1929 li
157.585 68.2881 li
154.33 63.0562 li
151.075 70.6401 li
147.82 63.7979 li
144.565 68.519 li
141.31 64.7549 li
138.055 58.001 li
134.8 63.748 li
131.545 61.6841 li
128.29 59.2993 li
125.035 57.0039 li
121.78 60.4473 li
118.525 55.1543 li
115.7 56.4609 li
115.27 54.4072 li
113.461 45.4341 li
115.298 45.02 li
117.991 45.4751 li
121.009 49.1333 li
121.205 49.3711 121.492 49.4961 121.781 49.4961 cv
121.981 49.4961 122.182 49.436 122.356 49.314 cv
125.132 47.3579 li
127.828 48.6499 li
131.054 50.4683 li
131.093 50.4893 li
134.348 52.1401 li
134.49 52.2129 134.645 52.248 134.799 52.248 cv
135.056 52.248 135.311 52.1489 135.502 51.96 cv
137.897 49.5981 li
140.479 53.4561 li
140.593 53.626 140.753 53.7549 140.943 53.8301 cv
144.198 55.1143 li
144.317 55.1611 144.441 55.1851 144.565 55.1851 cv
144.697 55.1851 144.829 55.1582 144.954 55.105 cv
147.41 54.0669 li
150.218 58.7358 li
150.394 59.0278 150.706 59.2109 151.046 59.2202 cv
151.056 59.2212 151.065 59.2212 151.075 59.2212 cv
151.405 59.2212 151.714 59.0581 151.901 58.7842 cv
154.531 54.9302 li
156.939 56.9663 li
157.123 57.1211 157.352 57.2031 157.584 57.2031 cv
157.7 57.2031 157.817 57.1831 157.929 57.1411 cv
160.715 56.1211 li
163.379 57.8472 li
166.519 62.5381 li
166.688 62.791 166.96 62.9521 167.263 62.978 cv
167.292 62.981 167.321 62.9819 167.351 62.9819 cv
167.622 62.9819 167.882 62.8721 168.072 62.6743 cv
170.677 59.958 li
173.214 62.104 li
173.396 62.2573 173.627 62.3403 173.862 62.3403 cv
173.917 62.3403 173.972 62.335 174.027 62.3262 cv
176.76 61.8643 li
179.648 64.876 li
179.844 65.0801 180.106 65.1841 180.37 65.1841 cv
180.588 65.1841 180.806 65.1128 180.989 64.9692 cv
184.021 62.5771 li
186.37 62.312 li
189.29 66.9209 li
189.392 67.082 189.531 67.2051 189.703 67.2881 cv
192.958 68.8472 li
193.094 68.9121 193.242 68.9448 193.39 68.9448 cv
193.523 68.9448 193.655 68.9189 193.779 68.8662 cv
196.875 67.5581 li
199.619 67.4028 li
202.595 69.416 li
202.699 69.4868 202.812 69.5352 202.935 69.563 cv
206.19 70.2969 li
206.216 70.3032 li
209.471 70.9448 li
209.534 70.957 209.599 70.9629 209.664 70.9629 cv
209.748 70.9629 209.831 70.9531 209.911 70.9331 cv
212.601 70.25 li
215.453 73.2251 li
215.535 73.3101 215.636 73.3833 215.743 73.4341 cv
218.998 74.9941 li
219.134 75.0591 219.282 75.0908 219.429 75.0908 cv
219.632 75.0908 219.835 75.0298 220.006 74.9092 cv
223.253 72.6221 li
226.051 70.729 li
228.806 71.894 li
229.055 71.9629 li
232.31 72.4219 li
232.338 72.4253 li
235.391 72.77 li
238.469 74.5039 li
238.621 74.5898 238.789 74.6343 238.959 74.6343 cv
239.067 74.6343 239.175 74.6162 239.28 74.5811 cv
242.011 73.6572 li
244.837 75.9673 li
245.015 76.1133 245.24 76.1929 245.47 76.1929 cv
245.479 76.1929 245.489 76.1929 245.498 76.1919 cv
248.587 76.105 li
251.684 77.0649 li
251.709 77.0732 li
254.964 77.9902 li
255.053 78.0151 255.144 78.0278 255.235 78.0278 cv
255.391 78.0278 255.546 77.9912 255.688 77.9189 cv
258.31 76.5889 li
261.053 79.2183 li
261.241 79.397 261.488 79.4961 261.745 79.4961 cv
261.791 79.4961 261.838 79.4922 261.885 79.4858 cv
265.14 79.0269 li
265.333 79 265.511 78.918 265.658 78.79 cv
268.31 76.4731 li
270.919 78.3853 li
271.092 78.5122 271.299 78.5781 271.51 78.5781 cv
271.583 78.5781 271.657 78.5698 271.73 78.5542 cv
274.499 77.9292 li
277.374 80.3599 li
277.465 80.437 277.564 80.4951 277.676 80.5352 cv
280.931 81.728 li
281.042 81.769 281.158 81.7891 281.274 81.7891 cv
281.33 81.7891 281.386 81.7852 281.442 81.7749 cv
284.158 81.3159 li
287.045 84.4893 li
287.235 84.6982 287.505 84.8169 287.785 84.8169 cv
287.813 84.8169 287.841 84.8149 287.869 84.813 cv
291.124 84.5381 li
291.311 84.5039 li
294.553 83.5898 li
297.318 82.8892 li
300.185 85.1519 li
300.353 85.2842 300.563 85.3608 300.777 85.3672 cv
303.844 85.4531 li
306.926 86.7559 li
307.05 86.8081 307.182 86.835 307.315 86.835 cv
307.406 86.835 307.497 86.8223 307.586 86.7969 cv
310.841 85.8799 li
313.991 84.9922 li
316.88 84.8291 li
319.903 86.2778 li
323.158 87.8379 li
323.344 87.9053 li
326.599 88.731 li
326.681 88.752 326.764 88.7622 326.846 88.7622 cv
327.144 88.7622 327.431 88.6279 327.623 88.3892 cv
330.109 85.3071 li
332.584 88.3062 li
332.749 88.5059 332.985 88.6343 333.243 88.6631 cv
336.498 89.0303 li
336.535 89.0352 336.573 89.0371 336.61 89.0371 cv
336.675 89.0371 336.74 89.0303 336.804 89.0181 cv
339.935 88.3999 li
342.903 88.5669 li
346.008 89.793 li
346.375 88.8618 li
346.375 102.29 li
343.12 105.411 li
.366217 0 .587488 0 cmyk
f
109.028 44.3052 mo
108.397 43.7891 li
105.983 35.9639 li
105.934 35.853 li
103.85 32.3882 li
105.505 33.6753 li
108.76 33.5981 li
110.751 33.23 li
112.015 38.2612 li
113.066 43.4731 li
111.808 43.7559 li
109.028 44.3052 li
115.27 56.6602 mo
112.015 56.1631 li
111.395 56.293 li
109.248 46.5542 li
109.238 46.5142 li
109.176 46.314 li
112.209 45.7163 li
112.235 45.71 li
113.461 45.4341 li
115.27 54.4072 li
115.7 56.4609 li
115.27 56.6602 li
.639124 0 .856565 0 cmyk
f
86.1719 35.8169 mo
83.1919 34.2202 li
82.9658 34.1333 li
79.7729 33.3232 li
76.5771 32.062 li
76.481 32.0303 li
73.2261 31.1118 li
73.1392 31.0879 73.0449 31.0752 72.9521 31.0752 cv
72.915 31.0752 72.8789 31.0771 72.8428 31.0811 cv
69.9209 31.4102 li
66.9541 29.6543 li
66.874 29.6069 66.7822 29.5688 66.6909 29.5459 cv
63.436 28.7202 li
63.3018 28.6963 li
60.2148 28.3481 li
58.7842 27.6621 li
59.9351 27.6621 li
63.1899 27.6621 li
66.4448 27.6621 li
69.7002 27.6621 li
72.9551 27.6621 li
76.21 27.6621 li
79.4648 27.6621 li
82.6221 27.6621 li
84.7749 28.0869 li
85.458 28.5591 li
86.4199 30.6211 li
87.7319 35.6411 li
86.1719 35.8169 li
99.2402 39.3433 mo
96.3589 37.0688 li
96.2549 36.9868 96.1392 36.9282 96.0112 36.8921 cv
92.7559 35.9741 li
92.625 35.9473 li
91.1841 35.7441 li
89.9048 30.0649 li
92.4849 29.2212 li
93.186 28.9502 li
95.7402 32.0479 li
98.9951 36.7041 li
100.398 39.082 li
99.2402 39.3433 li
85.9751 45.395 mo
82.7202 42.4629 li
79.4648 41.6719 li
76.21 39.7632 li
72.9551 36.916 li
69.7002 37.9189 li
66.4448 34.1719 li
63.1899 33.7109 li
59.9351 32.9482 li
56.6802 29.2832 li
53.4248 29.394 li
50.1699 28.8882 li
46.915 28.9121 li
45.6641 28.231 li
46.6948 28.4629 li
46.8872 28.4868 li
50.1421 28.5791 li
53.397 28.6709 li
56.439 28.7559 li
59.5029 30.2241 li
59.603 30.272 59.7129 30.3042 59.8232 30.3159 cv
63.0098 30.6753 li
66.0601 31.4492 li
69.1909 33.3022 li
69.3462 33.394 69.521 33.4419 69.6992 33.4419 cv
69.7368 33.4419 69.7739 33.4399 69.812 33.4351 cv
72.8721 33.0903 li
75.8901 33.9409 li
79.0981 35.207 li
79.2188 35.2461 li
82.355 36.041 li
85.5029 37.7271 li
85.6489 37.8052 85.8091 37.8452 85.9731 37.8452 cv
86.0112 37.8452 86.0488 37.8433 86.0869 37.8389 cv
88.2432 37.5962 li
89.23 41.375 li
89.439 42.71 li
89.23 42.5859 li
85.9751 45.395 li
104.839 50.8579 mo
102.25 48.0708 li
98.9951 47.4419 li
95.7402 47.5352 li
93.0571 45.0522 li
92.4849 41.522 li
91.6538 37.8301 li
92.2788 37.918 li
95.2769 38.7632 li
98.375 41.208 li
98.5532 41.3481 98.7739 41.4229 98.9971 41.4229 cv
99.0698 41.4229 99.1431 41.415 99.2148 41.3989 cv
101.466 40.8911 li
102.25 42.2192 li
104.839 50.8579 li
.366217 0 .587488 0 cmyk
f
106.998 42.645 mo
106.163 41.9629 li
102.931 38.957 li
102.744 38.7832 102.501 38.689 102.251 38.689 cv
102.177 38.689 102.103 38.6973 102.03 38.7139 cv
100.398 39.082 li
98.9951 36.7041 li
95.7402 32.0479 li
93.186 28.9502 li
95.374 28.1011 li
95.624 28.1572 li
95.9038 28.229 li
98.9951 33.291 li
102.024 31.2939 li
105.045 36.3169 li
106.998 42.645 li
108.76 56.8433 mo
105.505 51.5752 li
104.839 50.8579 li
102.25 42.2192 li
101.466 40.8911 li
101.955 40.7813 li
104.824 43.4492 li
104.872 43.4912 li
108.063 46.0991 li
108.276 46.79 li
110.416 56.498 li
108.76 56.8433 li
.639124 0 .856565 0 cmyk
f
63.27 25.6621 mo
63.1899 25.6621 li
60.5151 25.6621 li
63.1899 25.6318 li
63.27 25.6621 li
.366217 0 .587488 0 cmyk
f
95.9038 28.229 mo
95.624 28.1572 li
95.374 28.1011 li
95.5322 28.04 li
95.7402 28.0688 li
95.8062 28.0679 li
95.9038 28.229 li
108.397 43.7891 mo
106.998 42.645 li
105.045 36.3169 li
102.024 31.2939 li
102.25 31.145 li
103.85 32.3882 li
105.934 35.853 li
105.983 35.9639 li
108.397 43.7891 li
110.416 56.498 mo
108.276 46.79 li
108.063 46.0991 li
108.127 46.1509 li
108.307 46.2979 108.533 46.377 108.762 46.377 cv
108.826 46.377 108.89 46.3711 108.954 46.3579 cv
109.176 46.314 li
109.238 46.5142 li
109.248 46.5542 li
111.395 56.293 li
110.416 56.498 li
.876066 .338537 1 .281865 cmyk
f
24.1299 25.6621 mo
27.3848 25.6621 li
30.6401 25.6621 li
33.895 25.6621 li
37.1499 25.6621 li
37.1782 25.6621 li
40.4189 25.7539 li
43.6602 25.7539 li
43.8799 25.7778 li
47.04 26.4912 li
50.1982 26.5801 li
53.4531 26.6709 li
56.708 26.7632 li
56.8481 26.7671 56.9858 26.8013 57.1118 26.8608 cv
60.2148 28.3481 li
63.3018 28.6963 li
63.436 28.7202 li
66.6909 29.5459 li
66.7822 29.5688 66.874 29.6069 66.9541 29.6543 cv
69.9209 31.4102 li
72.8428 31.0811 li
72.9678 31.0669 73.105 31.0781 73.2261 31.1118 cv
76.481 32.0303 li
76.5771 32.062 li
79.7729 33.3232 li
82.9658 34.1333 li
83.1919 34.2202 li
86.1719 35.8169 li
89.1182 35.4839 li
89.3701 35.4878 li
92.625 35.9473 li
92.7559 35.9741 li
96.0112 36.8921 li
96.1392 36.9282 96.2549 36.9868 96.3589 37.0688 cv
99.2402 39.3433 li
102.03 38.7139 li
102.353 38.6411 102.689 38.731 102.931 38.957 cv
106.163 41.9629 li
109.028 44.3052 li
111.808 43.7559 li
115.05 43.0249 li
115.18 42.9961 115.305 42.9932 115.437 43.0151 cv
118.692 43.5649 li
118.928 43.605 119.144 43.73 119.296 43.915 cv
121.962 47.145 li
124.459 45.3853 li
124.754 45.1782 125.142 45.145 125.467 45.3013 cv
128.722 46.8599 li
128.781 46.8911 li
132.017 48.7163 li
134.61 50.0313 li
137.353 47.3262 li
137.564 47.1172 137.861 47.0132 138.156 47.043 cv
138.451 47.0732 138.721 47.2349 138.886 47.481 cv
141.967 52.084 li
144.552 53.104 li
147.431 51.8872 li
147.889 51.6929 148.42 51.8662 148.677 52.293 cv
151.128 56.3691 li
153.504 52.8872 li
153.663 52.6538 153.916 52.4971 154.195 52.459 cv
154.475 52.4209 154.76 52.5039 154.976 52.687 cv
157.787 55.064 li
160.496 54.0708 li
160.791 53.9629 161.12 54 161.384 54.1709 cv
164.639 56.2813 li
164.751 56.353 164.852 56.4531 164.926 56.564 cv
167.489 60.3921 li
169.883 57.896 li
170.249 57.5151 170.847 57.4829 171.251 57.8242 cv
174.151 60.2769 li
176.948 59.8032 li
177.275 59.748 177.608 59.8589 177.837 60.0972 cv
180.463 62.8359 li
183.006 60.8301 li
183.151 60.7163 183.329 60.6421 183.513 60.6221 cv
186.768 60.2549 li
187.148 60.2119 187.52 60.3901 187.725 60.7129 cv
190.826 65.6079 li
193.416 66.8491 li
196.256 65.6479 li
196.358 65.605 196.478 65.5771 196.589 65.5708 cv
199.844 65.3872 li
200.063 65.375 200.28 65.4351 200.46 65.5571 cv
203.559 67.6528 li
206.617 68.3433 li
209.637 68.939 li
212.674 68.1689 li
213.024 68.0801 213.392 68.186 213.642 68.4463 cv
216.771 71.709 li
219.333 72.937 li
222.109 70.981 li
222.125 70.9702 li
225.38 68.7681 li
225.659 68.5791 226.018 68.5439 226.329 68.6763 cv
229.464 70.001 li
232.576 70.439 li
235.817 70.8052 li
235.949 70.8198 236.08 70.8618 236.196 70.9272 cv
239.063 72.543 li
241.895 71.585 li
242.221 71.4751 242.581 71.54 242.848 71.7583 cv
245.814 74.1831 li
248.697 74.1021 li
248.808 74.0981 248.915 74.1128 249.021 74.146 cv
252.264 75.1509 li
255.131 75.959 li
258.038 74.4849 li
258.417 74.292 258.874 74.3599 259.182 74.6543 cv
262.086 77.438 li
264.566 77.0879 li
267.597 74.4399 li
267.949 74.1323 268.469 74.1099 268.846 74.3862 cv
271.734 76.5029 li
274.545 75.8691 li
274.851 75.8003 275.171 75.8779 275.411 76.0811 cv
278.53 78.7183 li
281.37 79.7593 li
284.363 79.2529 li
284.7 79.1958 285.04 79.313 285.27 79.5659 cv
288.193 82.7778 li
290.861 82.5532 li
294.024 81.6611 li
294.049 81.6548 li
297.304 80.8291 li
297.605 80.7529 297.926 80.8213 298.169 81.0132 cv
301.164 83.377 li
304.088 83.459 li
304.214 83.4629 304.333 83.4893 304.449 83.5381 cv
307.381 84.7769 li
310.299 83.9551 li
313.554 83.0381 li
313.769 83.002 li
317.024 82.8179 li
317.193 82.8091 317.359 82.8423 317.512 82.915 cv
320.767 84.4741 li
323.932 85.9912 li
326.469 86.6343 li
329.322 83.0972 li
329.51 82.8633 329.794 82.7271 330.094 82.7251 cv
330.395 82.7231 330.68 82.8569 330.871 83.0879 cv
333.869 86.7212 li
336.568 87.0259 li
339.671 86.4131 li
339.921 86.396 li
343.176 86.5801 li
343.279 86.585 343.392 86.6099 343.487 86.6479 cv
346.742 87.9321 li
346.008 89.793 li
342.903 88.5669 li
339.935 88.3999 li
336.804 89.0181 li
336.703 89.0381 336.6 89.042 336.498 89.0303 cv
333.243 88.6631 li
332.985 88.6343 332.749 88.5059 332.584 88.3062 cv
330.109 85.3071 li
327.623 88.3892 li
327.377 88.6938 326.979 88.8271 326.599 88.731 cv
323.344 87.9053 li
323.158 87.8379 li
319.903 86.2778 li
316.88 84.8291 li
313.991 84.9922 li
310.841 85.8799 li
307.586 86.7969 li
307.368 86.8589 307.135 86.8442 306.926 86.7559 cv
303.844 85.4531 li
300.777 85.3672 li
300.563 85.3608 300.353 85.2842 300.185 85.1519 cv
297.318 82.8892 li
294.553 83.5898 li
291.311 84.5039 li
291.124 84.5381 li
287.869 84.813 li
287.56 84.8389 287.254 84.7192 287.045 84.4893 cv
284.158 81.3159 li
281.442 81.7749 li
281.27 81.8042 281.095 81.7881 280.931 81.728 cv
277.676 80.5352 li
277.564 80.4951 277.465 80.437 277.374 80.3599 cv
274.499 77.9292 li
271.73 78.5542 li
271.448 78.6172 271.152 78.5562 270.919 78.3853 cv
268.31 76.4731 li
265.658 78.79 li
265.511 78.918 265.333 79 265.14 79.0269 cv
261.885 79.4858 li
261.58 79.5293 261.275 79.4302 261.053 79.2183 cv
258.31 76.5889 li
255.688 77.9189 li
255.463 78.0332 255.206 78.0581 254.964 77.9902 cv
251.709 77.0732 li
251.684 77.0649 li
248.587 76.105 li
245.498 76.1919 li
245.259 76.1992 245.023 76.1191 244.837 75.9673 cv
242.011 73.6572 li
239.28 74.5811 li
239.01 74.6719 238.718 74.645 238.469 74.5039 cv
235.391 72.77 li
232.338 72.4253 li
232.31 72.4219 li
229.055 71.9629 li
228.806 71.894 li
226.051 70.729 li
223.253 72.6221 li
220.006 74.9092 li
219.711 75.1172 219.323 75.1499 218.998 74.9941 cv
215.743 73.4341 li
215.636 73.3833 215.535 73.3101 215.453 73.2251 cv
212.601 70.25 li
209.911 70.9331 li
209.769 70.9692 209.615 70.9731 209.471 70.9448 cv
206.216 70.3032 li
206.19 70.2969 li
202.935 69.563 li
202.812 69.5352 202.699 69.4868 202.595 69.416 cv
199.619 67.4028 li
196.875 67.5581 li
193.779 68.8662 li
193.516 68.978 193.216 68.9712 192.958 68.8472 cv
189.703 67.2881 li
189.531 67.2051 189.392 67.082 189.29 66.9209 cv
186.37 62.312 li
184.021 62.5771 li
180.989 64.9692 li
180.584 65.2891 180.005 65.248 179.648 64.876 cv
176.76 61.8643 li
174.027 62.3262 li
173.738 62.375 173.438 62.293 173.214 62.104 cv
170.677 59.958 li
168.072 62.6743 li
167.862 62.8931 167.565 63.0049 167.263 62.978 cv
166.96 62.9521 166.688 62.791 166.519 62.5381 cv
163.379 57.8472 li
160.715 56.1211 li
157.929 57.1411 li
157.591 57.2651 157.215 57.1992 156.939 56.9663 cv
154.531 54.9302 li
151.901 58.7842 li
151.709 59.0659 151.387 59.23 151.046 59.2202 cv
150.706 59.2109 150.394 59.0278 150.218 58.7358 cv
147.41 54.0669 li
144.954 55.105 li
144.712 55.208 144.443 55.2109 144.198 55.1143 cv
140.943 53.8301 li
140.753 53.7549 140.593 53.626 140.479 53.4561 cv
137.897 49.5981 li
135.502 51.96 li
135.197 52.2612 134.73 52.334 134.348 52.1401 cv
131.093 50.4893 li
131.054 50.4683 li
127.828 48.6499 li
125.132 47.3579 li
122.356 49.314 li
121.929 49.6143 121.341 49.5352 121.009 49.1333 cv
117.991 45.4751 li
115.298 45.02 li
112.235 45.71 li
112.209 45.7163 li
108.954 46.3579 li
108.663 46.416 108.357 46.3389 108.127 46.1509 cv
104.872 43.4912 li
104.824 43.4492 li
101.955 40.7813 li
99.2148 41.3989 li
98.9219 41.4653 98.6108 41.394 98.375 41.208 cv
95.2769 38.7632 li
92.2788 37.918 li
89.2158 37.4858 li
86.0869 37.8389 li
85.8838 37.8618 85.6831 37.8232 85.5029 37.7271 cv
82.355 36.041 li
79.2188 35.2461 li
79.0981 35.207 li
75.8901 33.9409 li
72.8721 33.0903 li
69.812 33.4351 li
69.5952 33.46 69.3779 33.4131 69.1909 33.3022 cv
66.0601 31.4492 li
63.0098 30.6753 li
59.8232 30.3159 li
59.7129 30.3042 59.603 30.272 59.5029 30.2241 cv
56.439 28.7559 li
53.397 28.6709 li
50.1421 28.5791 li
46.8872 28.4868 li
46.6948 28.4629 li
43.5488 27.7539 li
40.4048 27.7539 li
40.377 27.7529 li
37.1362 27.6621 li
33.895 27.6621 li
30.6401 27.6621 li
27.3848 27.6621 li
24.1299 27.6621 li
24.1299 25.6621 li
.626581 0 1 0 cmyk
f
227.47 259.397 mo
225.94 259.261 li
222.685 258.587 li
219.43 257.887 li
216.175 257.654 li
212.92 256.751 li
209.665 255.66 li
206.41 255.294 li
203.155 254.093 li
199.9 253.059 li
196.645 251.967 li
193.39 250.617 li
190.135 249.444 li
186.88 247.916 li
183.625 245.26 li
180.37 243.378 li
177.115 241.293 li
173.86 238.851 li
170.605 235.722 li
167.35 233.525 li
164.095 231.161 li
160.84 227.272 li
157.585 223.924 li
154.33 219.962 li
151.075 215.355 li
147.82 210.714 li
144.565 206.125 li
141.31 199.932 li
138.055 194.752 li
134.8 188.774 li
131.545 182.61 li
128.29 173.617 li
125.035 167.152 li
121.78 158.804 li
118.525 157.89 li
115.27 154.113 li
112.015 156.745 li
108.76 152.374 li
105.505 152.414 li
102.25 151.169 li
98.9951 156.693 li
95.7402 153.168 li
92.4849 151.036 li
89.23 154.703 li
85.9751 153.362 li
82.7202 154.413 li
79.4648 153.57 li
76.21 152.482 li
72.9551 156.376 li
69.7002 153.213 li
66.4448 157.894 li
63.1899 152.259 li
59.9351 151.563 li
56.6802 154.664 li
53.4248 150.525 li
50.1699 147.669 li
46.915 144.81 li
43.6602 138.099 li
40.4048 123.144 li
37.1499 106.817 li
33.895 90.98 li
32.1831 72.749 li
32.9009 79.0669 li
32.9102 79.1279 li
36.165 97.5679 li
36.1689 97.5903 li
39.4238 113.92 li
39.4341 113.963 li
42.689 127.174 li
42.7852 127.42 li
46.04 133.291 li
46.0542 133.315 li
49.3091 138.82 li
49.3931 138.961 49.5039 139.074 49.6431 139.161 cv
52.7441 141.083 li
55.8882 145.16 li
56.0762 145.403 56.3682 145.547 56.6748 145.549 cv
56.6758 145.549 56.6782 145.549 56.6802 145.549 cv
56.9849 145.549 57.2759 145.408 57.4648 145.168 cv
59.9351 142.036 li
62.4048 145.168 li
62.5698 145.378 62.812 145.513 63.0781 145.543 cv
66.333 145.91 li
66.3701 145.914 66.4082 145.917 66.4448 145.917 cv
66.5698 145.917 66.6948 145.893 66.812 145.846 cv
69.4902 144.789 li
72.2852 147.31 li
72.4712 147.477 72.707 147.568 72.9531 147.568 cv
72.9849 147.568 73.0181 147.566 73.0498 147.563 cv
73.3311 147.536 73.583 147.395 73.7529 147.17 cv
76.585 143.419 li
79.1689 144.22 li
79.2642 144.25 79.3672 144.265 79.4678 144.265 cv
79.4951 144.265 79.522 144.263 79.5488 144.261 cv
82.8042 143.986 li
82.8979 143.978 82.9761 143.961 83.064 143.929 cv
85.6968 142.964 li
88.499 145.966 li
88.688 146.168 88.9531 146.283 89.23 146.283 cv
89.2378 146.283 89.2461 146.283 89.2549 146.283 cv
89.541 146.276 89.8091 146.147 89.9941 145.928 cv
92.4502 143.021 li
94.9482 146.261 li
95.0669 146.416 95.2349 146.535 95.4199 146.597 cv
98.6748 147.698 li
98.7813 147.734 98.8892 147.751 98.9961 147.751 cv
99.3359 147.751 99.6621 147.577 99.8481 147.273 cv
102.354 143.177 li
104.72 146.177 li
104.915 146.425 105.207 146.559 105.505 146.559 cv
105.665 146.559 105.827 146.52 105.977 146.44 cv
108.773 144.943 li
111.563 146.358 li
111.704 146.43 111.858 146.467 112.014 146.467 cv
112.052 146.467 112.091 146.465 112.13 146.46 cv
115.27 152.457 li
118.525 155.745 li
121.78 158.621 li
124.679 162.069 li
125.718 164.383 li
128.29 171.496 li
131.545 179.252 li
134.8 186.863 li
138.055 193.562 li
141.31 197.959 li
144.565 203.601 li
147.82 207.92 li
150.03 210.822 li
150.23 211.138 li
150.265 211.189 li
153.52 215.684 li
153.566 215.743 li
155.491 218.022 li
157.585 221.12 li
160.84 224.917 li
162.199 226.358 li
163.317 227.744 li
163.437 227.869 li
166.083 230.181 li
167.35 231.337 li
170.605 234.619 li
173.86 237.079 li
177.115 239.592 li
180.37 241.59 li
183.625 243.276 li
184.182 243.633 li
186.247 245.321 li
186.389 245.418 li
189.644 247.253 li
192.899 249.088 li
192.979 249.128 li
196.234 250.596 li
196.256 250.605 li
199.511 251.982 li
199.604 252.016 li
202.811 253.01 li
206.021 254.367 li
206.114 254.401 li
209.369 255.41 li
209.498 255.441 li
212.688 255.98 li
214.125 256.426 li
216.175 257.202 li
219.43 257.878 li
222.685 258.275 li
223.015 258.339 li
225.669 259.087 li
225.773 259.11 li
227.47 259.397 li
0 .503777 .274907 0 cmyk
f
224.504 256.209 mo
222.685 255.981 li
219.43 255.041 li
217.793 254.333 li
219.43 254.6 li
222.685 255.542 li
224.504 256.209 li
.335698 .984771 .964111 .524834 cmyk
f
190.822 243.516 mo
190.135 243.061 li
186.88 241.03 li
183.625 238.718 li
180.37 236.728 li
179.795 236.302 li
180.37 236.64 li
183.625 238.19 li
186.88 240.798 li
190.135 242.966 li
190.822 243.516 li
.194522 .759579 .590387 .0392157 cmyk
f
120.214 144.017 mo
118.525 143.837 li
118.278 142.966 li
118.525 143.639 li
120.214 144.017 li
98.5591 145.548 mo
96.3472 144.8 li
93.2769 140.819 li
93.0908 140.579 92.811 140.437 92.5068 140.43 cv
92.5 140.43 92.4922 140.43 92.4839 140.43 cv
92.189 140.43 91.9121 140.559 91.7212 140.785 cv
89.1929 143.778 li
86.7061 141.114 li
86.5132 140.908 86.2471 140.797 85.9741 140.797 cv
85.8589 140.797 85.7432 140.817 85.6309 140.858 cv
82.502 142.004 li
79.5752 142.252 li
76.5059 141.301 li
76.4082 141.27 76.3081 141.255 76.209 141.255 cv
75.9009 141.255 75.605 141.398 75.4121 141.653 cv
72.814 145.094 li
70.3701 142.889 li
70.1831 142.721 69.9429 142.632 69.7002 142.632 cv
69.5762 142.632 69.4521 142.655 69.333 142.702 cv
66.3101 143.894 li
63.7168 143.602 li
60.7202 139.802 li
60.5298 139.56 60.2422 139.421 59.9351 139.421 cv
59.6279 139.421 59.3398 139.56 59.1499 139.802 cv
56.689 142.923 li
54.2168 139.718 li
54.144 139.625 54.0532 139.542 53.9521 139.479 cv
50.9063 137.59 li
47.7832 132.309 li
44.5991 126.566 li
41.3809 113.507 li
38.1328 97.209 li
34.8848 78.8101 li
32.0601 53.9648 li
33.895 66.5181 li
37.1499 87.6929 li
40.4048 103.993 li
43.6602 115.286 li
46.915 120.213 li
50.1699 128.582 li
53.4248 129.684 li
56.6802 133.976 li
59.9351 128.738 li
63.1899 136.576 li
66.4448 131.168 li
69.7002 133.642 li
72.9551 136.32 li
76.21 131.569 li
79.4648 132.488 li
82.7202 130.985 li
85.9751 129.641 li
89.23 135.463 li
92.4849 131.422 li
95.7402 137.879 li
98.9951 136.357 li
102.25 131.278 li
105.505 138.493 li
108.113 135.641 li
108.76 137.847 li
111.1 143.881 li
109.212 142.923 li
109.07 142.851 108.915 142.815 108.76 142.815 cv
108.598 142.815 108.436 142.855 108.288 142.934 cv
105.772 144.281 li
103.035 140.811 li
102.845 140.569 102.556 140.43 102.25 140.43 cv
102.23 140.43 102.211 140.431 102.191 140.432 cv
101.864 140.451 101.568 140.629 101.397 140.908 cv
98.5591 145.548 li
143.146 192.414 mo
141.31 188.97 li
140.358 187.35 li
141.31 188.555 li
143.146 192.414 li
152.058 206.93 mo
151.075 205.794 li
147.82 200.316 li
146.101 197.548 li
147.82 199.958 li
151.075 205.617 li
152.058 206.93 li
159.765 217 mo
157.585 214.643 li
155.293 211.06 li
157.585 213.668 li
159.765 217 li
0 .503777 .274907 0 cmyk
f
24.519 25.7412 mo
27.7739 27.1172 li
28.0981 27.2539 28.3242 27.5459 28.375 27.894 cv
31.6299 50.187 li
31.6338 50.2183 li
34.8848 78.8101 li
38.1328 97.209 li
41.3809 113.507 li
44.5991 126.566 li
47.7832 132.309 li
50.9063 137.59 li
53.9521 139.479 li
54.0532 139.542 54.144 139.625 54.2168 139.718 cv
56.689 142.923 li
59.1499 139.802 li
59.3398 139.56 59.6279 139.421 59.9351 139.421 cv
60.2422 139.421 60.5298 139.56 60.7202 139.802 cv
63.7168 143.602 li
66.3101 143.894 li
69.333 142.702 li
69.686 142.562 70.0879 142.635 70.3701 142.889 cv
72.814 145.094 li
75.4121 141.653 li
75.667 141.316 76.1021 141.175 76.5059 141.301 cv
79.5752 142.252 li
82.502 142.004 li
85.6309 140.858 li
86.0078 140.72 86.4321 140.821 86.7061 141.114 cv
89.1929 143.778 li
91.7212 140.785 li
91.917 140.553 92.2041 140.423 92.5068 140.43 cv
92.811 140.437 93.0908 140.579 93.2769 140.819 cv
96.3472 144.8 li
98.5591 145.548 li
101.397 140.908 li
101.568 140.629 101.864 140.451 102.191 140.432 cv
102.518 140.412 102.832 140.554 103.035 140.811 cv
105.772 144.281 li
108.288 142.934 li
108.577 142.779 108.92 142.775 109.212 142.923 cv
112.133 144.405 li
115.024 143.672 li
115.475 143.557 115.941 143.766 116.157 144.178 cv
119.205 150.02 li
122.026 150.736 li
122.344 150.816 122.602 151.048 122.717 151.355 cv
125.961 160.041 li
129.202 167.258 li
129.226 167.315 li
132.467 175.903 li
135.699 182.826 li
138.916 189.172 li
142.131 193.793 li
142.205 193.918 li
145.425 200.363 li
148.636 204.887 li
148.665 204.93 li
151.903 210.042 li
155.118 214.482 li
158.349 218.306 li
158.37 218.333 li
161.623 222.458 li
164.819 226.42 li
167.982 229.185 li
171.211 231.641 li
171.297 231.715 li
174.517 234.801 li
177.69 237.305 li
180.87 239.277 li
184.097 241.005 li
184.258 241.112 li
187.446 243.718 li
190.626 245.511 li
193.842 247.324 li
197.045 248.768 li
200.244 250.12 li
203.451 251.115 li
203.544 251.149 li
206.754 252.505 li
209.897 253.48 li
213.087 254.019 li
213.216 254.05 li
216.381 255.031 li
219.542 255.388 li
219.676 255.412 li
222.931 256.238 li
222.956 256.245 li
226.16 257.148 li
229.307 257.68 li
232.492 257.859 li
235.733 257.951 li
238.988 258.042 li
242.243 258.134 li
242.271 258.135 li
245.498 258.317 li
248.725 258.317 li
251.98 258.317 li
255.235 258.317 li
258.49 258.317 li
258.518 258.318 li
261.773 258.409 li
265.028 258.501 li
268.269 258.592 li
271.51 258.592 li
274.765 258.592 li
278.02 258.592 li
281.275 258.592 li
284.53 258.592 li
287.785 258.592 li
291.04 258.592 li
294.295 258.592 li
297.55 258.592 li
300.805 258.592 li
304.06 258.592 li
307.315 258.592 li
310.57 258.592 li
313.825 258.592 li
317.08 258.592 li
320.335 258.592 li
323.59 258.592 li
326.845 258.592 li
330.1 258.592 li
333.355 258.592 li
336.61 258.592 li
339.865 258.592 li
343.12 258.592 li
346.375 258.592 li
346.375 260.592 li
343.12 260.592 li
339.865 260.592 li
336.61 260.592 li
333.355 260.592 li
330.1 260.592 li
326.845 260.592 li
323.59 260.592 li
320.335 260.592 li
317.08 260.592 li
313.825 260.592 li
310.57 260.592 li
307.315 260.592 li
304.06 260.592 li
300.805 260.592 li
297.55 260.592 li
294.295 260.592 li
291.04 260.592 li
287.785 260.592 li
284.53 260.592 li
281.275 260.592 li
278.02 260.592 li
274.765 260.592 li
271.51 260.592 li
268.255 260.592 li
268.227 260.592 li
264.972 260.5 li
261.717 260.409 li
258.476 260.317 li
255.235 260.317 li
251.98 260.317 li
248.725 260.317 li
245.47 260.317 li
245.414 260.316 li
242.173 260.133 li
238.932 260.042 li
235.677 259.95 li
232.422 259.858 li
232.394 259.857 li
229.139 259.673 li
229.028 259.661 li
225.773 259.11 li
225.669 259.087 li
222.427 258.173 li
219.25 257.368 li
216.063 257.008 li
215.879 256.97 li
212.688 255.98 li
209.498 255.441 li
209.369 255.41 li
206.114 254.401 li
206.021 254.367 li
202.811 253.01 li
199.604 252.016 li
199.511 251.982 li
196.256 250.605 li
196.234 250.596 li
192.979 249.128 li
192.899 249.088 li
189.644 247.253 li
186.389 245.418 li
186.247 245.321 li
183.067 242.722 li
179.898 241.025 li
179.843 240.993 li
176.588 238.975 li
176.495 238.91 li
173.24 236.341 li
173.168 236.278 li
169.954 233.198 li
166.744 230.756 li
166.692 230.713 li
163.437 227.869 li
163.317 227.744 li
160.062 223.707 li
160.055 223.699 li
156.81 219.584 li
153.566 215.743 li
153.52 215.684 li
150.265 211.189 li
150.23 211.138 li
146.989 206.023 li
143.75 201.458 li
143.67 201.325 li
140.448 194.877 li
137.234 190.257 li
137.163 190.138 li
133.908 183.716 li
133.894 183.687 li
130.639 176.715 li
130.609 176.645 li
127.365 168.049 li
124.123 160.83 li
124.098 160.77 li
121.026 152.545 li
118.279 151.849 li
118.002 151.778 117.771 151.595 117.638 151.342 cv
114.749 145.805 li
112.261 146.436 li
112.025 146.496 111.78 146.469 111.563 146.358 cv
108.773 144.943 li
105.977 146.44 li
105.549 146.669 105.021 146.559 104.72 146.177 cv
102.354 143.177 li
99.8481 147.273 li
99.604 147.672 99.1182 147.848 98.6748 147.698 cv
95.4199 146.597 li
95.2349 146.535 95.0669 146.416 94.9482 146.261 cv
92.4502 143.021 li
89.9941 145.928 li
89.8091 146.147 89.541 146.276 89.2549 146.283 cv
88.9688 146.291 88.6938 146.174 88.499 145.966 cv
85.6968 142.964 li
83.064 143.929 li
82.9761 143.961 82.8979 143.978 82.8042 143.986 cv
79.5488 144.261 li
79.4238 144.272 79.2891 144.257 79.1689 144.22 cv
76.585 143.419 li
73.7529 147.17 li
73.583 147.395 73.3311 147.536 73.0498 147.563 cv
72.769 147.59 72.4951 147.5 72.2852 147.31 cv
69.4902 144.789 li
66.812 145.846 li
66.6602 145.906 66.4961 145.928 66.333 145.91 cv
63.0781 145.543 li
62.812 145.513 62.5698 145.378 62.4048 145.168 cv
59.9351 142.036 li
57.4648 145.168 li
57.2749 145.409 56.9819 145.551 56.6748 145.549 cv
56.3682 145.547 56.0762 145.403 55.8882 145.16 cv
52.7441 141.083 li
49.6431 139.161 li
49.5039 139.074 49.3931 138.961 49.3091 138.82 cv
46.0542 133.315 li
46.04 133.291 li
42.7852 127.42 li
42.689 127.174 li
39.4341 113.963 li
39.4238 113.92 li
36.1689 97.5903 li
36.165 97.5679 li
32.9102 79.1279 li
32.9009 79.0669 li
29.6479 50.46 li
26.4771 28.7402 li
23.7412 27.583 li
24.519 25.7412 li
0 .993286 1 0 cmyk
f
108.113 135.641 mo
105.505 126.755 li
102.25 114.873 li
98.9951 99.3208 li
95.7402 81.9019 li
92.4849 62.188 li
89.439 42.71 li
89.8042 42.9272 li
91.5 52.1548 li
94.7529 72.0522 li
94.7549 72.061 li
98.0098 90.8682 li
98.0132 90.8872 li
101.268 107.676 li
101.282 107.735 li
104.537 120.395 li
104.544 120.423 li
107.799 131.707 li
107.831 131.801 li
109.035 134.821 li
108.76 134.933 li
108.113 135.641 li
.0287785 0 .489662 0 cmyk
f
87.7319 35.6411 mo
86.4199 30.6211 li
88.27 34.583 li
88.4492 35.5601 li
87.7319 35.6411 li
89.8042 42.9272 mo
89.439 42.71 li
89.23 41.375 li
88.2432 37.5962 li
88.812 37.5322 li
89.8042 42.9272 li
.272251 0 .844724 0 cmyk
f
88.2432 37.5962 mo
87.7319 35.6411 li
88.4492 35.5601 li
88.812 37.5322 li
88.2432 37.5962 li
.528679 0 1 0 cmyk
f
112.133 144.405 mo
111.1 143.881 li
108.76 137.847 li
108.113 135.641 li
108.76 134.933 li
109.035 134.821 li
111.086 139.965 li
111.14 140.101 111.227 140.228 111.334 140.327 cv
114.441 143.217 li
114.684 143.758 li
112.133 144.405 li
124.679 162.069 mo
121.78 158.621 li
118.525 155.745 li
115.27 152.457 li
112.13 146.46 li
112.174 146.455 112.217 146.447 112.261 146.436 cv
114.749 145.805 li
117.638 151.342 li
117.771 151.595 118.002 151.778 118.279 151.849 cv
121.026 152.545 li
124.098 160.77 li
124.123 160.83 li
124.679 162.069 li
150.03 210.822 mo
147.82 207.92 li
144.565 203.601 li
141.31 197.959 li
138.055 193.562 li
134.8 186.863 li
131.545 179.252 li
128.29 171.496 li
125.718 164.383 li
127.365 168.049 li
130.609 176.645 li
130.639 176.715 li
133.894 183.687 li
133.908 183.716 li
137.163 190.138 li
137.234 190.257 li
140.448 194.877 li
143.67 201.325 li
143.75 201.458 li
146.989 206.023 li
150.03 210.822 li
162.199 226.358 mo
160.84 224.917 li
157.585 221.12 li
155.491 218.022 li
156.81 219.584 li
160.055 223.699 li
160.062 223.707 li
162.199 226.358 li
184.182 243.633 mo
183.625 243.276 li
180.37 241.59 li
177.115 239.592 li
173.86 237.079 li
170.605 234.619 li
167.35 231.337 li
166.083 230.181 li
166.692 230.713 li
166.744 230.756 li
169.954 233.198 li
173.168 236.278 li
173.24 236.341 li
176.495 238.91 li
176.588 238.975 li
179.843 240.993 li
179.898 241.025 li
183.067 242.722 li
184.182 243.633 li
223.015 258.339 mo
222.685 258.275 li
219.43 257.878 li
216.175 257.202 li
214.125 256.426 li
215.879 256.97 li
216.063 257.008 li
218.294 257.26 li
219.134 257.52 li
219.236 257.546 li
222.452 258.18 li
223.015 258.339 li
0 .257572 .729152 0 cmyk
f
218.294 257.26 mo
216.063 257.008 li
215.879 256.97 li
214.125 256.426 li
212.92 255.97 li
209.665 254.883 li
206.41 253.91 li
203.155 252.9 li
199.9 251.421 li
196.645 250.275 li
193.39 249.069 li
190.135 247.186 li
186.88 245.365 li
184.182 243.633 li
183.067 242.722 li
179.898 241.025 li
179.843 240.993 li
176.588 238.975 li
176.495 238.91 li
173.24 236.341 li
173.168 236.278 li
169.954 233.198 li
166.744 230.756 li
166.692 230.713 li
166.083 230.181 li
164.095 228.368 li
162.199 226.358 li
160.062 223.707 li
160.055 223.699 li
156.81 219.584 li
155.491 218.022 li
154.33 216.304 li
151.075 212.194 li
150.03 210.822 li
146.989 206.023 li
143.75 201.458 li
143.67 201.325 li
140.448 194.877 li
137.234 190.257 li
137.163 190.138 li
133.908 183.716 li
133.894 183.687 li
130.639 176.715 li
130.609 176.645 li
127.365 168.049 li
125.718 164.383 li
125.035 162.492 li
124.679 162.069 li
124.123 160.83 li
124.098 160.77 li
121.026 152.545 li
118.279 151.849 li
118.002 151.778 117.771 151.595 117.638 151.342 cv
114.749 145.805 li
112.261 146.436 li
112.217 146.447 112.174 146.455 112.13 146.46 cv
112.015 146.241 li
111.1 143.881 li
112.133 144.405 li
114.684 143.758 li
117.613 150.28 li
117.706 150.487 117.87 150.659 118.073 150.762 cv
121.103 152.299 li
124.13 156.65 li
127.339 166.51 li
127.384 166.624 li
130.625 173.566 li
133.868 181.884 li
133.892 181.939 li
137.147 189.003 li
137.219 189.134 li
140.454 194.056 li
143.69 199.895 li
143.739 199.974 li
146.99 204.739 li
150.244 209.599 li
150.304 209.68 li
153.524 213.583 li
156.749 218.491 li
156.837 218.605 li
160.092 222.275 li
160.128 222.314 li
163.383 225.616 li
163.393 225.626 li
166.643 228.833 li
169.893 232.13 li
169.935 232.171 li
173.19 235.106 li
173.227 235.138 li
176.482 237.798 li
176.555 237.852 li
179.81 240.054 li
179.879 240.097 li
183.098 241.912 li
186.32 244.091 li
186.371 244.123 li
189.617 246.045 li
192.863 248.057 li
192.979 248.119 li
196.234 249.587 li
196.349 249.63 li
199.568 250.628 li
202.755 251.886 li
205.978 253.43 li
206.066 253.467 li
209.321 254.66 li
209.419 254.69 li
212.649 255.51 li
215.879 256.511 li
218.294 257.26 li
228.601 259.302 mo
225.94 258.904 li
223.015 258.339 li
222.452 258.18 li
222.491 258.188 li
222.518 258.193 li
225.76 258.741 li
228.601 259.302 li
0 .74377 1 0 cmyk
f
231.257 257.681 mo
229.362 257.414 li
226.134 256.777 li
226.107 256.772 li
226.016 256.756 li
225.94 256.735 li
224.504 256.209 li
225.94 256.389 li
229.195 257.205 li
231.257 257.681 li
.567163 .43653 1 .2692 cmyk
f
214.93 253.65 mo
212.92 252.975 li
211.137 253.063 li
209.96 252.764 li
207.035 251.692 li
206.41 251.35 li
203.155 249.796 li
202.201 249.517 li
200.267 248.754 li
200.196 248.729 li
198.91 248.33 li
196.645 247.152 li
193.39 245.573 li
190.822 243.516 li
193.39 245.215 li
196.645 246.968 li
199.9 247.809 li
203.155 248.838 li
206.41 251.03 li
209.665 252.465 li
212.92 252.958 li
214.01 253.183 li
214.93 253.65 li
.272221 .140963 .797482 0 cmyk
f
217.793 254.333 mo
216.175 254.068 li
214.93 253.65 li
214.01 253.183 li
216.175 253.632 li
217.793 254.333 li
.567163 .43653 1 .2692 cmyk
f
178.308 235.427 mo
177.115 234.725 li
173.86 232.036 li
170.605 228.954 li
167.35 226.18 li
164.095 222.817 li
160.84 218.644 li
159.765 217 li
160.84 218.164 li
164.095 221.289 li
167.35 224.751 li
170.605 228.057 li
173.86 231.504 li
177.115 234.313 li
177.589 234.666 li
178.308 235.427 li
.0287785 0 .489662 0 cmyk
f
179.795 236.302 mo
178.308 235.427 li
177.589 234.666 li
179.795 236.302 li
.272221 .140963 .797482 0 cmyk
f
89.23 30.2861 mo
88.1309 29.5581 li
87.0122 27.1621 li
89.209 27.1621 li
89.2529 27.166 li
89.9048 30.0649 li
89.23 30.2861 li
118.278 142.966 mo
115.27 134.767 li
112.015 133.609 li
110.888 134.068 li
109.707 131.106 li
106.47 119.883 li
103.226 107.266 li
99.979 90.5171 li
96.7251 71.7202 li
96.7271 71.729 li
93.4722 51.8208 li
93.4688 51.8022 li
92.0869 44.2852 li
92.4849 44.522 li
93.0571 45.0522 li
95.7402 61.6069 li
98.9951 81.8501 li
102.25 99.917 li
105.505 113.378 li
108.76 124.85 li
112.015 132.763 li
115.27 132.363 li
118.278 142.966 li
140.358 187.35 mo
138.055 184.434 li
134.8 177.552 li
131.545 169.729 li
128.29 161.523 li
125.035 153.457 li
121.78 144.368 li
120.214 144.017 li
121.78 144.185 li
125.035 149.714 li
128.29 160.752 li
131.545 166.875 li
134.8 175.993 li
138.055 183.431 li
140.358 187.35 li
146.101 197.548 mo
144.565 195.394 li
143.146 192.414 li
144.565 195.073 li
146.101 197.548 li
155.293 211.06 mo
154.33 209.964 li
152.058 206.93 li
154.33 209.554 li
155.293 211.06 li
.0287785 0 .489662 0 cmyk
f
89.2529 27.166 mo
89.209 27.1621 li
87.0122 27.1621 li
87.001 27.1392 li
89.23 27.1392 li
89.2471 27.1411 li
89.2529 27.166 li
.567163 .43653 1 .2692 cmyk
f
91.1841 35.7441 mo
90.499 35.647 li
90.2139 34.0962 li
90.1362 33.853 li
88.1309 29.5581 li
89.23 30.2861 li
89.9048 30.0649 li
91.1841 35.7441 li
93.0571 45.0522 mo
92.4849 44.522 li
92.0869 44.2852 li
90.8799 37.7212 li
91.6538 37.8301 li
92.4849 41.522 li
93.0571 45.0522 li
.272251 0 .844724 0 cmyk
f
91.6538 37.8301 mo
90.8799 37.7212 li
90.499 35.647 li
91.1841 35.7441 li
91.6538 37.8301 li
.528679 0 1 0 cmyk
f
218.348 255.183 mo
216.471 254.601 li
213.216 253.592 li
213.166 253.577 li
211.137 253.063 li
212.92 252.975 li
214.93 253.65 li
215.949 254.167 li
215.98 254.182 li
218.348 255.183 li
.140688 .399451 .927672 .00396735 cmyk
f
226.016 256.756 mo
222.893 256.228 li
219.676 255.412 li
219.542 255.388 li
218.705 255.293 li
218.348 255.183 li
215.98 254.182 li
215.949 254.167 li
214.93 253.65 li
216.175 254.068 li
217.793 254.333 li
219.43 255.041 li
222.685 255.981 li
224.504 256.209 li
225.94 256.735 li
226.016 256.756 li
.294469 .598321 1 .156649 cmyk
f
207.035 251.692 mo
206.799 251.606 li
203.587 250.067 li
203.522 250.039 li
202.201 249.517 li
203.155 249.796 li
206.41 251.35 li
207.035 251.692 li
.140688 .399451 .927672 .00396735 cmyk
f
181.176 238.533 mo
180.897 238.375 li
177.713 236.221 li
174.512 233.605 li
171.297 230.705 li
168.062 227.423 li
168.052 227.413 li
164.801 224.207 li
161.571 220.929 li
158.381 217.333 li
155.166 212.439 li
155.101 212.351 li
151.878 208.446 li
148.651 203.625 li
148.646 203.617 li
145.417 198.885 li
142.185 193.054 li
142.146 192.99 li
138.932 188.098 li
135.721 181.13 li
132.477 172.809 li
132.451 172.75 li
129.222 165.833 li
125.986 155.891 li
125.856 155.629 li
122.601 150.95 li
122.507 150.816 122.379 150.704 122.232 150.63 cv
119.292 149.138 li
116.182 142.213 li
116.128 142.091 116.048 141.981 115.951 141.89 cv
112.861 139.016 li
110.888 134.068 li
112.015 133.609 li
115.27 134.767 li
118.278 142.966 li
118.525 143.837 li
120.214 144.017 li
121.78 144.368 li
125.035 153.457 li
128.29 161.523 li
131.545 169.729 li
134.8 177.552 li
138.055 184.434 li
140.358 187.35 li
141.31 188.97 li
143.146 192.414 li
144.565 195.394 li
146.101 197.548 li
147.82 200.316 li
151.075 205.794 li
152.058 206.93 li
154.33 209.964 li
155.293 211.06 li
157.585 214.643 li
159.765 217 li
160.84 218.644 li
164.095 222.817 li
167.35 226.18 li
170.605 228.954 li
173.86 232.036 li
177.115 234.725 li
178.308 235.427 li
180.37 237.612 li
181.176 238.533 li
0 .257572 .729152 0 cmyk
f
198.91 248.33 mo
197 247.738 li
193.861 246.323 li
190.662 244.339 li
190.644 244.328 li
187.415 242.417 li
184.185 240.232 li
184.116 240.19 li
181.176 238.533 li
180.37 237.612 li
178.308 235.427 li
179.795 236.302 li
180.37 236.728 li
183.625 238.718 li
186.88 241.03 li
190.135 243.061 li
190.822 243.516 li
193.39 245.573 li
196.645 247.152 li
198.91 248.33 li
.140688 .399451 .927672 .00396735 cmyk
f
222.893 256.228 mo
222.865 256.224 li
219.676 255.594 li
218.705 255.293 li
219.542 255.388 li
219.676 255.412 li
222.893 256.228 li
0 .74377 1 0 cmyk
f
85.458 28.5591 mo
84.7749 28.0869 li
85.2842 28.187 li
85.458 28.5591 li
.272251 0 .844724 0 cmyk
f
87.1001 26.1621 mo
85.9751 26.1621 li
85.3521 26.1621 li
84.7681 26.0469 li
85.9751 25.6841 li
87.1001 26.1621 li
.0287785 0 .489662 0 cmyk
f
87.5869 26.3682 mo
86.3271 26.3682 li
86.2759 26.3491 86.2231 26.334 86.1689 26.3232 cv
85.3521 26.1621 li
85.9751 26.1621 li
87.1001 26.1621 li
87.5869 26.3682 li
.567163 .43653 1 .2692 cmyk
f
24.1299 25.6621 mo
27.3848 25.6621 li
30.6401 25.6621 li
33.895 25.6621 li
37.1499 25.6621 li
40.4048 25.6621 li
43.6602 25.6621 li
46.915 25.6621 li
50.1699 25.6621 li
53.4248 25.6621 li
56.6802 25.6621 li
59.9351 25.6621 li
63.1899 25.6621 li
66.4448 25.6621 li
69.7002 25.6621 li
72.9551 25.6621 li
76.21 25.6621 li
79.4648 25.6621 li
82.7202 25.6621 li
82.9141 25.6812 li
86.1689 26.3232 li
86.48 26.3843 86.7471 26.5933 86.8809 26.8809 cv
90.1362 33.853 li
90.2139 34.0962 li
93.4688 51.8022 li
93.4722 51.8208 li
96.7271 71.729 li
96.7251 71.7202 li
99.979 90.5171 li
103.226 107.266 li
106.47 119.883 li
109.707 131.106 li
112.861 139.016 li
115.951 141.89 li
116.048 141.981 116.128 142.091 116.182 142.213 cv
119.292 149.138 li
122.232 150.63 li
122.379 150.704 122.507 150.816 122.601 150.95 cv
125.856 155.629 li
125.986 155.891 li
129.222 165.833 li
132.451 172.75 li
132.477 172.809 li
135.721 181.13 li
138.932 188.098 li
142.146 192.99 li
142.185 193.054 li
145.417 198.885 li
148.646 203.617 li
148.651 203.625 li
151.878 208.446 li
155.101 212.351 li
155.166 212.439 li
158.381 217.333 li
161.571 220.929 li
164.801 224.207 li
168.052 227.413 li
168.062 227.423 li
171.297 230.705 li
174.512 233.605 li
177.713 236.221 li
180.897 238.375 li
184.116 240.19 li
184.185 240.232 li
187.415 242.417 li
190.644 244.328 li
190.662 244.339 li
193.861 246.323 li
197 247.738 li
200.196 248.729 li
200.267 248.754 li
203.522 250.039 li
203.587 250.067 li
206.799 251.606 li
209.96 252.764 li
213.166 253.577 li
213.216 253.592 li
216.471 254.601 li
219.676 255.594 li
222.865 256.224 li
226.107 256.772 li
226.134 256.777 li
229.362 257.414 li
232.575 257.866 li
235.789 258.229 li
239.016 258.411 li
239.044 258.413 li
242.257 258.684 li
245.47 258.684 li
248.725 258.684 li
251.98 258.684 li
255.235 258.684 li
258.49 258.684 li
261.745 258.684 li
265 258.684 li
268.255 258.684 li
271.51 258.684 li
274.765 258.684 li
278.02 258.684 li
281.275 258.684 li
284.53 258.684 li
287.785 258.684 li
291.04 258.684 li
294.295 258.684 li
297.55 258.684 li
300.805 258.684 li
304.06 258.684 li
307.315 258.684 li
310.57 258.684 li
313.825 258.684 li
317.08 258.684 li
320.335 258.684 li
323.59 258.684 li
326.845 258.684 li
330.1 258.684 li
333.355 258.684 li
336.61 258.684 li
339.865 258.684 li
343.12 258.684 li
346.375 258.684 li
346.375 260.684 li
343.12 260.684 li
339.865 260.684 li
336.61 260.684 li
333.355 260.684 li
330.1 260.684 li
326.845 260.684 li
323.59 260.684 li
320.335 260.684 li
317.08 260.684 li
313.825 260.684 li
310.57 260.684 li
307.315 260.684 li
304.06 260.684 li
300.805 260.684 li
297.55 260.684 li
294.295 260.684 li
291.04 260.684 li
287.785 260.684 li
284.53 260.684 li
281.275 260.684 li
278.02 260.684 li
274.765 260.684 li
271.51 260.684 li
268.255 260.684 li
265 260.684 li
261.745 260.684 li
258.49 260.684 li
255.235 260.684 li
251.98 260.684 li
248.725 260.684 li
245.47 260.684 li
242.215 260.684 li
242.131 260.681 li
238.89 260.407 li
235.649 260.224 li
235.593 260.219 li
232.338 259.852 li
232.311 259.849 li
229.055 259.39 li
229.002 259.381 li
225.76 258.741 li
222.518 258.193 li
222.491 258.188 li
219.236 257.546 li
219.134 257.52 li
215.879 256.511 li
212.649 255.51 li
209.419 254.69 li
209.321 254.66 li
206.066 253.467 li
205.978 253.43 li
202.755 251.886 li
199.568 250.628 li
196.349 249.63 li
196.234 249.587 li
192.979 248.119 li
192.863 248.057 li
189.617 246.045 li
186.371 244.123 li
186.32 244.091 li
183.098 241.912 li
179.879 240.097 li
179.81 240.054 li
176.555 237.852 li
176.482 237.798 li
173.227 235.138 li
173.19 235.106 li
169.935 232.171 li
169.893 232.13 li
166.643 228.833 li
163.393 225.626 li
163.383 225.616 li
160.128 222.314 li
160.092 222.275 li
156.837 218.605 li
156.749 218.491 li
153.524 213.583 li
150.304 209.68 li
150.244 209.599 li
146.989 204.737 li
146.994 204.744 li
143.739 199.974 li
143.69 199.895 li
140.454 194.056 li
137.219 189.134 li
137.147 189.003 li
133.892 181.939 li
133.868 181.884 li
130.625 173.566 li
127.384 166.624 li
127.339 166.51 li
124.13 156.65 li
121.103 152.299 li
118.073 150.762 li
117.87 150.659 117.706 150.487 117.613 150.28 cv
114.441 143.217 li
111.334 140.327 li
111.227 140.228 111.14 140.101 111.086 139.965 cv
107.831 131.801 li
107.799 131.707 li
104.544 120.423 li
104.537 120.395 li
101.282 107.735 li
101.268 107.676 li
98.0132 90.8872 li
98.0098 90.8682 li
94.7549 72.061 li
94.7529 72.0522 li
91.5 52.1548 li
88.27 34.583 li
85.2842 28.187 li
82.6221 27.6621 li
79.4648 27.6621 li
76.21 27.6621 li
72.9551 27.6621 li
69.7002 27.6621 li
66.4448 27.6621 li
63.1899 27.6621 li
59.9351 27.6621 li
56.6802 27.6621 li
53.4248 27.6621 li
50.1699 27.6621 li
46.915 27.6621 li
43.6602 27.6621 li
40.4048 27.6621 li
37.1499 27.6621 li
33.895 27.6621 li
30.6401 27.6621 li
27.3848 27.6621 li
24.1299 27.6621 li
24.1299 25.6621 li
.0618296 0 .965484 0 cmyk
f
90.6309 26.2793 mo
90.4141 26.2603 li
90.8398 26.2212 li
90.6309 26.2793 li
90.8491 27.377 mo
89.626 27.1973 li
90.6338 27.2822 li
90.8491 27.377 li
336.61 56.3569 mo
333.355 52.23 li
330.1 54.2163 li
326.845 51.248 li
323.59 54.1948 li
320.335 50.7173 li
317.08 55.3989 li
313.825 54.6499 li
310.57 51.5801 li
307.315 50.8901 li
304.06 52.7412 li
300.805 52.3799 li
297.55 46.6411 li
294.295 51.6182 li
291.04 52.4102 li
287.785 46.5923 li
284.53 47.1548 li
281.275 49.9048 li
278.02 51.3359 li
274.765 51.2129 li
271.51 49.0889 li
268.255 48.7119 li
265 46.73 li
261.745 50.4629 li
258.49 42.5059 li
255.235 45.4722 li
251.98 44.9482 li
248.725 47.4912 li
245.47 44.5059 li
242.215 45.3149 li
238.96 44.9229 li
235.705 44.854 li
232.45 44.4521 li
229.195 42.269 li
225.94 46.1851 li
222.685 43.1841 li
219.43 41.457 li
216.175 44.2349 li
212.92 41.7158 li
209.665 42.666 li
206.41 43.7671 li
203.155 39.5889 li
199.9 41.8662 li
196.645 39.687 li
193.39 39.4731 li
190.135 39.5889 li
186.88 38.812 li
183.625 37.9941 li
180.37 37.6963 li
177.115 40.4819 li
173.86 36.397 li
170.605 35.3071 li
167.35 36.5049 li
164.095 38.5259 li
160.84 35.835 li
157.585 35.8501 li
154.33 34.5039 li
151.075 33.0952 li
147.82 36.1372 li
144.565 33.9761 li
141.31 33.8301 li
138.055 34.2803 li
134.8 32.0278 li
131.545 31.3579 li
128.29 32.8159 li
125.035 30.0371 li
121.78 31.2979 li
118.525 31.0288 li
115.27 29.8862 li
112.015 30.4131 li
110.02 30.3223 li
108.926 25.9683 li
112.015 25.6509 li
115.27 25.4448 li
118.525 26.5029 li
121.78 26.0479 li
125.035 26.2148 li
128.29 26.541 li
131.545 25.9858 li
134.8 26.6011 li
138.055 26.5342 li
141.31 26.437 li
144.565 27.2119 li
147.82 27.2349 li
151.075 26.812 li
154.33 28.709 li
157.585 28.2681 li
160.84 28.2832 li
164.095 27.3901 li
167.35 28.897 li
170.605 27.71 li
173.86 28.8223 li
177.115 29.8433 li
180.37 28.4253 li
183.625 28.3062 li
186.88 29.6948 li
190.135 30.7549 li
193.39 29.5762 li
196.645 27.8721 li
199.9 30.8389 li
203.155 29.457 li
206.41 29.0688 li
209.665 29.46 li
212.92 30.9932 li
216.175 31.0083 li
219.43 31.4429 li
222.685 29.8569 li
225.94 32.7241 li
229.195 30.7979 li
232.45 33.0181 li
235.705 31.6753 li
238.96 33.2778 li
242.215 35.4761 li
245.47 34.8188 li
248.725 32.1211 li
251.98 31.9502 li
255.235 33.458 li
258.49 33.895 li
261.745 34.644 li
265 34.769 li
268.255 32.9102 li
271.51 35.8779 li
274.765 34.4263 li
278.02 32.6133 li
281.275 34.1021 li
284.53 36.0049 li
287.785 34.9111 li
291.04 36.3608 li
294.295 37.3682 li
297.55 34.1162 li
300.805 36.0181 li
304.06 38.4448 li
307.315 35.8809 li
310.57 34.979 li
313.825 37.0249 li
317.08 37.3682 li
320.335 37.9253 li
323.59 39.9272 li
326.845 36.2573 li
330.1 36.354 li
333.355 38.4141 li
336.61 41.2349 li
339.865 38.4053 li
343.12 36.626 li
346.375 39.4302 li
346.375 53.0513 li
343.12 54.1343 li
339.865 53.8618 li
336.61 56.3569 li
.421149 .392065 0 0 cmyk
f
94.4199 27.8862 mo
92.4849 27.6182 li
90.8491 27.377 li
90.6338 27.2822 li
92.4092 27.4321 li
94.4199 27.8862 li
110.02 30.3223 mo
108.76 30.2651 li
105.505 30.041 li
102.25 29.3818 li
99.4878 28.2271 li
99.2749 28.083 li
99.1182 28.0122 li
95.8628 27.186 li
95.8501 27.1831 li
92.5952 26.4492 li
92.5269 26.439 li
90.6309 26.2793 li
90.8398 26.2212 li
92.4849 26.0713 li
95.7402 26.1709 li
98.9951 26.4028 li
102.25 26.1382 li
105.505 25.4731 li
108.76 25.9849 li
108.926 25.9683 li
110.02 30.3223 li
.726497 .702541 0 0 cmyk
f
99.4878 28.2271 mo
98.9951 28.02 li
95.8062 28.0679 li
95.7402 27.959 li
95.5322 28.04 li
94.4199 27.8862 li
92.4092 27.4321 li
90.6338 27.2822 li
89.626 27.1973 li
89.2471 27.1411 li
89.23 27.0649 li
87.5869 26.3682 li
89.23 26.3682 li
90.4141 26.2603 li
90.6309 26.2793 li
92.5269 26.439 li
92.5952 26.4492 li
95.8501 27.1831 li
95.8628 27.186 li
99.1182 28.0122 li
99.2749 28.083 li
99.4878 28.2271 li
1 .98471 .210513 .30695 cmyk
f
95.7402 28.0688 mo
95.5322 28.04 li
95.7402 27.959 li
95.8062 28.0679 li
95.7402 28.0688 li
1 .790066 .355962 .231113 cmyk
f
89.2471 27.1411 mo
89.23 27.1392 li
87.001 27.1392 li
86.8809 26.8809 li
86.77 26.6431 86.5688 26.46 86.3271 26.3682 cv
87.5869 26.3682 li
89.23 27.0649 li
89.2471 27.1411 li
.851163 .816342 .339086 .218051 cmyk
f
66.4448 27.1392 mo
63.1899 26.6621 li
66.4448 26.3682 li
69.7002 26.6621 li
66.4448 27.1392 li
76.21 27.1392 mo
72.9551 26.6621 li
76.21 26.3682 li
79.4648 26.6621 li
76.21 27.1392 li
87.001 27.1392 mo
85.9751 27.1392 li
82.7202 26.6621 li
85.9751 26.3682 li
86.3271 26.3682 li
86.5688 26.46 86.77 26.6431 86.8809 26.8809 cv
87.001 27.1392 li
.418769 .304936 .70248 .0426032 cmyk
f
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
24.1299 26.6621 mo
27.3848 26.6621 li
30.6401 26.6621 li
33.895 26.6621 li
37.1499 26.6621 li
40.4048 26.6621 li
43.6602 26.6621 li
46.915 26.6621 li
50.1699 26.6621 li
53.4248 26.6621 li
56.6802 26.6621 li
59.9351 26.6621 li
63.1899 26.6621 li
66.4448 26.7539 li
69.7002 26.6621 li
72.9551 26.6621 li
76.21 26.7539 li
79.4648 26.6621 li
82.7202 26.6621 li
85.9751 26.7539 li
89.23 26.7539 li
92.4849 26.8452 li
95.7402 27.1211 li
98.9951 27.2119 li
102.25 27.7632 li
105.505 27.7632 li
108.76 28.1299 li
112.015 28.0381 li
115.27 27.6709 li
118.525 28.772 li
121.78 28.6802 li
125.035 28.1299 li
128.29 29.689 li
131.545 28.6802 li
134.8 29.3223 li
138.055 30.4229 li
141.31 30.1479 li
144.565 30.6069 li
147.82 31.708 li
151.075 29.9648 li
154.33 31.6162 li
157.585 32.0752 li
160.84 32.0752 li
164.095 32.9922 li
167.35 32.7173 li
170.605 31.5239 li
173.86 32.625 li
177.115 35.1938 li
180.37 33.084 li
183.625 33.1753 li
186.88 34.2759 li
190.135 35.1938 li
193.39 34.5522 li
196.645 33.8179 li
199.9 36.3862 li
203.155 34.5522 li
206.41 36.478 li
209.665 36.1108 li
212.92 36.3862 li
216.175 37.6709 li
219.43 36.478 li
222.685 36.5698 li
225.94 39.5059 li
229.195 36.5698 li
232.45 38.772 li
235.705 38.313 li
238.96 39.1392 li
242.215 40.4229 li
245.47 39.689 li
248.725 39.873 li
251.98 38.4961 li
255.235 39.5059 li
258.49 38.2212 li
261.745 42.625 li
265 40.79 li
268.255 40.8823 li
271.51 42.5332 li
274.765 42.8999 li
278.02 42.0742 li
281.275 42.0742 li
284.53 41.6162 li
287.785 40.79 li
291.04 44.46 li
294.295 44.5513 li
297.55 40.4229 li
300.805 44.2759 li
304.06 45.6519 li
307.315 43.4502 li
310.57 43.3589 li
313.825 45.9272 li
317.08 46.478 li
320.335 44.3682 li
323.59 47.1201 li
326.845 43.8169 li
330.1 45.377 li
333.355 45.377 li
336.61 48.8628 li
339.865 46.2031 li
343.12 45.4692 li
346.375 46.2939 li
.883848 .768521 0 0 cmyk
@
.5 lw
2 lc
346.375 4.64404 mo
346.375 7.89893 li
281.275 4.64404 mo
281.275 7.89893 li
216.175 4.64404 mo
216.175 7.89893 li
151.075 4.64404 mo
151.075 7.89893 li
85.9751 4.64404 mo
85.9751 7.89893 li
20.875 4.64404 mo
20.875 7.89893 li
346.375 261.519 mo
346.375 258.264 li
281.275 261.519 mo
281.275 258.264 li
216.175 261.519 mo
216.175 258.264 li
151.075 261.519 mo
151.075 258.264 li
85.9751 261.519 mo
85.9751 258.264 li
20.875 261.519 mo
20.875 258.264 li
20.875 4.64404 mo
346.375 4.64404 li
20.875 261.519 mo
346.375 261.519 li
.639918 .563928 .533043 .294835 cmyk
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
def
/FontBBox {-665 -325 2000 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IPWBQV+ArialMT /ArialMT findfont ct_VMDictPut
/IPWBQV+ArialMT*1 
[48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six 
/.notdef /eight 199{/.notdef}rp]
IPWBQV+ArialMT nf
IPWBQV+ArialMT*1 [10.0001 0 0 -10.0001 0 0 ]msf
18.0625 275.644 mo
(02)
[62.292 0 ]xsh
85.9141 275.644 mo
(04)
[59.542 0 ]xsh
151.016 275.644 mo
(06)
[59.542 0 ]xsh
216.109 275.644 mo
(08)
[59.542 0 ]xsh
281.211 275.644 mo
(0)sh
337.938 275.644 mo
(100)sh
346.375 4.64404 mo
343.12 4.64404 li
346.375 41.3403 mo
343.12 41.3403 li
346.375 78.0371 mo
343.12 78.0371 li
346.375 114.733 mo
343.12 114.733 li
346.375 151.43 mo
343.12 151.43 li
346.375 188.126 mo
343.12 188.126 li
346.375 224.823 mo
343.12 224.823 li
346.375 261.519 mo
343.12 261.519 li
20.875 4.64404 mo
24.1299 4.64404 li
20.875 41.3403 mo
24.1299 41.3403 li
20.875 78.0371 mo
24.1299 78.0371 li
20.875 114.733 mo
24.1299 114.733 li
20.875 151.43 mo
24.1299 151.43 li
20.875 188.126 mo
24.1299 188.126 li
20.875 224.823 mo
24.1299 224.823 li
20.875 261.519 mo
24.1299 261.519 li
346.375 261.519 mo
346.375 4.64404 li
20.875 261.519 mo
20.875 4.64404 li
@
IPWBQV+ArialMT*1 [10.0001 0 0 -10.0001 0 0 ]msf
11.25 265.457 mo
(0)sh
5.625 228.753 mo
(20)
[5.56152 0 ]xsh
5.625 192.066 mo
(40)
[5.56152 0 ]xsh
5.625 155.371 mo
(60)
[5.56152 0 ]xsh
5.625 118.667 mo
(80)
[5.56152 0 ]xsh
0 81.9722 mo
(100)sh
0 45.2847 mo
(120)sh
0 8.58154 mo
(140)sh
339.625 231.519 mo
339.625 116.394 li
206.875 116.394 li
206.875 231.519 li
339.625 231.519 li
cp
0 0 0 0 cmyk
f
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BookAntiqua def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 73 /I put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 116 /t put
dup 121 /y put
def
/FontBBox {-136 -311 1154 1036} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/I <1C60D8A8C9B81BEA30DA74C3FEAFF068C542097E3D8028F2C6CA5C3162EB
DE0F1A72F93773A85011F97F9149E1CEFE3BAE675982C7F48DE26532013D9DD4
29B696A7499C85B7FBBF541CABB3F84779F8042F1558660E236D91A1EB7A34D9
4656F68A9C1380E05D855C481893E8F852438E4E017A874FDFDE915A509AFE68
0B> |-
/d <1C60D8A8C9B7D8BE16D35E9B07F4AA3ABC773F184EE6E3111EBEE58F30E7
4A5C093788762907EB397F545117B70EC1296402158CFCA893B8E152B3FED36E
BC67D9C422DFAFFE9752EA098BF93AACA36D5C53A4280D01E7779BF82492241F
45A36D4AC8AF6C6A73199DBE26F54AF4D2F32664041412328449449B9B052454
65D73F29B7B78A009D3DC437AB899F90B7D6DED4621A749FF3E64ED1D2D44A37
38AAA4969F7B94DE8AF8C9F8147A2815FC0785F4CBE2EE70997E006E82C0254B
9A7E6F86D0E9EAFCDC1ABC198649CF35A5DC7EBBED1C5E3BBF99F817AC072E4F
8075791A1E4D4F15CF3F8E678254E97E72C1E1> |-
/e <1C60D8A8C9B75CBB5CD8534012233D131627B1B267A3930139B0D9AA8A92
F0FCE4E7AFD311431CF43A9A551C385DD6E1190F0601E94350FECB845C0D578F
C2722E61FA69CBEAE0F028400C203AA04FEF8893BE5650D0DFFBCA997D1335B8
B2495AB693DB3A958CD3CB0FA9747B60D9A8955AC7A0BFEC37C8FF1727E2163A
214136BBCCC6F627B5031E9AA610E69502F8F74EDF1A6888C4E32F14754B5346
4DAE1272036BF9BB2B561EAF7A7AA400BAEECF1D802F90F1E3E018> |-
/i <1C60D8A8C9B849F23D73D7255A38593E9B1806D32FCF9326305AA22829CA
FCB5F9266D8DE5F7EB0E14C4DD0D3CF85A96105EE760560766A33D7C629DBEBC
66F738B47A4E100D579E6400920AF310AD0CE99182AC975696094C57E14EA2FC
97E32934310813EAC3D3CB531FB424FBDD8C1EAE9E6C55255DA16BE0E39556E9
C8BB9DC14ACDE9A6F41C01481B6BB4C3E8B9B956CE58001D9D2F571B526B031D
13D32DCB63A44C8C7075E40F45A8C2DF2E0EF0F0F1A46C024B35E6375819F35F
0FB783BC9C56C9> |-
/n <1C60D8A8C9B7F51B1816CA1D547B9D412112B1108000BCD479B15D29278E
FF207C440633A34B346F87B40F04E5E8F9C3FD06BA69AD06F44D8C96AE9209E7
498AB8729996BB695FCE0B76D992BC29F7448E4EDD94CFE81D9BB5C9989A683A
B090A7835C786BCAAE46573AD51B72F79C70758202DE28EBE70CE7666E0009E5
8B750E17F7688635342A3A4A4867D024FAC7839AA7003B6BB16E2A4C4D307F4F
8B37258A1025AA52F5F9CA647EC474B0B3E170234ABEBE6186CD896F64E4903D
F224FF80948F28E0808441F171FD8CA35D9629D9DC842C46B11E25C3EDAB94A4
B6D8C6A956862134214DB61684C934E1AA4D366FB59218F15C370355> |-
/t <1C60D8A8C9B82424A9C27E6E9DF811EA1D553D5F4ACDACB82D3B2B7CC8F0
6EDC072CE45357C9C18F37F88428E4FE1AEE57AE61253C2D4CF5DB8D6D9C43C8
368D3E08560346F9C492D1ECBDDE132A2C001B561424A0718442FC769B95787E
D1D857BE704297D20080CCABED98B7B63124151429278CE4D7B1F664E4EACA72
8C10B5C11A88AF87F05984B7ED2C9F6B2F62BD63BFF73BD6DBB861B5A544F0> |-
/y <1C60D8A8C9B7EF321E616E96933530A3C7C80F8F5F05B1D54A7BDD85DB23
97A86DA6E660C260348AE806AB6258A8B48350D63FC27986036F280A9B44EB09
22744F1B7626A6DCA59CFE678766220ED74C2D7F53728CB9654D3ED5D5C8F523
77189EB9E791BD7D8D7B940F0C9E245FA578B5945717E63E283D1F44F6A79401
CDF2B86E7BCA435F5802E051F0A7F39CF6100E72D8EC4EAA21F1CC8D47B43277
E3198D215E9C61D434A749BE934D4B3249605621ACA55895B44D2C38681DA59C
526DEBE51DE100627D70BBD823277C03FFF6545BF8DA88E64CE775ABBFAC23E4
C3C59AD0365D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IPWBQW+BookAntiqua /BookAntiqua findfont ct_VMDictPut
/IPWBQW+BookAntiqua*1 
[73{/.notdef}rp /I 26{/.notdef}rp /d /e 3{/.notdef}rp /i 4{/.notdef}rp 
/n 5{/.notdef}rp /t 4{/.notdef}rp /y 134{/.notdef}rp]
IPWBQW+BookAntiqua nf
IPWBQW+BookAntiqua*1 [18 0 0 -18 0 0 ]msf
242.125 134.761 mo
(Identity)sh
1 lw
0 lc
209.875 128.957 mo
239.875 128.957 li
@
%ADOBeginSubsetFont: BookAntiqua AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
IPWBQW+BookAntiqua dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B78E05EAF340E05925B0F5DDA3D2BF7E3ADE00218341960418
DE3787C3039EF2918052D5E9865628C603AC1CA5CA13BAA2D32A7EAB4ADE8431
2F2EE5EB5C1536130E8D1475A5B07897AD349E87BA9BD6C0EF99B7C95399C050
70E48EC35738C65187A14719D62269F2FEC062D1600F9E11B35DACA92B0C6282
5968E726C9CDA533AFE6824A37F97E4A0D3747004A0E5DDE4E1885C515AD3DA5
5E36887846664D015DC35E506564F96EE08B74122C1C30EEBAF77C475C1E5319
C5BBA8A16CA47C392C6B988DD47690FE4E7519DE9FDE5F3CBA9D997269751C24
520AC36311D980A7841915B9D48844DFCD3F67B831024A2C537FE51271A7B5C4> |-
/g <1C60D8A8C9B7EF3224D3B78041631F9D19C150B013C9486F45F71BF2A56B
7B9B54BF9D8DF6FAD32B6F73949EF9E0343F1EB00C1F52C0F347249F8DBF5BE8
A24CC49CE0A34763FEC3E783C5063F30CCC90E9D691D1AA8FAE559AE7831FDEC
9A1D6784C0D61DE2BC59171D502CFCCDB53F76BADB6AC3E82E122F70E4D81197
7E5375FA19E71F97E18A2B3D9F01AE808DFCD8C71F92AEA028068C7B0A8FE0AC
8C904DEC53E603B953A8444FEBD1FE2DDF3660D4A8CE2B955266CB5B01A48C7D
0FAD3DE5BF7BD3E475161F97FDC7139BAA73FDF292CAFE4BB58683EF1B418B93
19647A5C88A541FB330AF64ADDF9247E2EB8046CC592D7DBD967FC06410F97B5
E21F65CB018898F686539EE5DA7ABCA72E5822790712311A705361D572598B41
37825DA8A35CCE0E68A5D184B098B33D4E9CA6A540445C40D95D1E42908CE934
81D2761B956631353E27EACD3836CED69B760723AFBF216FE579EB54D16DB5A6
ABB466E8D3DAE9B8BC2036D78B7AE55ADB72962807EAC8C54BFE94C5258DB1CF
5CD7939AF05D6D661AEFA0585A94686363> |-
/m <1C60D8A8C9B59575D65E0375466A10051365C1F9B700B7BF2F2D8376875B
980D65A2E988B5187560D09F280AEABD8CED022380F008D8CF0D19EE36F9267A
BC2486E2D1A3BC37306B1D9B7792006928BA616A517BD2334307BB3D5D25187B
656FDA56961CCAE813702C0933AED88D43C442F0C2BB032CD6CFDC6488339076
3D8413A0A1A128E75C713CC4F34C499586BCAE503B979957C5F48BC7B4DDD264
8AC7F8D1B71533F86FE3FDF310E5013C10D361498D031C0D1E31BE7BDC5A3956
294CEB62B5CB65BA13445F8E425241D12122C169E872ADA11A110E2B460F199E
FA57E60102985E27A6467A2C95B518DAC7AF293893A4996A5E1D9B8F01E8966D
0699F117E2679F6C05A69A9443BAC1505BBC1FE1C38A3AD2CC962D1562CA9DD5
678E5D5E5A6A877E3B7123A932064178A8D5DD2B91FCB6F3BF6F7A36BF1FB902
FB8CE88882AB226FFF3BF7F3B2CCA75BA40D2415AC694B6B878F2F0544269F89
3C801C7DCFD86D1DB8BE3AF07EC5ACC87F89BC4229501E142149D653D4619289
B0D89547545787> |-
/o <1C60D8A8C9B799EBC1FAB6A5BCCBA2E0F3E1D45B556ECD5A7EFF104D7703
44B1C6F7D9B6946DBAF6E65C04338513B8F66AB24ED97FF96A493E44241B17DB
2475C280908440A723BC3E93813D71653F3F8A5A881BF70FDE8A36C48CE9BF5C
083DE2E0C712117179A9F0FFCE4CE5E808F28DB42624C86F00B594BC68B03542
2881291EAE286936AFC4C4DBFC44A0E37875B5503D04A100C0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IPWBQW+BookAntiqua /Encoding get
dup 83 /S put
dup 103 /g put
dup 109 /m put
dup 111 /o put
pop
%ADOEndSubsetFont
/IPWBQW+BookAntiqua*1 
[73{/.notdef}rp /I 9{/.notdef}rp /S 16{/.notdef}rp /d /e /.notdef 
/g /.notdef /i 3{/.notdef}rp /m /n /o 4{/.notdef}rp 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
IPWBQW+BookAntiqua nf
IPWBQW+BookAntiqua*1 [18 0 0 -18 0 0 ]msf
242.125 157.261 mo
(Sigmoid)sh
2 lw
209.875 151.457 mo
239.875 151.457 li
.626581 0 1 0 cmyk
@
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
IPWBQW+BookAntiqua dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7D8BE164AFA37803C79C1969111CB1B8059B5F802734C8432
3E94942E7FE8EBF1D03586CD5C93C191EBAFD51C23C601A8B3FD7AC192724128
1B82B9399E295353629FAA76D3F491A7245977FF655EC58A942861A33DF557D4
39843583370E4B6156F24EAA34688971CF1384B2A4A3C5F16192C4BE13C7061C
2FF8FC4C5E813713871026A2100AC2C9> |-
/R <1C60D8A8C9B651304E8627335C5F8EE86F2009EB4400BBB0BEE562EA9F30
9AC940B09F36B912F22E28A7A9BBCBEFA960C9F3C6912A6730750AF2980946EE
1A99EA162D070193EE3FB2D413459857E1D7CE8AC50F82867B9870EDA3BEFF8D
FF1FE516C056DF341EC0E02A6E3B316502C2F9787F5D5A4592CEFE10DE66E85B
8BAEBABEBBE215D09BD46F36B469BD9C441F469AF47315FA2D8E7F1899E5E97B
AF289FE8F3E8D2CBB744ED75D0DFC486A2EB89ED5276F612D8046F3709E0E938
5CC0130782AA3B315D39CA46CB9276D3CA004198DEECCF3006077CEC78CEB939
34A9861573E033AADB3DD8D518779069C553CA7E30E8AAE9EB409875202C3FA7> |-
/U <1C60D8A8C9B6FF86C364E11E3A12944E7B092AC088392AB5B3E4946BC5C7
7BE11CAA518172F5ABDF2F748A0A915B903F17B23F0433F36F5097EE4EE2F344
CF2FE53A2AE8D71200FB1370BC42BAEF12FC05078F61F9939943D53C5827A79A
984649F9AEAF9D7554B1B3C956ED67A092C480CAE6A57161D3EBE05FE018628C
B8E65E8B278A103BC1196D94A697C55247AE231DA0D81BCEC6BB3570CE6BB8AA
F946F7048A3805ED693A5CAC572FF8AB877712B68419858EC1F5BAEEF28DFF52
0108E0BDCF64B66A74CBBDD30ACEF41FD032B2056CB3F0E5B940C903BBE1287E
343256> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IPWBQW+BookAntiqua /Encoding get
dup 76 /L put
dup 82 /R put
dup 85 /U put
pop
%ADOEndSubsetFont
/IPWBQW+BookAntiqua*1 
[73{/.notdef}rp /I 2{/.notdef}rp /L 5{/.notdef}rp /R /S /.notdef 
/U 14{/.notdef}rp /d /e /.notdef /g /.notdef /i 
3{/.notdef}rp /m /n /o 4{/.notdef}rp /t 4{/.notdef}rp /y 
134{/.notdef}rp]
IPWBQW+BookAntiqua nf
IPWBQW+BookAntiqua*1 [18 0 0 -18 0 0 ]msf
242.125 179.761 mo
(ReLU)sh
209.875 173.957 mo
239.875 173.957 li
0 .993286 1 0 cmyk
@
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
IPWBQW+BookAntiqua dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DA26D338A6EEFAF8BB2FAC63C743BFE9A5A80EA72EC22
660F3E4A4E885B4905407C31DEBC559084C6BF950BA9E868F8A4BB47279BACFC
6372A38C14C6D5F73AF5937386D62DD6E9221F0E422578172B23F5401A2EDD27
4458922B3E129B4E6760F094D6F7E148B510515C089E56F76AC0240BEAC5286B
C25179938A46897755CC1345E96A1D77F361C6E9BBAA16C1223DF11B055C9902
F7812886C2537E2837DB54626F97E68F5BED5FD22CAAC417C92B7ADB5C1A34FA
58EC3DDC0F438BD5644A08CF610B8D809EFF3FAFFDEAE45E56C23A4A6DBFCA6A
FE012169C76E636CCD336FF493> |-
/k <1C60D8A8C9B7EF322B4008F4F8D6DC9FA2CED93A3DD253EA43AE99404035
2CA8268E6D675681356509D70AE5BD11A8EF1687C7F472DD4F35857F5F1573C0
D557B53CC08059784B8FC61DD6017EDAB06480149C5EC3FFF010FBC9E5AC3EF5
4606478176DA92B154DA0E46E7A1513B83AA9B16A6F2E0CB2353B7BC1FA7CE57
2054B4E2BCD62A810C35B313B25747138DADC65ECBD82BC25CFD867E4B820798
B60348AB329178147F3B5DBA6C4512466A47DECDABF6E287B4C8855F908A059A
C9322A3B130BB24CC3A8FB237DDC4FF9E8CB50> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IPWBQW+BookAntiqua /Encoding get
dup 97 /a put
dup 107 /k put
pop
%ADOEndSubsetFont
/IPWBQW+BookAntiqua*1 
[73{/.notdef}rp /I 2{/.notdef}rp /L 5{/.notdef}rp /R /S /.notdef 
/U 11{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 
/.notdef /i /.notdef /k /.notdef /m /n /o 
4{/.notdef}rp /t 4{/.notdef}rp /y 134{/.notdef}rp]
IPWBQW+BookAntiqua nf
IPWBQW+BookAntiqua*1 [18 0 0 -18 0 0 ]msf
242.125 202.261 mo
(LeakyReLU)sh
209.875 196.457 mo
239.875 196.457 li
.0618296 0 .965484 0 cmyk
@
.67953 .634058 .618097 .562646 cmyk
%ADOBeginSubsetFont: BookAntiqua AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
IPWBQW+BookAntiqua dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7D61BC487525B76EB826DA209E599588F9271826AD29E7B1B
470F79ECCDA29092A88DC7D61A115FE211D8DAAFB2D11B3F2F839A2A0A701A0B
0BEF17A84BCC5249F6B2A2512E0DB0FE1E5B0A45260BCC3198778469683DA863
347883A81EA5761F2665FBC69EAED798D26226465F8EB3875AA46DCB2121107B
CB1A8023A1BF32082F8C018EA1D31FC89288ABAE9FA856854DC900851793E635
2092AD15A83111725E73> |-
/h <1C60D8A8C9B7F51B18159B5FF63AD2E0D7D679B77B296A725B57466BC230
50324AECE33E7D9BEB52BA8A103C5CBCA3B7E27B8C75FAB40CF9B8EB7941E549
5BD10F3B2FA87166D6A87636CF5BF95357F444CA45C403C108F0F847D2056EFD
48E51D5D3A9FFB4F092FBAFBC337C7391D6C2545AD8E3C2A2AB05E68F63C6C29
6A9D33A2B997CBE23B2A044B6CDADF96438194BD01696EADF3B5CB84C50E7372
5B32792A405AF69F89303DA306BDF349E70808F084C466BB339A966649FC9862
0E613E82BCBB91CCA1B932F3CD7F310FB6DBB28A75A8ADE4E525E64841A61BB3
C5F57E81A0F2F921641E340A4B6D9B09FFA37795DDEED6056E3A13539929E6C8
290A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IPWBQW+BookAntiqua /Encoding get
dup 84 /T put
dup 104 /h put
pop
%ADOEndSubsetFont
/IPWBQW+BookAntiqua*1 
[73{/.notdef}rp /I 2{/.notdef}rp /L 5{/.notdef}rp /R /S /T 
/U 11{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 
/h /i /.notdef /k /.notdef /m /n /o 
4{/.notdef}rp /t 4{/.notdef}rp /y 134{/.notdef}rp]
IPWBQW+BookAntiqua nf
IPWBQW+BookAntiqua*1 [18 0 0 -18 0 0 ]msf
242.125 224.761 mo
(Tanh)sh
209.875 218.957 mo
239.875 218.957 li
.883848 .768521 0 0 cmyk
@
.5 lw
0 lj
206.875 231.519 mo
206.875 116.394 li
339.625 116.394 li
339.625 231.519 li
206.875 231.519 li
cp
.639918 .563928 .533043 .294835 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/IPWBQW+BookAntiqua*1 uf
/IPWBQW+BookAntiqua uf
/BookAntiqua uf
/IPWBQV+ArialMT*1 uf
/IPWBQV+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 17.0
%%AI8_CreatorVersion: 22.0.2
%%For: (Harry Zhao) ()
%%Title: (fig_Snowball_compare.eps)
%%CreationDate: 5/15/2019 1:00 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.f6[#/Z2f3RkPP/e(-/-T[Z(kbJADF/)eWZ4CbX6<B!%JZoB`B-16N2WmBcMXJ&WbA\oMq9FdLhLcHk+K_.`P5TDpuo9$sV:
%3Z^MFV.-?B-@YN@gKb]QnOn;*81GL4%3lRX9[i5/r#/3_O]XY9-:rrdj5BW5KV[%,$t"`p($GPgPb5(H_S"2JQ\G6G/hAfVKtk4*
%e*HE\\C*NgjsQAg^J=BaDL\b%LRZUjTIh[Q\s)H,GU7U'T?kRECc2&pGL]Dllc!<giWn4V@B8o.2k'6k>aT\9V\BdfdB=8?afe3u
%_9I;[j+Y]+SW'9"R1@+0@0r#!Gf.kkpLL0_"[BEieI!u:^kCOR$eN]^26#Ns8.oltVIBl$*_Rm?i0Qhe9r2?AP):VrOR;NR&mS)J
%k]eQt:Sbf[Bp+@mPCT'@MFgXoWUKM?ruNan6?b;UceeU5El*2Ym0[?Z!;J35dAK5jil-7n\sRS@4;&f)`Zt"P-Co[jb%I\&?jUSV
%fo%%@rm)2VYKU^7mgaS.j<Z=X>,/h5CT(?o,k7p[l#&ZCKnn=e8d'@(`lu)e&,6I@6g92lFMC6W5Te.Lf]'UqI.Jk]Pk3!8P+Oa/
%a\[N'lJ94"W)^>p.bVoG<m:WGfa?Zn)1?Z,"P:J<SaTR58rE#aS]68Rh9Xi3W,O;Y5#!>%!%pVpi%7YYVfW!6P"M?E8Q*Qg;I1Z"
%lt"'C1Vd`3kg:Q<AqNht;o&u$:uV`fKH]k/$!"5:['Lp7!$a63,En\(0H)>hS"rhYp]WB6!gj>p;,iu2JVi.[-&qmM'3%(_`Fq?J
%Lti#/?NDom_9ngj[E>/`aE:.oqgJgpEn27*YeQpRfP([*M$.,NY.EP8.[H(sh>I"]ri['O"BQb<$j0iM$2Bra_q.4@qNYLI42\k7
%$j3[g%)0l(k]V>X+p"/Z'(B*L!LkAJYZW0dEDi_!1i/@N_`!TQFF-%XS#+T<)>jVE@C&9$2CfL"Xb?hh;CK==*!`Zf>U"`:k;_+E
%j7#b[BoFge#fFS^iN:ONL&nd$2qSPe"^b[o8=)^r^'9FGYHSH]$GI_<-$J49+^ORPIY1&)=4e7"(@E(R"^_l/n,rS+dKQ=RSmi+9
%1IrF3Kl&dZr[(2C+ceXCH&5Z-?h(7cH;"<.+(L)b,NL.J8PS\=fF616?X[#<OI1'99b\TF!1Q7m,tVUti0tmLn.gD)"CaNEY9NQ,
%-hn%<5oS]4(+*&ubZp)-KIQ-e6=/(c8TYe<b^7tN1Jd!>VB-D$ON4;.aLH.[Cq,>o&%7#l8id:c7(6[KnRY69I"fhLY!X*^?gu>0
%'t/YrK%hS'QRiHL&&Z2O/uc1Q1m6]=jKZj8V3$X(OtGf[`XhY^6cR>;a@h,IkelW%AeKLH4mi;Wa8\QgZ(YXO`j3Vn_Hh-E+')sl
%qXH`,G0,%F4-Q&.fE'QFaT`GR7(4]#,[%i*D2Hl%1a#O+443F&9-eU*PU4D\@sfdq8U_WgV"c268(76rnrEadOWFF"hXNgLHT[=<
%;VprYA.jAnhXS@F3/XM01A$h+O(Ii-jW4BEkOEcX*WH5N(Q8&9jW4@OQ10"Z*WIAGJ"iQj15)i5^A,>4%DP7Kku])Ek;Y@'s58B3
%1!+H@ZH/o+7JIt;,$ih"_,8G7B=iZn)f@<l0o6_9&-#*FV;$nPld/G+Glka%ipE_PG[7s>60!0.42o't,);(rYp5DHD\0+X8b`O.
%U];I4GRVO#0q*fJ'0jWhnTYK??UB8+48_e8_4TKeP*=s/BUAd,n:cS[iP/hq+s@IJ.A("s"ZFW&P?]T/MBtdt+NWU]QD,3%SRLP`
%4:Nqh8FR,'Z7,d)UXM&Xi$@PLQ\HV*#/FcZ,R7\m0.8_S-P9Sh=a=(Y_b_h!k^3DYJlbPn(a(OQY^I;$-=Xd#dX]Le2@npe`=s<t
%Yo'^a&l@[f.YbQhO<H:8J'b6le]?^A@06g5N2lH/Z,M46.7"*Y3.@bu!'pf4=?m.h+]].5n/c66KgI96QK$geL.T2m0j]G;ZR&IO
%d[53n)A+//)Z5A09OSnq/kBsNUEiEfN>PrXL!k<GK.05tj<^t7H.WR*bS#hQ9#M>sN_M2Y@P(u#$$q#U3kU33QAe,Z$_/UT-HSi@
%,aM$C_fnL6!e3P,fCKhV$*_7A_#HCaPG/j+M'D-Q(WfgZbS'is`sY`<i5[%[1mJ-t:I1]l'`Ofq"54S;66lZUJ.oPZ3_,JZ1,#N`
%4JE"$+=WD@(apZb#)Z+u$$M2J*]=YM<Q)tRGO-MAj=*uh#8eNiORquTdWm;C#f&b.15-NP,PVb5$).r:7E$`a`KK.(j:O6U8^Cf]
%JD3UX+>MLU\26N:NV-!k2ND[ADMcE<;cI`YI0YW>=A(rt//=&h)R8-Dc?%)"5b5b_,:)==*WI8r/lH[!B`O;]>\A&>+Y)3,&X4hN
%HKES<8`OUEG5)YHc\e74Vuib&7=_DZD)B9uQsf(Y/-4[d30-%*`+W)DPJU@U\kPf:X&^*SZm'Un(*]1uC/g;M#/W`fC/PJI3bWRG
%QtUK&^B:s1Yj*E;334SB:26Oi"A;@f;FF@a`:#-"4@DTIGY4KF`Cjs*PAl(:%Xpq"P5#sF6q&>_i'^_gY\QYJ`]+&j'p!F1eROr"
%jc8+0G#V9u']dm\^ak,,UaVC>)_m/B-oeVhTuK[sGAK%o2/GT'1GSNt,&<TLC2?Mj[:D!e,<mFd#mCP<-?)C1;2J`.gSmm`3`:nC
%_uP^Z:.pV9_d6&j="KT3J->k,4hFCD8/h,Dndl*FJj+a16DP4i2@(P)Fdbkt--T^.3i352*QR#j/SX=+NC=cS,a&`)-q6oWrf\=d
%67MJK9%5'hV)jiORXskA`[Q9s/)(-f!Iffq<g5U4>i^/snMLS)UXP+1L_6Li<!6*2;*coJ:/^6hj:7>>>2kQi]-Lr]\`?O?M_MKA
%W_uF-,HC*9eg!j9Uq*:@>8g.rpd1)[3eE?n%ekuN,n*`#$\jjYVt(HR_!Mbm$@-?EQ%EAe,iC0%g5e3*Vr<+bVBmt^W\LTnQ6\'&
%RYVsjOpe<=%oO?<Rl8ee2UI[@(e=V!"2e;tc(lbeN246g$Lri#qZ,#PUr5PknoKU=1jDeF>gQ6"1k#E)`9osF.>e5F9OO(#"KC`o
%*aqI#6&ir"N27hS9Z`l]P9=bs"k5p'kE.5lU+31U/M"e_=9gf?[Zbe6H:Yu"pf131oWBr@+DfV&o9)O^.R]-R2O(qOHSFZ:6<.9E
%>38ol&Eb@(iX04=<$D'dNVB4,'EKGN&tQC?1`3CP2+ScR)S3l>7\j6WDa'3Jh9a20bV3S\?mVC;DFm_M8]S'+K>EG_L9)4(bg0t8
%3`[8U<-8oh#tc@hPWOC.JJP_g$tpb51+A5^qZ+Ts6l4.+Y#:4F$V$S]:s=_Z8I=3l9Nr.C9aZ(Hck==:Pn\40(;[4i:>o&>r[Ko9
%\UR$YiYrL2*K,Q7KOBb(4EsJWXs=`;E`kqI-#Uaqg8VRBkDX6elQ2LF/"$Du5`"`/WAbRqYc(76i`PX,Z@kY59s#!H@jU5[2%F;-
%"Lfk:(F2eTkQR7/Rei+ncJaTr1`\i_<5mUtX&MP@3fUg(pr%tIP5*$ZAgSa`]Q$>$Ad5,%$I%-:S]'a0/#7tiJ]/X&OTmXE8NC22
%?;QW]Z?dp67Ah7^KPLX2MeQ75@iQ<.j6r^OE/;Pt,!f'mO3'Wu,j%4XTdI`hVTS>GJP)F@.\iO)a/0F8OC\t</5Ir'7GfCB1tYBC
%+KDoF2G'=K&2asrYlto(1?^NHhaJ2FHDhbBOpU3"PF,?bQk11U:;X<P`_k.l=e&)p#rJ@k:_Fr^iB^U6a=*AV<<eHL#`h:Q0)cSX
%C.j`14'DPb:hk_n%`*>l>tf2]+d#YX08A_FL'*,4+[W>Fh@]BHJ]>^'En%1d\<;;<1d[W3MA=GRYT]4oFp<"LO#.>r/u/MTP6F']
%;bU05)0/X<:h`AmJG^5s%m[TH6GZ9QfEQgo!8r29AtQT]#4%?eafA,M@><!jN8ZB74S-qZneb80I#f!Ti4i6BP:R<>/a6D8EbTbl
%&D[M%*&[oPqN,Y1mu%M$EaLSiKW#_BaL2/((fsVIA3,`f6LHN\C7Pu)6"D^hECLVfM9rN3Y]S6)('tII8j[b`h*^)QOu0LDs1o:E
%%#m[D?BhN2s5@<1,Jg!`hT-pol?5VBZ'gK>@'PPZk)/'8:Pa-B`2]![AOJhLN;jSd'NYMRp_"Ima<Q$n7cj)QacR9>ln21nB+]Pb
%\j.(Q6;c-TFCRXQaJo8EGnl_]QTUi2V[VB8E!"sr6:*J`7Hu&YX<\UU;&0Vm-&WF:""/>E^)%N$QRi`^;i2>_/mJgA@1jNH&R'T]
%2ka0UgCVUJH5=;_7"H#BQ)nQF\cA#rQ'=d\akO'34sb2U2oa7t?(a&7of,<;P3YRGjRBA[]9MD0_C3j.W[k#A,$SVB+Sd8VN=6'&
%$d".mpjrYt7IKq,r[.5fQ=PNr7[,9k&CE/9Bh=PHdt[7o`a^$OVa=!PVRCIR+Y5HaKdW$-Mh7/P$-X+=\"nf-Lo8[K\6]1n+%"R_
%S(`orHDV*LP#%C6$)/Fh%1AF*dk(At>4'q+:l1E:)Vn.U)bWbkUp)Bc;aNs4R>_^raH=;jgQFUp:l>7GGA4ui../%<JQO;QQa'hq
%>oAUs^joT<^r;A/XRiO+=Jd?j`(t@];6g0Am9p5L7MdOU^r]JMam9-b[_tpTE'b]lNbo,B3%^h*nJt+TP,^!L@l#sZYmmV^DWP.E
%Jr)Hq57#dXa[l-s@c3/b'kh't.Aij4Kp$J7@3PVABdSnMdeLh]\=SHcZG9(A('?@l$'[:-XYf!uCgGOX:5X+to+2(\NDCH0'Igq6
%-utm_BuC\8.ZZr<0mb&5<ZSMToL/kJJ'kZ^b:tT4_![%R,YMnH,fb1Uc#AAKZj!rdKiB:RD\@g4`BB-s&q^6tfFei@Ffq<1'NN&D
%`(J,ZQUL:K<-TPB:8P>C!\YZH!u?.%.I]I0*>o3T'P%$QS0_2fS8/(7:TIeR;^"rU%$VE\h+;:KC69[SP?&In`8s*qGuC/WEKZK"
%rr>h%Z5A_1KUes&@O*g-db@=0MN5&=*D9h]/1rT3N^KRu'ZqbZ!(E(`Pqf!-&[boFAouJTGRP6/g:OBJ4RP5$``OB^OpXQf-7:''
%O)L$$\&rlKZ8\MEAYAD]&8e)m8Z@DSYk#5^h>Zceh\EL+$GJJFefY+#M:"p/A1Ct8JTGFk,ZSA$7;L8M@`TE%=Ak8ON)X)<,<QgC
%=V18RWAl-Kj-2+sZ++<ed/!c2#5]WN$TPJfckqOa"+]>U!05lSr=3(%E?iCJR84Sp(EBkIe:eUcMR4\^=>H0FEtG^/>@^.(MrC'\
%#;-^0.lP["`'K*rUC=4&j2=T6hSn6GT*dO\8k;]tA(9'-.IKP%gNLc+gUI)(,mJ?['(4V.a=#XXqFd3j"*PR]0&=6].:#j2$RMO0
%$l86@bKK3,"oY'^^D?CUP>KM"O>:Y4fUJa+?)&+7Pd,b1<qS8N)Cd"^c__u>-09%65UB3[=>A<+dXAV+0Ue1"SX+4,K-[^;.6k">
%Zr_-GJ!ZlL2/G"Me&#.3(RrGZhlcc+7FX$`dc-ofcVe7J8sSBbLq>J_^b*pma2332GO*-Ud!0nZ;j^AChr7Yt$bFpK=6miI+0R&A
%0^7fiHG8C*UY5Bp5><N"ha7'5*cAHIQI`qNP[[0`MdCVL8&$Bl@5Pm:%XRn/IPMcmQ6QAn3p;$Bo7H`AY"/@6Ttd1J:&'3.(VHsj
%cI^8-C_1IV]>Aq2rEbO3W:(&m[>Hk7Vc54-qh@=crm5:doK?I$+Al)%$bk+pK3q\WIQ$CBLJ`MXhH$DnJ<-jdmXU)C&tlS-%Of&:
%c:8-2eV%9^8#K<K*ISufGQCXR4H1s0h*,4:+r9RL"bE<=rrQO?d@N$6o<Vb)3;J2!UnUcaBRdbk9C,RoI.>\5Cbu7'-g<&;s/=hG
%biYtin?9fmT1&o_f`>t17&Sj)6jp46#V!?PXI%kjoeO,Tf6k+59H261k\;O8]_nnd?a'7gFF?cXQmhfJcj0,3^%M3;BJKUW&Y774
%3rhUrm]sU!+H02IGk$"6'u3!%j01W@_D&nMQ`!fONj;1t5Z]LkaJu&X@fEYgodh@2b*Jb*&VXm)h&\/ARmA\Rea4[Y^++##`?;1\
%2H@:^Bf1k++Fp,S#/6d^DeQ(eBOI>KnpT![A2ROare`V"';uQT&j[''jp0G]&+X#Ppu;6k/c]bIKdkC$hIIMk@_c9+T!%AH/dC-s
%46[r4FSTTW@L%s4kAft'E\lp:QgYmP<[6C7U]N96g[K_61CS5_S'NCNk,KB_@MARO_<B2WquJT`NGi*488AYuC\aR:nDtBo`a@0?
%-\'phbUHbUa0.PubOq+GSDF673l1JVaO-5arAgr+bFEaoi[goslSU0j(6u&]6C@Y:'@[-R>LNJJpVNB6s(fI>!)QYqVC_uSJ5tL%
%l?7=_&5.u_oHo[i$CU;+!aSHARZfV==;L&b7<S;]5P`4;%d#qR[*A>H^iTM"%o+(W+7R7!l9j*4TQ?brZZ#>=DA28p(B,m+Eg*ZA
%TAlp0?M%6D[r[%]s-a<oV$$X2C%`o=R4hM[j*#TlCehRJY&K7Na;ri%?pJFL!M>T/@7,M:A?/MaMAC^oW#*rQf=s`VeKm;MlHhER
%\j4"2L\S'`0STXu!9Xd6n`E/ks#7]pa4?VbonWB-`F&B-[Fngp:\,5RfI^Yei3*KC+kQ7&Fso"c_#Ot8_.#ChTB:k#Ed2mpT24P)
%%Bdm9eCW%nGc)RTXhUaHq.-k&b$``61]_qmr<_BX$Oi3lZk(`Q$+%V[o4O6oZ%8JH<`n=-G/F6.(7KW;&L;>cIhNM-q*E:C_9cMO
%iJ9_u(IF7;%"]@)]I"-2Z;'Xl?/Q.VUYZbRKl$`,bm"1:ep=^_(#,6S(U.ZOZo.2&G[rg4bEgRf*7^4P7]^QRlWBImf3klPlE:Mq
%Y)LqDo7,$3\'kar_JB]A(VT'.q9onbg_rm'^gs;-jCn_/^rkh"SPCPABpqW4@J+;cM37<B73tlh7%?lb?`4[,:/\%oR7bF3Y^."r
%-=ZL%78lc57Y)Xp.\90Wk[Z5>VGe`kTVfhA.`P:YP)dT2,]3%o;\rn/M'MoH?guebq"+Z;qq!8cSmJ&'^6>II'6*IO2glSE6L]5B
%G4N[f'F]K\K+[@Gnao&6q?6VTVOmWS;c!FgWFp$Dc_T#h1*3?'8W$,:Lb^;O-PLJT#&&e1`u0Vj0ha&$>*524F=bDLP%csC1$KAS
%IUPX5W,r*hB`&6M%Hnh;l9A$lllSrMr#\X]iZCmCnfLSSl5ra6SQP@\/G2RrZ/5LdlKuN9s*(HO'C5VSV>_PWlQuSYZ!QuC*U>$O
%WNk;1pq=;2XPUG7YBkF4,pEIX*U3*D,%^+9FAh7CU7>P(2GduW[\j>!h$LiJ.uOsbZZg6NoT(t"gjJr;8jWLD_e("gjV=:sb]_0>
%ej62P+`B+?2q^!(8s/lm?Hn"+rBJa!TJQPMAe7A+V<9OiHTaDekm+/>nE["`g!^]8_EX-[d42Zi"5p+V\LlP*EE_hV^=R>?YrQ1,
%giEbon8qsNR1FP+rm"8es.2ttTL$*"=p^t\HGqP6>?O8UMXCCU\iCB;<P/6L1`6Ss9Pd.Um#s'>QdoFsXc>%24L8V^c`XK7".l3o
%Jd_M1[XWHJCUl14YV^&R")^PD-XsF3If3X"Wnn"E8X?[".DSiSU,RlU2V=jDIS;'ET3*dPR\?l-F>E<Gq11+AV5D:4MSg;t=Ympd
%X@M+'KXYM1G,5$8]C;Lmkc^>Rq=Ho8(B,h_gs,M'rj5HICqGn.s$p'GZg>P:%h?1ddFd(#rs?:<#lV6ko7+rJQXBdhmiUEd)pDhQ
%)>4$u\8gbIpX)(:40]F14d#c2\8C'.qmR13QS%4rqJRN0#t1)V.#O]sn0im*e.$]52qo+);UbXQ3gk4DP+ZOR`.`&=rbF>m%;erk
%[f!<O')87"Hu;ASDnZ9-<h97oiCD\X,'!4Os-bVDq9RW>/bF=1m`'`HS,nAZrsClcr2MgY!SA!G8KWnMF!.>XD!@Ii2>W/o<#]C[
%Ul2.GjW#>kES?'BFO:;3II$OiU:]?;e)b8SStJ35fHq2k1N>G*PD4F@Hh4Bo3:4VY2GU5M6(U,TD>GjR)e.Q<-oQn10fin&)\%Uc
%\ONXRXb?+Y\`i#cRVuUk!&XZ!>OuJi"&n.RH3N$Kja>TZE`<<\793.Zf#A%i.1O!cJR@ubTD[q:s6g]Vjk9$\-DQh_8l>sB`Q0&m
%3OqJ#p1JU&11gT5qLq_e!3uh<5W(VRd(@Q"b8%*S=rObCW*4CXX3kX*1@!#2cQJX3mf]bg7S-1OK>f5_NDBjp9NlNC&sHd642=$G
%caW"F^-TrL],W=J`)][eokJr%f7c([)D7^ii=S&N^irqg]AG#c2C563A4=nSp^,hbD2M>-+m+S\WMX2UPrMJbdiuoYq$<P4dQ-uo
%PA`:1N.c"eZs6;9IpI7%M*dg;i"Y=o*bM02E$CHT;*gs&`\uL3aT*acPZ.[uj!XTm3t)oMd[Vs\OE>T4Q>lpkT`*WD%GrXDN-K/H
%#\le581$(kP8=ugZ+\q57t39t!)%sNmXLkGd^ZhMA"lLo;HnR1J93%6-RtQFm<'f4=^UmTYLi\[[%<j=k6J\=EnVp7cH6#0_d8n6
%`=XIDJNt#kbqFjXL*HAn![lY*WO\k1?7g[tgN&M3af1/"i'BPt3uF@Aa\&UAAD",kkk5`m`6cUod]231arupK%J,IDNQ'-rJ5I-7
%mIMm1/sTV<9G*#W)$-uBCK[V_8^e8,6E:=I0jEbjPDLPDnUMm(<B'@0qnH3eHukeiFaBi$;k+6nA>4,(P\In:@0&cA._fWOOIOJW
%6K@BIafi.1(koB+-&d.N1hUT&Q&KEu*%J1#D*G#!-VR?d9mVOBX0agN:/McYeL2\V.V@(-Xh*ZI@d[u5(/L&)nRrK&MH_T#l/+!c
%=D*F!4T.rsGLXVlTl8fQG89G"VikX[,1P.BVC:BM;m@1Q*Q4s.HhQ9oL7Hd*D)<u3(Fd1sB^+E4\Zg[R6$<QVGZj),P5,iQPN5bT
%_8t,[?P'p<mVK6M!jbtgDX!QcD..du*8r"KP0U*GQ;$%@R*sI^I%^a]TBAf_Gr,]ToTDbn)XaA<D=qS`OCUCI7DqQb;JDR[9efUf
%CO]0h#XR[DCh^=-`2V#dr4cH`Im0'43>H%7U*qdbZA4+MVS07m7`'3#4\1tl<5\&dR7E$IPha[C$75GNWDCV]--JN@MV6K,fV,!"
%S\\P-F()ip%#k0BH8ApqG29VFH:=++9CulRMb);K0MhW'S=&VH0=p&R\tpZ9I63"8LHtDA'k'a60Me*Ql@Zh$E]dOtJ.T`+K/[\'
%K&5p+@^DIj]kWftS6Nin4BM+qX9(M<>i(jHK3"g\la3@H[$,KX'-)*`EKU'2?5"u1P9=^-5^s[Qn9@B?N#MYA&Qu7QE'gf,f5S+V
%k6hY-"7\#h?gCjEV^PjV:6g_l<ZhMK0A'Id!d^:g#4$+XQ<"oV+Rq6I(oepNGbj/k>F]ph,meIo)K\o%2Oj#T674!l1=i)s27C;#
%eT/ABb3%]1LpSA(O*pE'0F-_p3.:D+*ZN?_s66/_21DLAq:B:h`?E1;rnNro.=bgR!qZMJ+e\icSG9>JoE+Ve`T8@^a:2Ph!J)gb
%W`V,31Mf&`,4[S"#EL[l8,+&%K%?.R,4_YfL-r"rMsomi!YgS8beLk9nC]c:aJ-[&U"/H992#&qAg@>EX61Ygm51jiL2`KA)?8Mm
%j_@Imog[:3=g\:g1q($88sZN7fRC(BC_<G<7>ptV\YZ8t--aqP"el/\WGAHcT[C(&T5=]a)\Nf`4!D)@KgXl+N#(0%X'5FP&,@'e
%J9CVc3\:\(8qJp%iVb5jb8:V.!_2(("hn?M'c7p:9.L5OjYstX3(8?UA.BMF),4(4g5&'pXj&$i4Cg*lUXc_e23q\8/gc!,=[nhu
%q@ZO(ec*A&E!=G4;t1"]["((,(dN<jpuIhK?5uli(+i_u>DsPZF"g`&?ZSrUc_R,SK'\:,EZLa[4gc17eB3A]YTlj7(hFDua:3LU
%.\/_B>'b$J^3hFdO!kCJ)_qRB_7[M%@(4c9]FEf4)QhN,YEa32C>H11W#B+XVC85"l/@/g<Z2q%'eD2Rn?'P9&@_6ZG.lRH]E<UC
%qOVOEdXc?;`tuY(n@)CRa:kqbAOk1dD3h5^'B:Ea/]94=%XNY\5A_OO/WNqMpG>OQ;gu?VdDlH'+bV2lYjb(r/$P^DgB&QQ'*+^,
%S=XD9@N0gHC2N$g+Jtk\g'/QWT\5X0BL5!1]2D^hZ0ME"Qc&4k5+c[bZj_%\:0<uRjkkZ=;8NGp+>d@lD:50r?)cC0P=A.S>&'CE
%9Y,l"QY?%i$*kDrUoe$_)!E+3YeJN?:rF9+=>0L0]UssdQhIgc1B?0+4&('=P(8hc;5X`M8HAUOX]jiee8'-(EC3u,DJ@[c9d\tj
%2)Ub=YZaTHY"?O^n/6VOXB(pg)++(T%W*=oJ1HH[E@(-MZ]_8@$C@+hJ8Q_FJ[&H,eEd]2fbm.PDRQm.]XC`j2`0ONa9kf0bpB^,
%Z9WatR\BCU35"H,Y7?dd>5kW>eXf-3fYl.Z!dshj\>),)Ll8$obG"\`oS>[*F>8"Vg-`,bQPL@6IV3'`2ET82*c3I'bg[6>8Xn]:
%?^9$S5ga:D=__i7rln6SX^?I*[Fqk9rKG"9%kcsH?"T1l@PP9PPqI'Zj]&W+)9n5<KHAkt<3*!COb]&#\k3N%Bq9-JjZCD%2Tlf0
%NCs&+lahe.I-^+P=_H#t#XWb]#u@XCQch4+X7V4[Ieu4WG[:n@:V"47qsV9+_Z*aaLk+)C&ABY"kVa0ZQPt?(rr<mfc3^s[$@He!
%nEW6,I/fdg&+3Zki^f@+3PLG,ndJrZGcq#ElN\NE?M(Ytfrn_uY@m'7Sk5JY_QOF(q#7+^JRA<</"=+](>shk!BWMY;pCpfnB$.\
%^YT&HAT*52JM.&Vb&LL+O)Gm).<GZ10,6t"q^DB":lQ89GMskC&>mfSY.tF[nEU2S)D6GMIspfR(VHR(H$\*VcrWn8)W6p;:R),h
%iTpI%n&.k.0eE"c8I'HG>dG$>IMlPad;Y;_s'<4H;Ed>JIf%tp4]gdRpuSWfMmYG6J[gI0#p8c!,S4LW`/lTPR;9CtHHhPDD<gQX
%^HDskO@pk%7c0("nFI#n,/X0>E1.5.1'+l%2^E&b_M9dAKRrY$r_[gg,lm?m*K\mh%f-do%Xu.oUj?eui:lb4C@'#,&N)W-9(bqF
%3/NkHJ(qP.0lJu_WgnQf\RY(4Q_&RRlAQmFI$*mTO'j\(^*n9h:P!Qc/b,5NB*P'bn+.s2dO:sH#1PTaZ\engchNitcG.ud3EL&C
%'"*2#0Y42nJu.coQ2A8]-\J6VGEZE>li,dk8&n[g,+)XB8WcZPWsm_ij^s4opAch8,c>S68<I7c-;-"!>X"Lbq&)\<?boibqFWp7
%n@:``/h;oZNsr/Dg9^AYaR^dH&#X>QMq(,D$bFMWEYBcaM7\,VA9@XdYX6)s"iokOBIJnq.fd1FB3T.\(sJ?1Y;/`WiF&hHmBNX0
%`)6F>^G3_*olX:g=AbfB,A$kDE;HOfiJdK.KO[jS+c,,f$n/;U+Ge4A'u\TF$HsT:G7abCVdCX08I(?_A*JRlU@nB>iAW.IS#=?B
%'9D*D0Xp\(Vr4C*<-#iC3'?XI_AOi[&2$#r,MYju`L_tl49L6*B#lad]:?MHr_dN,"DVQ],'`Fp';>+iRg?coIY^NJlmJObUC2[D
%2K&n:RH+[o\T/;+qB8/C4m,m7,38YEP#Opo;RpRt89;$COa/'5LpMOPMM\k44=5o$p8UD`[P,@Ogl)RQq+RGP'OI=NU>unk"P<Rr
%&Jb'"NMn`N:8/M1ZUDLmmLV=D5sNch,c\e"Nu\h7l?/&1+J0^2pA2fq4O$5>ih^]NKOEZ.*g4I^mGs9%]T7i(?Mglo%%\4eibOXX
%'>o*>7>sB?KpZJDIu/Fq;C6kiO2&U_6rt?r[C^TA(\qj%-h$[eI)Die8$Hr(3l4PaVh;YMSiIYQH4%GIi]ih]8*\+[F.?fRDiUp.
%Hg\r]cbGLWn?1m25&)fBot<D+eDD_b7q6KYF50K-B9%aIqqgj:Jr\^?M8R_T&KOA[$:'*3<GBM;!H^#<0&@V,AuZ3SXLo&MVkYQJ
%S=\Bpd-2YF*hD7jU>hu9kEIdj@=leS[(CFOJ"D'KF*Bi%cJm)K_c^]9S?r2S^2Q!fDI^uhT8TrFg$/5lhpVsgZeOgR:B%j_FoKaq
%*rs;@].4;\9+UpeE\oD`>i&<9gD0W7%pe7!mDfqh*i?+4>NaV'XXsf[Th'H7'o!10Y(MdTf3N'8iHgGnb-&3e]BSTmS?K*!le9]C
%r`lU3McDds-I10Y!0#\(FAmAgfA8GFFjlnl'.Z!)5/6Vuh0JRljXq'^L[OK^L#:]Y7WRp0a6LeF0cC#&#="u:qks&=F>(B);\(VH
%`]W,Ji78S39Ga:&dW+Ek1oXPPDT)AO(f*0>Y'I1B`\YrS-Zn<m\LmP<?#gYNI.Ql0c`HmYnZ9Y-8$?S$)"r^[k`[sVIZJa"DU71P
%q:[snXYs>bDt>Q-l$XQI(>b,FnCmc)GRf%tokMOZ)Wr`H2tU]8#[cXCrT$VI',f]H:MSuAEG&(]CZ$FcpTp1+p\*2*qZ^,[\o3`Z
%'>@J\k4!`hI,?"t"IoC$]q4n(IOl`Cno&O4Daq_Ks3k!,dJl3SCAq*(*eNq^:/^V4]D*<R6p.Zu5iTKP)n;uf`dnKWiWHZ]GrP4T
%k<B$]8bXej*kf;m<qFUPd-q!`&(7G&-[8[3oRb%Xngequ.SbSVf2"`;lWC`N5M)l*E94T^V`TW\*G7Q(F4Hc,H$K<,.P82.W6ns5
%6dP3q-Ii'+8tfs;r"sV$m`4:j3u\SU1LW2chY]QlCQkrI\/g'/_Okb-fAU`1DAZ]0^Q=Rcrq/=8nFS&igi*;16u$SrA#*BpG=B*N
%LIu)t24HuS=3PqHI!=2#V?Y=j['6]\6lVO/'7G/9qM52qN(8Ae+$J'8A'[a/_)Whqj'@\X=uDj]qn)Vop269X3<Od\GL]b"?mt<[
%+/LSnrZP;/P1S4$4@rI7W\C>_Q"HM/s,L3M^@2?km(>0KCP@g^qC)t)df[=LUjq]*0B4^oAkXE2s'uK,cNg>8b[3*nBig>jWILgT
%NlM>dX#q/''nW]Ko;!aWoc/(lScZ&pN.6"&@nXhLN!ICS<BU5IFMu@VJiirCD></in2D6b%0_oO5TkQE85Z"E"IG1X')-UP:80];
%9bP5*B2:;P(/#q%rW,&HZ2@IG9")(u3&qQ4J`LhO#Fk&!A*U^)=eoedHn=rR4hF:FC:TtDZ]V$31gb$qo:GY"I9RV]Va#GCYl*!r
%-kdF\he"X6K)k?*ZCH4&LPsC?rW8[rETX8qk%CqcR6)o7^!!bZid:W?n9F%X>BS'.F4061TB?PGU\!WP?TmkThYcQO?SA#fiQLE$
%75cjh?efaYrJOG*<P)@<`L1P@>SFCZ`SPt8VA?+B4"o2^"gX'6_K-S)(WMfp)r^b$Z)BT7]3M:Z.4i'p>dR@gk1Cs>c*_q:+ubmL
%(G,+H5%^5Nl\I,%T"it!n&I*Ta4hWs^$"FJI/8"Lc.<`,OT3CgSb[ud%g"G=aA%16Y]N$4BWY<:Ks+gn?$&63#K:66Am)c]6mBVE
%a!"YlHsX9S;,;@7b,5=?d_d$?Q:?Gi1Zs2a=`S0&@@Fge`t)FYZ!*HMN;oUl&#VV6<W<L2;grrbYKO[H^JH*&[6g_B'ZQE9@4>EK
%"t&6Xd![KMAc;V#lGIDP;#NtPKe*1l^:DDWcJV^gIe\@LD"H>KYOT3*?+bQlCLAo^#0q:sWr#]2F8_h#_rka`>@'3a+1>O+Y5K'^
%^<Vc0L$SVk&UjVA59k&tam\0tRjbu,4N<pN2q.B-@O#p<SMc9H,i*]fX@&!)db*<MLL"Q!HMP!eG#f]c>N5TsI@K6YNn[%Wk6>=3
%^OcdlSM/\Bmk1$#jBXh^]tBik4C#:g]]YtgNo'G4*tA80SoD=Gmo/tIkP*5[YAsTUqW^3HqJGC_rjA&;G\Q8W+,'NtEBF/>6+*nO
%g$A?uVtBTEcaVgu303G#f>HWAb3aEf^9XT57-4C1W=ecn4aiBpqp3)S=7Wosrm6"@J#-'s7!J:rOr;h(?g^:Lq9-/+YJ3tBbJ7nQ
%q>PUZI.X^_reiu1<cF++hVNR:loX_YnGk93B/c78qnm9Or]\)h,X5boK_(s)]R5-dP(AB`jPcf^WVWQ(VuJR^IemR)ok.]&NB]X6
%=8f;&g3`-lk1YmPQX$lI?!!N)]sG=_Ze$8*RlqqA]BcA4<c%i6hc`p]rHYO!*@*u/5D.]S.1E*@=$Ie=,3+(Bi[)oH$>4Qi9]`b`
%eTcIFIuV3`bVqmFeaGuNe+k%<kJWImSXg4Zd:mqe)%4;0p?"RYh*,@U8$e[G$qu-`c$o>`obO(s/AA/$j0WGS(q5E>EkM<QF=67J
%gXP;0:%;0&dkj/2S[YKF&":,!H$sDqXQ657B)O-'0b5QTX8,bLH(5Clg%,AA2Oo\;X7Nlh#Djr2ju;t$NW21C]+0C",.s"q]XNSi
%+B`%Ih-]FH2lia^$tcq:<"1+M^,EI!W#foQHYNnXr8Yhs^^7bt&Y<_=/uX7TSgaoNn]tb8ZJCG%dGT.,GWB"`n.Qg(^WeJ'Kj4?d
%\o>YohQQLhYB5%pESauCMdPOd<k_020CBH?_WQ7<&Y\10/IIaZ%iuq=1A=2h6bF)Kgc7Yi0:r+J@%8Y?DduFdGn&+LNanE8cRb8U
%0e"fGSA(MK5Il(1OWatP<O1'3$Nfg[^!^D^^WT&I!U,?gT<0dT>$Xk=>j8dIGM^,K+W<nd.n*@sZV^EH"-;"-\:<G^9<fRq_YR.A
%kiJ$7cYe(4(tVn7pu2YoiMcL-E:[$<;A8Ce$:OY=r<27aj!uh*9nNrm$TB'=D@oh[bKm4^aPg)PRg;!3]T?KeK%K\9@]`80UoVIS
%,eAq9ifd^5\+mhZ.r6N'JNfoT)'$BQ5B#adZBi**DEc\`A)\u1c9O'J?^Ac:VOM)JRl!k:F(CPE8%7Sf+WS"uM[9MrJBZ^C],`C_
%q,"IE]Ep$qP*i`(/ua#okT$Zs`QLLuIeH[OSt*Ef^BH+&B',fr+]JlBXsXqVJXWI`+KQfLF084`K-E9Zh@"6TTdgq>[<u^UJDcbC
%DUkUKk$U5*n5(o0_@R.B=*Q*ZkFhFr3g_K4*_!I:EN*t0om?B7^6U.@QDgLk$1HJa\&M7facC\Dq@Na9FFZ*q&(aP3'P_)V/%^e7
%SeF:r8\#!F<!W[1DGkC-#Fu/<6!\e(f3o>knY*/PI4cC)NBKLg*#X8U%mt@Xg`YQJhYD)KTT\+/A'kEo_WbsH=B5YAJIqp4P%Eh"
%K/(kr39RF;,#<q5If&@V7&Wh`=3"b3Cc*)<T2qN`V<jJSU4!g6l)Pa/e\<QeaD:/%\e#!@@rjf_pQ'Aj#8Mk'!QQPsa3"g*=8;9p
%gEob-IU_G60SWDjloRmqR?:^1c!R++`_au%^83dQ&WE@ilVG[jpKbMI.o9YBXqGT_PVn#\E4T4iiQN-Rm.m45hCEf)ZoY]C*5pXm
%BY.hD/m/[dDbQjNq<qS+KN99H//M"sKGm*P+Z1_rhf=:kA<+/(:m28Me9WnM/4+apqfGXJXnoPeTpFQTS;,U]*)u.uCFQCd<g-b`
%>pdV;gOpa"l[UZEKpis)$EO;/jZ4"3=$PB\n4R8i[I@C;^kYsF:g9L61K14PbfsAR.W7ZACOp;KT2N[*lcsY=]/N7u6>b>R\H3Mg
%7LT!b*%at1T[q3XK#sEG^%Acu*^<dPW),C5Qb@nu\Xa5BH8L3L(*h]UpO6VN2i[9uVrDt%5m:ZgjM%fA\#*!"c(O7A$n=bjDL]ul
%TE6f?7jI15?J/o+ONF>kE5D`mW^8i)OECu>lWBF[`cET1+(&LhC(P*Jc9jIZBE!tbZict-#^WGAJNK2(Fdrs*7NN(cI1o+IBlDR(
%;4mtE&9($>IU>)Yi:*VIW(2Y&B7^4^F3>$-pbkoXW0b4r8B5.jjVhG.'nE"8=.(QJPPl$.Zc^6%KGr\=M[rcH=nhgoW8(Pe<>]$<
%7AuX/L]S<;BG`HejP?DK"IQ`IW7Nn#G.oTh^"4Ta8oAVC-LGe8X_t0>._XfA"h$@:#eHFF*-)lQaJZ\s&,!C^_lN)UEDBQlJh*%c
%hCR2_2P%ujXm:(J>_m@^>t*D]^r>tYM'V8Yi76cJe_rh5gGZ2YKs&XQAE1?92n=@E8l=9.V"*!8LWD=o9=H6L=(er+Q#eB0D6lNf
%I'3d-n[6Kh7->n`?$f;Kf"RT@A36kteVuLH09e<+d\0C=7CnRGiRLZAY9uFCh:GQUkUL%FrS6!WS3Q.0DU/P/?,A".EjZPF'GC.Y
%``K?HmcVI5pdM&s2Rp::r[^.-TZP`^T..+*dO&%n^[pr^:FT@fReH[99\ad.-F^_p?=bG?]\<0u9:jOuC#(05_@]C\`jbP82r)R'
%i/OphOmb[+:Xrluebs_SB`!UT9,"0/_F<XRakcf@n7lM*.\3b$DY%hU8oOJLJaH-t`4NLW>h(M;338&li'&MP%<#U'?MFW5a$<_:
%RU,^7(\4AHJ\4u@?#ffc:Bm\HblX?HiBb&H1n4K&'Dt,_N$:U-]19BfeKR>N_*-b(orm>P-Cbs+3HD5(ihNDk'&T"gR#_8/XdnH5
%($O'2eBCQT0:pa.4p5-Xf=;=?)'*#Tr#kWQPe^fXWcb%fKD&V._r>4J2-1<K=XW7KU&*:Rc\HhL]<UA/ePKcT2fko-mNZNTQ/qLm
%L,KftJ0h-:BV$qk*>>Bt*u7\r6sKs3%VlF0E`mXQTe[ObWJ^:+Z$qn0Q7#iG^T4'J=tV[fDf^-V=CC(W3#/C.ZcU+E$.S_]lJ05n
%C@(b!#8Md:0_q1pKo2`C-;_O;'?htQAl-*a)J)7<UJ,8nTqW[K'IjMh*YbQ7)@_lt(/VQA7jhIi"9K,;++4cUEO-^&Wdo*<L6K*q
%V5&#rfOtNMZup$J<k/]2\0dhI*39"X^_?:TXOI\;!V!&g"2cVJNPo)Lp9X"(isr<h3eS7E3^e<J8QE2hbU:@rGA=0nH@W3k^(s*^
%\p&FaI*+'hK6t:m!q>g/+^]?/(FK8/63nE>*<AX574OE!iF!<gPqbZ:0UjZ)<A2-^.Zq6.pJS::Y^P!l/%$"(<feZ3ibg]$JJt5M
%LM/K0J;.MegLD]_*^\FNkm)b26PKCWJXN6T^_A@<Vkl7Gd?-3u68+.k#Rj>okd$&4nb)Qu`hSk^p!eDR6KDs]>$XYZ#)29;qc'qg
%+`l>N^G_5uU.,`)kZZIT4Cp:Dn1:fU$mjN9+i\P<[N!!*258ltUBSK9C2ZK&aY3,OP:>fp'%4LCc)Ikh>M3USS#k5d4[nd/O(CW=
%hGRD<4ntlF6I2?nh@#V*$4B9B@S2p=9-PH(Wq="Vb8i:V4=o+B8tBt-+(Nf&W>/qG*TZKQnE!Z@Wnh&i#r0\+WgWX%6h<->fKmG1
%Y-V<fLcCrN!rB!SHZN@'LNr4&[\Ul1jZ5Uu,i@uOCo,>D6$+"1r,ZPF*An\i5[^(W@RR!ZZ9;sPS`H7PNtTNLUJ<3h!9WZm:Yr#e
%o9JjZ-qN:lNG@goQ'FiW\:YR1'dBhn@=Y@.ocP9^0Ye_mf,J,L;7AhK[Q`)$bm^i"a[hd9@&OdV0;?,K6A8`)OJ_[fLE3A2(XXP'
%m'hOtF</tt;-1h+K*K`^4F",f>NXO>DgV+0SUX4<)3Yr\qo#F,$I(u9=c$^[>3Nm+DLW3KLFKnQ_O>*#Lrtf<SB4;J7["U]Ue8K+
%\0YAFAN*+/HU<HdY>'d$8<#o?AK"MKoQu6K^EA5-*DU:bY"(#00L\W#`u[uCVo@kf;s\`*?rGhsk]PH_lPY7CN2EkO%2l1F6"1Ph
%dHb2"&:bdC9;j@dD=)l1[S9C[0?Di!m-OelhdkHLJ8YZJ't8MuVJ3`umS";'0o5*akF\?`g=^<HRS7GMU]lFr@[q$F3NoaN:.-2i
%)B6S<"o:(1dC2.MfMId-SZj2FT&1:ZI@[S/0V+6K9f6d1krtJ#7c)!1::"P/\N.&ZnM7!h]2Uo2hP((X5TM2Wh,kkr_do6$fYh;F
%lE"eiSbC^1_aGGfd5n-Bbo_:khf-f^5BUFYogR^mJlbJ(oXK5A<!Fqahl/Ek^>`n*kp\GbP70ts:5$eK4Gf2oBQ,F]<6iM?XP"R@
%.p%6[-`t)U>es3Y:KLp8f`33Z8##K.F":m@%qL'-[4Q\)06k-lQ.I;0Vr*h.l4=<Q?3!O#r4LZ.;e.e/s/D/gPiGn*n^sI@3b(+V
%F?.`[`NT%;r/uJsU]M@5%:c<=ei'CFgN-4n8-QB?^3e9/`6^,PFO7m^^%e1=ARIu9gXOn1Oh3=Z>j:;G]nl:ELf7hoPmbuLU*$AD
%-:1+8Zt_h=,5L?qnN`8?f#fBkR\tF;cSS53\C/,H)g[;WKC$UJ2]]_P]#6)-1PH0QQ/469$C[342U$mpb=QQ<>si&/1e?AR?kR&R
%J+)0-2qq?5B!n]d7`j6AU+-J[W+h#V'=BNNP-r4K_es53W+]8gN<\Xk/YO0rpJL\.#</E>UfDu:8CEQM<j"^$I\Tp:785]Bmc+WS
%A(:<2/)G(OF!61!p(U[f1g,LBIU>p`.0S#jeC)Za%B(&[_6#4U^a7`@h(V_7.G"mtp0haRm1+WMX/Jb)fq,$o]obhSciq58h"nfC
%5*B/lW`pq-[j19NF0cZ"EnKZu^*sunJp%U^NXfCY5eS!FK[:+n3#87F`.^[m_lD#8kS!1Bek@0B_V]NDSkpUM]fgu(N\gUKY#$[B
%=ZG-L;J=4tHW+g"a@72>>'[T-JTlGpokmm\G1g4'Ch.bY[^l#>"&?O&g=s4ka*959>/K$@%1;eu+!H/d-"AOI&\PosmQnR<VEL;m
%[gc'dhU+OD9iDcMF`b-;HdI$s1"WC.\fpn"6WDP]j7kkiZnp-PSujP.lEVCufL=9qd3uY8R[aiNp5J80;OBLB4$1$Fg':E^nK+Xl
%`GsI^EE<>cf-h/Ha6>c@9K,ofGoS,0f,F@LfD`_:go="c`Loq<ZaHP[iLT=O[W]$uXpSGfBX.?7\A]cKUs%PFACkN1YNpMh0i&(e
%;MQ7'nM+Q.5!I\Vrf%+PUGZcDdgh6679-0(eCI3bmI:e\`n8ct)ri1,m3"1ta.!,A'^n*4rBH_\N]R_dO#E_^>Jo1T_9p$IMgB?L
%fPS+2UQ4U4'`Hs']M,-0a0+Hk[P9sL&!#pD0:51CL32J9`h&X42B%GRe<AGXW8<u>D!`pQ+!C9NT<bJ`+uB^./CPlR!@JLa@SN[L
%AW=LTc8.XgQ>('oEr#h/(:V\\%4;XQ2UbIJX]BEnVbBlE_dRg0S4QQ)&Zg$04)OtDHGT]IGr0:]#h9A_&VFNW=kp'la%3U0IrB$^
%9]=oQ@s=Fh$_I#qppV1[g<3p%1ARiQp#O6_em93HJDP`l$oKs:nO(5qL8h%uOt"_co$Eh*"`oCc/T'nI'mh`n3sq)ug5'=/\Q,\!
%<'e\I-];e]")?OJ3tp(38ech8U)O*^4IG<WQ%T\1Bu(]Nps:rDS-jHM0'BRDj\l\*#F4la/Sk0DClVB<B*))7jjQUULQqC5fCGI\
%V2L+oo;SB$eFKS?E=XP^Z``COd?H7):sN]ZbGWU_*Dk$o?-@Gd.p^rBSBnd4:K`Q7Yaj%NQ;:YF4Kt@%\s?.(?XU'X54&PfiuoC>
%e+>2-9TIX(T6VGZc>[]kH<@M+(;res<e,DAoB@HC_ef^``GPKblmANsT!^apZ^k*.71'((\RkfP\:&H\X1[Tlf1fCZ\AJ5Ke.;PJ
%]35:plN)W!S8>8@>4`T99Au1oQ#/s;Ft(@6'[ItY0OBa&Ft#u%8Qf0#cZo&gR16d][=6FMUc)4Vh(I7@ODnm)Y[lg-<=3SYMi#sY
%UU8JO+8,bJl/q05X_K1uia?#0@lr#fZ9'$&9CS`r9A,l,9X?TJdMfq6b3lA)Q^l.)\6F5gZ!+DTQEm42$_)iZ`cE3g"tq[2/I,-T
%U!@[tgSXBs*C\TMA<h`"Bl_Gb<:hYdBX>si?-[1ngjYtl$op;jSHa6MD;']RTJ!!k4nPD[X[p9W3KE'N#Gcb$Y4ZJ3/*e$^VjbKI
%V^q,qB2MC^esPfMY2m)DE*?ORRGcT);sJ;fTk1M#?5B/a%#rhV`bF&5@G&!s`N5ukfk_7q"i%Lrj>b]3PjQ/$Gu0,R@N53<b=5Jm
%qi`H=0h5^,QAV4RR:a0rZ4GEkhJGb<[JAf-H4K52DHL+S[lt2=:71oad?RMl^hD!L[#]&mPT(Y,f@IYd>CFg\KjV:`lID`RaJGhV
%chZKg7bD64Iq%pn$Te=SnCUD@QuqiIM/8aB.cN?pbP%)^8P8,,LqbJ:Kba39RX*SY%54rV,N^MARr_A(NpJUZR4W)OOL_!"H(L#E
%DM1Tr07+:Jii9#3QR?C1?FgEk][gb.Va1:CO0.10IANJI*/9S%NmiHW8'1u9S.(;\j`Sn?D#\qFZYR%;:M-%"d./7%.U9do'1'2]
%,Q$cB[Mh:`6#6q2h6JsXS2;*3L_b%W<c(#$Aq*iu.F6a>FD9+MAoB<$X/.Fq_mn,&lb2lcm#A!A;72#i**5c+7[D<E"[Z,Il'77p
%c,h&F4.?BSESa'='Bbrg],(_je\deeDe*VLe\c7W,@X9.3\PGpN9ng]as_V39AA.[c*k<_S(0eOq`5mQ&dN5Pd0A%0[:l/#db)bq
%Z#,tjSNqKu4%b4fjTB("m@p%08-=FrXJU02a.D6UH;WF2UTOoC(Of<B`;5tjMRo`,o%5aDUG<Ord?Dn"0(CaQQXp_KCb,&1B>_B2
%)?ie3C_X+@'shZ"6:mYM/%!"'o'k-NYAQWAr8pph5)a\Pg0:$$Tear/[W]U34LD_IZT)mLWMjNBhN"&5De7eFB%Y[3C01%mH$aIa
%h5rHYI#<:#b.JBLV2L+1k,DXa8T2YJbWGW1LQqW6Q$J*GmfC-mY0=3uS&6cJXB,brXUDt@b8.!t@^g67ZS(b&P(-J%SV<%n..=qD
%;Rc1*D_LUa;fHZhiNbU2_P:+.0?`m\[0kRQ82nLGX'rKbd=I>Y^l-19,EqL,4)_BQ0Zo`Om_$$:`EL#!.+Zg`0%+WR9<_ug5T%+u
%AZ<]hD$e^SSoP7OC(i]+1fJ`P]fhkRdC('q".gSgfp5!J33jXD*ap^kFTFR"ED]6\m;`#%7W:kQ5*?$B+rR.icGjJSO*f>>&BE]X
%=XS]$oVP>r6OJIWPSa77CR>R.h'[B'A06k3,l@:^Zm&Z"eId^MhgUVb,YL/a<;gV>+hE^"cr#[25t?*gkfMC"=jYRT[B6rJjkBFG
%:FsmJI*f8X.C;rDV_]$F8&:Y\?d_D%H@*m266#WcnSJkmmB+(B0?UU<erEmt-cOI+Mf8>>atkp$itg_sC[Sa0-uX1pC#[&@/'?U;
%5<Sm7MXjNlB6oEBDo^M`#=hb:Wp^t#ILf*L1j^h`2`72j+*DC"ij\q4iAP6<I'iK'?rtbY)%VdEH;!WMPg*:)D#!*Y,\gfoYN]X)
%EA\(=*EkRFCWE[]QM>1E6FWN+mWMYd?$)"Nd509ec%50\9_.NB.p78Yg9"V%Q*6O-O,M<&I;qpqo$OMYU6E?,'eb3Aqht8_0EFA&
%S"Q=]^cfAN"595e'_1+7ZG`b*FB`%+L,\n&3i#Dk;4+NQcImYaWj?!"A*("a_X"P]&UI5R`I@<p6HTul3fMhsC;L9Q,(DO)p3X5!
%p0065:uP",VGQ5CjPMHYe/*i7/^!LMEEWNG>DIr.kE_fZ'`5k)n-%-q8HG@=U=df.FX*b[8Zm6n4>AG]9/tb4S)U>Kfj2Xum*:mC
%5s<Ve;g@VU0nGdn\/V4/Xr5_N$P)(Dg/;7mOPEauJ^]M-Kcd69I1hG>f7AjYFZTj52e<>lN@r?!5_c\o/sr'19$1P!(&BqfO&G's
%+G6ah_.p$cnbujqi"iOTmanTs't9`T?o!CNAKqu]>hF9:[CnBCU_)5IN\9q_U;E4eX83iBa#[PQ-nprfUQ0T3T$`ZNH_p*fT%^W\
%37B]Mh"8h4/^I)AmN&YogC6;in5rk*[9HiDea8ZKcF4k%@SGb#Id!Mc^"RXLZ?+$C?,gg;UM\n+k1bn$0\Sgp=cu,ZIGD\'2%iee
%hdJMa_nnU4=b8\OGGN)>U\pLB:HM`gT+Q&jg';=5UTi'X=,CN:jDbP(N7PpC%%kgd:gp!PFSC??IJU*S<_U2)Gbi2?R6.FK5)Ytn
%q\JlCXn.>`/&s4-1R_UM7aGQZp)-m'D62_<?J&mieRr!hE`cbB;,uMq[V'^L?J&m9@50ESbecQ=h=\@ULgq.m)--?tn$C]ZYg98J
%:GkZbX0Bo"J3%.JT2A\0Mo>o9p2+u\r<27G$N#k%Zu*Y=DG8fsY]$iu)eD4F(\XhN=fUaKYuU%r;dl:q9IeV<*4)lqW2`WT&8_!D
%:LTk-A)odLa"-L4g*\@EEK=5SB1.og)KiF(54dUd7kO)62>95GYg7D7s1!c2]0/0r/7+#im6!m,0sn*2aB')JLD7KV^UM-%\jA9\
%BbZ@R$+o!%Y.c[^)ce-&Su;?$KgFiEa53`h)&2^gCkNf%=ClmbYd><[McEuV%9#F:`mF4"]<,`>g;QYN'Me9rn@,0a.\(=87agk-
%'jB@d!ZO*BVSSGr\"2#aQW:\l)&kZ,40pB"_:)tn=5"8'?t5BM(9gE#>odLWeb8V7m)J@gL]=?AAiJ2Oa5MLP=Up)Us)q/mkR[^J
%G<b_[L]<d=]=$i%m?H,Kf(-e?OG'uhpn'SRBn$'=_2&&)G!D@cs**rB&cdZsHjDbD/503rN`Y7\RCT_*OD>DfDm$2Ci\J6#M::k\
%0M2f-Wp)=s^h8.@GAYZ9#;uqcUn,NV)dp)qgLmd"aEDhKjNShO\LR%*4h!ME2eH(<e=:EB1niCYC^bdI7m:$6(GV8Rr@RQAUMdJS
%*H.uYbO/E3/\BE";]E?MC_^FUpKU;;on%>r*E_N`3jKe/:]@TUO\Jc]8jAu/G-A83`C]fc6rV]OZeF$hn]Tk"$iRlSYo72ci!!@6
%=P(isikB7c!n\H/X/&6CQu-kBOj+CYY^#H/iFLE;KE=P]IV%6:J6@nbgB)(Na[0*][2ITb;&IcRmp8=h]#b$IG-&S%;7cY_-Q#+'
%D`M_"`,6a\=l>BEK!]rJo.eI9eLZ5W$s/p0:"uA:4Us$tfJ8%>dM?ulGSlQDBYf\I@QRR(k4T'iZG8p9L%fe<@>mp-ZubZmM2ci-
%,FnY/V!Uj9rnGU;2pVBV.obF)gcsgq?$5es6"VB\g,No+C\uo%'0?F)*iCp=o'!iZW`)U;rS)EP2JY6p4882Sa2b[,]e=a%d(lR4
%g]_/bg:-D33-7qn4J:E;lf`1W/=b?Q*W,Bb7r+ZOKp]oZp4^2I,enNVd02Vc\_>XXX,]8&]\41q@ejiPh5]oc/U'O][d7Z@`)cRK
%2R(4L]4is1T8fg5ApcKeAh4:g<5Vm0YYe&)Z]OHD2nRZmjR9[&#P;VLG)oqlQ3mPSXo,V-+dIdr[V#=nMO$$3Li/f&4ngcNU]='B
%k&/m$@RSM]$8%`^YpEkDVGT%r*8Ur>$^%P]V;$kEnH"6^X1QV@%1.rHQ!N]n$^!%4-='\t+>Bk./OXCiZ>\V*!YlXGG+=e/@:Mf`
%l"ZHb!sEg.%+B=E/NPu_=GL<KUZ(CSAi[<M=J;*:)<EnfPFX.#`>`.qKM0II$O6&QPL%2ameOTl;A+"d-#nE7a@H)\69\S*qaF]s
%BcqFl[+L5G-uJbq!98H/9O<]O!mc^)o?+_qD5O:5-r"8Zn>tMDeH7"LefIQK4t#K)a7)5peH6;UVGNsQF8,K7F_4l_,H%\FdmO)@
%3rCY$egA!#8(2%$9,XbD7P=BkXIkn[+Zb"J20&\UYl:HB9*0b/B2eD3pahFFN'46&.cpoAKnr\!njek4hqsnip!ifr^^)Ec"p!ef
%8ciq'bb:>??H]2c7cuh4`Z%(O[i;%F2CcR6T1!hJfPGa9^t<B?H`Pn:kAT@'ikS\m(iL:SN0mgFoRj,/ITc277`-=I5K#i,a9FRF
%P1T?MGM2\"H*#c//N3H9ML#0JY7;pS.EN&s"Mi.IL/2fWaJ-C`f8X"335L=Hj)!KP@=\.X\'5AKeuZ16\@#OdgeJft/F(THV9Ta\
%ni6MM27KgqbgrqjU@mA>)\ab8%uAdh3bjAt`ZDA/eL90pM7`*TZaLg:D.(GA@<=Ej6!D#<R3TJCRmoPr(<;eVI$A`rTR16fGCT2>
%M>8T&V5#VoJ!>tu9E^/u4$l-uUNCGn$r73tMhBWrXY\CoSbH>]')-jdY%mT^-&M?\f!`k=?rrd[@/?D<p>0mq;0qk>?cUoDeFcf0
%l"k\<qIh[!-&m:c%[k4BbW"\OQ8!h";)<SrQaB4i-dAPpZbt+md-O:ORm%]V]gcDAcH]n/[.P[P<VpcNFgQb/NT[2[;?CDEe=B.V
%KN)O]bgGEE+2qV@<*,ikF8t"\&kur9pjUZlb'mWjSYALd5hQ`Z4+)iRBP%CO\#kE2gX\$#elD:f#P>ItUu\)6[cNUG*LX@D2T\.N
%bYacD1IXu9^b#1k*][Dg,hegZRb-HL.S7!OO(`F&[Rq2"eg'0V@.08s*V.R4PU+tb7m'Wh?GB!%U>:.6NBOat8BF=aiedT/^:d,O
%mFEMRfWXp&jbSnB7#U/,4!f`,lOfDMZuns7.%h$\F?u2F@>.SldStJ33NQ&Zd+/AI#9?jDRX"`X%kHF/gY&`BhW:t.m*j0]Feln^
%:[n0=&'*$!Mo,m]drn5GXDkLTjZdcfiJGgW_&[c&iJFQmapP7sm*.)aI^&WIX.pYZBWS5^BnqK2[_"T_;lsjVG\H]J<eh`@.+U3r
%iMfkD#9N=&<3&@r4B0Mi-r76+54Ho[]k4Lc^>FKsAegI8HO=Wa^dEN,Y<D8L2b<D'#?Dpk\:9pm:'VhD-7;VUfs1+`(8i1Elu9\:
%jai2qF.J(,Gc3(l1e7ZuiS]7l*q$NUG2EB4X\V#8g24=NJVVfgXDC`rnA%EWOUkB3KED`:Mp]E<q9@d8psu>`C=`a"LU<o`*q$W,
%HHu[(X\V%.QBLUeOo;:fo46"(#9I(A@_&7L[f[.X/UAFdi1]g-\s(CZk3R<MU%MYc^Unj]!tR=b>CG5aM01DQr<!RIal`'p%kRlt
%<R/U)M`8ED^dHl<EJGQZW2W>B3:5'PlJ1F8_nEb!D?h5OW1/%cTf*nG\"g(O)`b0K:>oM*(V2Tn(^D)d/PeIHe#4K2G\FdGp&lC3
%FbBi-/TM36(mXoVDTDFQ#9FfK]Y*DpELd?e,<YI7B:lWiJVU[$otq8%</Mo[!e(lO_[\faH&B5kJVV7Y8B//N=L3M8TlIY;MY^>h
%m9p5@mdLd\6Ol5cSp"UVF+aW+K9iDU.T>+)%m73/IS=rMm!@T`=k.-^.(-SUJVT$3in?Nad+142LDTVeT6=mt8!h&CL\=C62m_dr
%*dDA06A8/r`!__u3:P:&0Rki;b2n`%/%B$.H4uRNODh2hb3Hc0le/t6D"]pZcjVXuk%XS*_dgqS[iBX+<-VtP+aL`;/,a1;)sN-+
%%m73_mEd8R[b$(c3oT@In(ASSD&mk7?)4N]dgeG.d/(+:dj4"W#9I'-m5?1.>6c3QY=qJ+/e:/8:b!tQ:?i_bleL[=6gLuYbJnS4
%W5g)$@mrOm;/hPN$-b@@a`Zl(_Mg!.Np8C:Q><0upA:VlS[shZ^F<<To($H6J8_I5O!-G6T7qlS';R[jPW$pcS$9cP1rB"P?PDCs
%pH$1@dk7UkI45HoOsL1e_JM-rc?P_slSohZ"II#@FM@0h.srfe\9rG43/Hi,5,O<I\\"g#q'2#A[G#]Q4eB(H?@KBi-X-3#:3&Iq
%J*4hD2o?Qk8uHUa._k?d[A\M]L:<r"6TKJ+DKj6P?`-g.qL>*s5E0A5GkSNN^>r=H]B/Vk!okI)(rr/=8)9tVGijLTpY3N+nCj6-
%F\V2_^ca1T_I]T9"Q%>R"J'I)JnP$aNo\:)/BQ^4Eb*i`^ELd[S"Us`0#PPPR.W)FTpm)KSId;9ZbL/UbXLgZ'oI]1"aFRWSa6X*
%mjfb'D=E:_?Bbo!GKhaA`>=Q:Eu413?TB5B+0XnQs5"o26#-&iRS^9?nA4cJjCX5fipil]1oGKp)0#gBm\cp4FZ.@RS#u7HpTml5
%Lo!8dM4e+S$GZXU]p6IV]&s<s8!$q9\8%BB7dj2V;0iJ%RYIKCWe/r`52?lH3Yo^P@Z!(I&9jj4ITOdQbG7)WRFAFhA,`s.Mlm-#
%?olksk"BeB#Ca;!b'cG.hlrBak=mWN^UW@QY.I!YrQ88/[*nd5?jWkl4<G-4L)tb^KuOo[L>6Ri=/f6"dRWH40^;+V.%j_B5Q4B@
%dALuOmSjB61>;[9_f=Q;2d(gm]jM,ZR#dZY#=enKp.0Yhl'6F9PL4X!O+%+'bK[lT9FuUUL4/e(^?3<-lhchUThgX5r;;cEpg7gt
%f156jG?-'oJ9akKB8E(+aqrDiTXn0CpZ-*5on<Wc+CBr'077,SaVRLuKs7U=PV1a!V?(_:Eo#-.Ih&L4QTl[Bq*J23@?D_lDc(M-
%Lu4;uBPL.>&p5+AV/ahp%sJh?OnuQsi`<_r"eR2`)jYo5$`K!pSrRk2_+jc_!po-:6k@A:qNV9].e_VHH)8k-L5\<;_<?#WbhuU]
%5(jj$r^96<c$]_I+oSPX8P`OX;CLr4aISH1QWbtls2<b/bsF@e\B7&:\r7]89@t>clApf`iJ,PIi5:tEa?IO[f];qFLCMH,dNV(:
%IX\-Hl+F`@CQFOKMNZBdojB>5ri"6]\lcLn+lX_IEk;$DV8O5)72Pi\\G0e/5`;8cY91jPl&rg9&O4\#ES*c$pX+9._(K(=W'lC.
%9Y_&Yh:l)i;>AV<s(SE0JJVLDdHB3@8%oNBQJ,+L852lKc0$<KJ1fsm5)B"e5DaamfOk/a?E@.`QBKfBiR96P2$,eAk><N5-0Le2
%h!6FC6%+f'MtbR/0n_4?3I?aDT8MHegl<!$[AU+97\Ic";7M,=MA&LP]t8dcQ?qNF,91CCTjrr=M,/6$88omO3b;ehQQL%0NOOD&
%^dOO36K^1<'CN^U$nM6Sd5b<q$Ld)gVp'KtmR'`+n"0mT<9?Rp?Qp`hB.rp\[QJ7g]`H/GoRcS[$EF&=pur,l6p5Li.CA%#QV>%P
%(C>@*#I.t6:EN4b3d*oc,=g2bih#Cl,^kfOW1`[:(GpCI9;s)q3g%$T>UK]pL+MQ$&sB*k#&\0CmnuIK:igRh9`ucWTKe#W_Fi<g
%H)<nHX2#bL\(OdT=6F>'3rpsW+X3K%+g:8Hh0HFI-0)\mV9[&sS5!Zo+H'=aEtYip:pMO!?if3dY'^hC-j5PF$5ofc,UA=s.e7Jm
%SOQ%lRVZ%4T4=/lRPR4`Y+t)?<Tdb',1^;3R1![Ah[A8q%j97Na8t2/H*dgc?_PtGYC=KqO8"Xl,oqt"Cr"#I'.*2DhjDVhh/e]!
%d8=i0AFe,e_JIE&k1G;:P4)[%l-Gj&#2CAo!i+2,Q1?>);l#@O+?q8`#HuBT7Bb2.,*PfL=KD%3<4c?sJb+20o_cTmJ!ZnP&'G$C
%=Mk.;5t(5%\[CCid8q\/"L.eW7T1F^EeR.I'E_H<b>d@>82-Y,o4pJcJZ][-l]"=I_F`^gH3T5s\fJTf@D)_b+4?VlO3KNToSpt>
%DG,rOk5G!]Tc%K\<B:2''UYUB5aDq3-#L0!L.,E3hdqq7!"[O9E;N.:-WgA-%=OIKj\inHa$<s)J>LEGe#H]!+Y]B01R$Du'qu$O
%:eTfTn%/r3;s*2YL)urE#L/X:ihdcC@!$K&"=0+0T`#r9&3/HfXR/YQGM=f+[=&Vf1h!8tSGME3r1\Y9Orb96Sc#aJlOZM8jN\Ug
%k<!np0U:iMcEYeAecoELl0_jAns0:=#$&ah']U6fYA!rO,-I+GSp9Vc3Xk(<!f__a#T)M<?+c_7d)EV99S%><cXG_K9c<`)"QSoG
%_gmO<Ap!*-?GL9s#NDH<3Y-5FC*#-s2c._,T_R%Or>A.m;"j0BFfPAu_[:Q_Tsh!-bUlJ=Z1[>_bV064.A+&Hk;@Co["$6Z&L2kR
%^.TjiTE`WV,Dq2RQr4U$&ZDP6\#?*:3X@(BMFa'J31T3(dIj'S]Jm%C+C7aW-ZbjAo:Ite)tXlhhi!nsP7LYZXNBA]^@!E\\4X6?
%Znn:R-L>C2mqaBoM$\#Aa?WnM%Z1:b:O6>Fe-/LVnH;Z\+ag/=fn@P6bERJ51/+Co@IFRGDl$'I7-/mN-sNcJ7nXD>;gC)^'e>;0
%VfsYYWOb*P+).O6V-U%FALTTb)7'#(8)]D&$Y-WQ-AKY"b$D^1m<U"RQ[rWp4eiC88Zd"#bWUG/^a)cVak#nfqN3C",3P"lBD#$]
%cE>02LgW3%g.jFt><.;g[>3+3-JlHDoIu*N7spa>bV@8$=C^nN#%e)Rc:n0Hn=1T^a$/C_?$9`)QY0H^%FE0(CdL@e\Vb=EEqs1g
%hA;SeCW7<4SYl#)<)o:Qr_I=`$;qOo<UsIuL[q+B*0%qa.C_,1dMqogVbp$2)OW+7300/:H_5b.o8<%]F[?fjg\<t9""(rk`NS%X
%*O839AkBX^MfN.qp0_kZ0cY_K_t1\<'$^ohB/"gS\NB%0JD,^'6diHE)g%X_:qm\.$nDlX3E/L?&i_PQa9,ZBeFW;$lFaXpQKu>a
%[d%8cIT^/2EC'Ys[+I^u;#hqK9(bOti?RrfT$bSca]rqu(a9;E;aFW6TX/nDAiI'R:BaT(NM%p3L&BRbHRhRKhW7LE^V@*8[\(I_
%`[8<A+;h'3_M&C*-%00%rLjlQm:l*6WBPlo2[$iH4:A&6]:5?sRfd%.p@:+H4O0kl33r!:XM]#H57u'%igAPV[Clk^m:HlPmmJkd
%A:^$_NR[>t!M%]EVDBr;?\`EcE?M`OMa=?%mVg$+",5Ep+T+/OBd22jjPW\&#gqE:rot$TBd3IUC;H1k3YBSrCZ%N]+@=[U/L'9%
%TdCp,S-j`Wrm;uaKP.c4E"s2E:;Z^kGWAn!d*@P0be;J3r)?Vb$)Z<1R-"jYehkHZEL(N"F73?g*rfd>c[L8\l>,AdLr8DsSR6CL
%BeK_Pri[N$kg2I+i8`G;qMCA`ctttuY$G"X&FSLdETo:,(tsj%/mb&p6A5b@pH*r]g"W`0N8/ggKs-D;cSea>A76BUSc!JP880<I
%P%=/+);>jd"#UP,<I7?l-Gtu3gcq5i:&oFD@9&c#*un6^7hf&/G+;%gmVH<`Gjh><V[5Espm<Vnq4$gYdbeTKom!6e^ZR$>#ao:S
%PbD/"oebg_.Hj5]R)aMRDZc60D=Vq(mL0j!BK2$&Z/rq0L71\m,=7s;(&UZ:U#3g6*&YO^>K7U$;&Y,fo.*7_g)hWnNZl8@l0&*!
%GdH3@5c.\qh`^/03o:<d2R_H1rh.eWd^`9MZS]tPI\WM8KtCumdFMj,SVR2W`uC59:>Bo+S)([f%%Ic#'gom&ju<>!`/QV1TP\An
%.>48Nh\Nsh$RZ@cHZ6X^IeGibLjPc89&;Y>bE0?JVW64*A#7FD6(d@VU])K!pNn)"@bS5r4UL!1dgj_]'uA7pm:'^T)O\UCfp23t
%7V5<B<-G^JOo9dZ]kMQ<8@'rFrC6QH!8W1GAX-5`%%]uOTp]W7"\f)B1WR''bPgfUT<+3?=f(4+)i/QQ]Wlec:7%apZ>t3\aX3/-
%TJ[d<M;njSfX&7K9%)ON>E<]?/q-PR2TL#Zmd7)/jB"8V5HS2GH*[2C)5AE8rjhe!ddG_"YA[]M2\4hk0G%o1I==-8c76RT=GW?h
%0+QM+R66EEppC]nT?e+>d\h#("IhnGl->mKPQ$u+7c1+"W,J-,q=@@AqjPt;D,9[!'1?_6SMD<lqrd!RK/Po'e`3S-_U[hGTB>-.
%nMG]1jE?uAkMp:=-fSjHIm+krG'47C^"qkpoJn\o@tpS"F7JYlm=3;lD[0T0?[*85)Z]gQ^>"E-!!6Eq<Au:KCtJ.$s1N^HreK[W
%7rCCga+&+u&hCT>Ynd#h$13bt]b_b$!K#^g4FHg1J;)$nEYT$rfAAd]8Bb.BOo]oiG?VND0@"IM5PoP?kW*iK%=_QM^Mr:t_el1E
%SgH8h]rU&?Gl6^Sn'XV=FnL%EYm#UFlLWH1amiS:T9k"]ldgOJlLWH1J+HlGT,4$*^i*M,?@'Q=IdcQWpW]mHI:r4sfAB9>d3Z\7
%T-`lX@nQ9T2QOQ#oLWpK[CEB(-E(%'LbQDk<!@k(n_4TkpP&OoSp2%NgUZ^rF)A)F!AAL5(MLgUP@H/Xh[RS-f`#r?\$JiYg%o^>
%I09N(\T;QPqi(jXBg,oH`PS8%gCoTio(H>&*/sFOdI#2%N;'ZQLm,:jf8FVX_!^*HQ;IKfBWLQoJ/KJX=(obVN2hPnqmU4q?=`]o
%It)P4*,GA.n"C!J=rF4+m^0[sSooC4)bHbJm@7+GF,tH.]o28*rB%daE;gT]')_Udj_EM?m^_$DVpFR,m=*\`d<E.][J=g.M\mCS
%n>uT^oKmU]kKo?srklLuiVf6d6TncRcVN9GgpMj5C@L07khLsjI(iEiL_>HsTA%mWS<9<joPXO6INE[HrRK32hf9ce4MA`*d(GC+
%KEX(::VUMFRn6^:DF6ASYl3Y-o4B%5955NXpOSiiGS90='U,c8rT06WUf!]1PZ=lRFrpRe9U^`S&mTi=5;as0IIr_br\3.Ri%aVJ
%kh-Bfh>VkFp=&T8Rtn1OO.UTZ0`1^m]73W/%!/aLPb[VCqQb$,*BV92=H$_pQshb6hD+/JN\P5JYp8HeV`G]:M^Nh-RCHI8gC4$.
%5%G@tD[..?fnV,Nr$B3XP.BXd\!H7tJ9BT(0c&q!T(CtQH$9k5>b"%?)!q=<5hR\@:)IKf[W(2\`METFW0[d&F*.>C2Hh6X\2-54
%a*>"@994(MXec7nA@VN$A!d9Q6'"%oN%CjN(r[Sf[eP#`s4XoE>Ft<Ecuf#*cnJSg[,oCKA_;2Y:KB_qV]@k=Ug5`h]=XWB4Ct9]
%Iu,VdUtKJ&Nfj8#\Qq*CZ#[Dd8I)m2G1ps)O\L=^"1rkhHbg0\FY1qh!9o*LUe`cal/L'VBJ8WF4aq-]@/t;ViK?CLfh[Bj4Il]:
%90-$]Bla.FSG3``Oce\3nL[nh<u3r*K<M\j]C5L^Xfjk?rVCp6AFlJ(H*I84h:3$TZ1E)'ao-?X2N_p=>Qq:5b*=CEeJEGRKeKXs
%K'7.AB\N;'[DpO0JeR4X\8prda0VpXHhZu'-GZ!e.^oBRlp^VLjtOpe]OseX="SD9s7WR#'PK.@3HjG`5&EhTk`\+9Uo!`t8N3A>
%P,YK8ma:YRMo$q8?;:"a[4RQBqf]EChoPe%R9]i)5U)RShHUm<--M?fNC5V_rp%Z"k5>[SrbIl:rqbF.U%?1RD_CB=fmA*bTse`d
%UtbWMT+C,dg.J\9aGp)*#M3k8*/lKk/?CEE/>dJ]p5,l6C.c9&Y.0mSSS'N=\Cc8^4M(d.[!t`34@M-\gK_,9IFlW2-gQhA_>1,b
%%s<W_>e,(cjIro#\m:$Ld]P6_?2[l_.Ve_+O$519]V0U7LGKuNr.GhriH"]H5OHo:O1oa$o08VW[L)ZA\a96`Mc\0_m.Ee2'P?7h
%Xed\jH]D1LEOst2gK6tRobG7=*^?/Rj"!bsPiHa&j`%j=$XE;\bi'Pf+Vqee+*loK=6eE2r./mA?=+M8hlkknDO<!!iq<0ffnJ7a
%S))Q`kXUZ!C&S$IehHtiX9s%PDWc*cm]NI/LX3F41B[Z3S'pc3O*PTj$Rnfde"-,BqYZN0^].snS\&q4)Ho%a-k>$&4lB>i8`s^E
%is%*Ym%X]%o!bf4<OMNWI<NjdSZhAG6C(n_rqE&<MSJ<0C.0*7bprGN[O:+Zc"n&831rk?j3BbMnFAG_rO$qIcd`2fK[2WQTKD(>
%P!?UO7HD@?L?JjuY3K6jCf3;TftI;D3H&j(h!)n.#&&S=jEP`Sq1=[939>8B5HgSp]q'@h&f4XLRV0WsO?m=Tr`tu1J*.49lh4e_
%=<Dp1Iqm;Cj52\+oGHkP8>l<j=8D@+h@IsIVfVK>hfC3,-""ETs,CuA3k%uAk.$KP#$Mf!]X.f[\!k2mGI>"\=8R?6GIF,!>mWZ+
%omeZWe^lnK$\.!e=eC-6,^j_1fdeq8ShjuUXXmd@=@cd='sp+?=10*hi;U?,4$f_.7'-p[@@K5bqT6s"5CETNPp_"-5quB":@.S(
%/"@>HjS%V/_<^-llSKh^T;n<-MCif?[TUj-I!p#k?kDgl;1/cWRVD(ZFs)sO>B_1EE1pJ6KDONr&'q)`R6WFl,Ze@O3sSs3"GO0d
%m2a!\+m2t*-3%er1VAIE:A[-(RZD5u$bRH>1)%6CGof(.a.q^Vpc%djY=*W]Mpo8D8Deo?cb08T+]4:)(h<RXrTX"`TS@h]OEP7p
%dnPbun`s)][J]A\)t%k@>l5PD]_B`F]2qQMcYntUHZ^RD2L@X>g8Z@AZjI4@qXX"$hIM<T&9cDR>rJn$>eGV#jXP[ujm6mUc\&P^
%]5W%DT6BJUAoc-I^fW[cm:]dQ@Eb\#fum&UhQG+.dVt*:lDjh*oWsLdR.J1<l3#R#ViZd,HOoA3Uq3$fK>Uod@DXbr>@.^UkhRg'
%\4Hn@j7,5PfujX&hHXlkqT-PCT,d%Crh3rc>NmAHl,uY>MM3*'<LhYZZZrrA\U*R[;")&).[q$Y8qffHfmL]RXCoXYhmap>0t6`B
%\,Uifs6Rkn%pOh>*u,jg#@dM4!85%Uru"$]Hf;k>M9u7r^p<RNoe1d<[RO8t[oPGuIHZW%)%jlOl\X*[*p05Uc$,T%3,+/lc6H:n
%4B8_iq9EgfP[:q$gj/e[Rep^!29MDlelR:@>a%n[Zi,0-[2"MYo02b\`Y11'['5"=Gr='X6_%[qr>P:MDh6"G<q=T.&*kpQ%ORTF
%jg!rJ9#g/D*oEQ5Y-1X.YXk\9($X#l\*KioSgRpnfqFbBZB9!0\@?Dl^F\d!T>l(ge*L^$%9@2,?/0&rR&rT_H&X8&fY8$"5=4Vb
%Ui`5\K'@nJ?==;i<]pZ:M%s'lXmAGm-/GNK.]`[)b&-@7;cj./Q&@p+SAH2;X\_O7.'2Em$>Y1#ieu_O$>ZeC=9Gq\N3AF_'Gf-*
%!<^L<UJ#,/]Y?o'ZroE"5M4MgrDnE0[8j#rJ%7ebg'X$eSAM92.'0E%C=,'FZ(V&Y$>]\5d2H`)UB>-jod[&EL*qIm(%dnE>$J+j
%B"G`EcJ[kKkBhq1g:cRlm+o^B?hE`pNu*LU]:>5Zh:e78MuV'3:fK5fF%?8:#rDje0CG@Y+(T$2""o(q5<'J!Cjq:,kZpHO"b+H!
%]_B(b$Og9*^=J$bJ]n*WbR4ha5S8Z+T24hXdUSGM$0uOmItngW\:@\N?ge08@T4s&^e#pG!cK`gF&.u%Zpe>FJK*_^!D=&=Sm5n4
%n&AqjmO\D8:V"H.p>X!O^o0i-4t]o.`>-uP\oEN\m3gLd52W">H<hpXDE5teO1u]c4Ed!B:@Qh`>MNooiH]@sl/fgXV.B>Km5,*5
%T.!=g3:&"'PRiY71]482Vk##.4sWbW`l;:HD0U:fLlEd#ce0BB@cMnF$j_nIW4:RgA)g:o65R[%5!7[8)deJ3j-OtnP5TlSUPk+Q
%8G/e@d)g,J#*,8(*'2XdRd[S:>$U5UF,1g9UFZ8X384!=/Rf497N.'Ed(*#u1b+2F)CIIJl&2H2*kP8L`9eX0,CBC,DF<KaXJ1>E
%[S,*DC6.11Sht!q-#Z#\4_f4pm@9]\r*[7.^1;N6c6e/0G&XrQVVH6s`S3Tt1NJ&L;gVqO>VN&Rm5gK&g'^!n"^CC7Y6M%V,2]GD
%]X"5k(ZGLKHnX)\osBi*=0?LPnO1*XEkDB%SB=ko,C"*UO&<e1c&C\9r/F/T>;X$EY$YYfS=Ml`%*>;A1)K-mXccO[PXo_U_Us?a
%"^M$1WJBZ'&S/W8%$G.EoRqL-dh`8Xelb/pcE,L*]@h>Pd*X,/h)5KW]9f1;p?463>Nsr<d7a3k-OfX;4N]H'Aom[_lE/Ge$qnpR
%Sc+#.MWougbVWV0IYWgFoZN1Aq&Q>A?G3smo%4Ek:rC.3Vi0pnFiNet<6WLoJL&dY5[7IIUG\]>DX'aLiId+.PEGhF+Pm>2bqWP^
%A%S<Rq"IZrf/#Cca0OWP&$u8Bd$."Gmer1Kkc22rQIGHKs0.s+kt"aK&\o%'h5/<n#1WXcMkk90XcZ6RCGAX?i:gS$;gI=49`<FJ
%qU1^C0CFuiq6o$)neXJr=Z?64:J#nG#</",kI7nHI,nFG`H8KC'ku+.gLbI&<<Dh](?Q\XCG:]g%SN;]h5oQaDu:obCjr5(eE8JB
%2Dgp#k1RH7[&No^oCOh5]9&XZeK:E]GG1^;'q1O-Q_DG.$-fR7cc-&R1DAe(%4pJ&$2Ot]q:4q">\9i`>+-@u=Z9Es,t#3,h#^05
%+Z8n_ILiI1[G"3_hhOG9=gI(X*+?o=@tN/tm^04%^-!pkH(a>l*PJu:m<"l%"fGWZY$YOG5b<2B[BfaMnR0V^Td-o.mDkJ!!VO^/
%a>)u'G&.gPrqi1V5+Cu!c<_esE4Ii7Y&(=RoBj/dDtpc3^3o_:0;g.#/#Hb@Y=YY)IWp=n1RF9*YFf^"`HOhan<$TeErI39I/)dJ
%6jJRdh*:-K9m;[?+L,rq@I(I=%6)3^-s]&%Y?8lDFiT^>\hdDoS\$rGr*5'QCt+tkRr\J_L_TRU%<N*&>Si[fp/jH>$BO*Y_U+a6
%XB+bQgst25E1Cp][X[I,Ecp8=:7X,u3\B5E^H!&3.1=[?$>l<CLXXDXs"5KC]m"bRIW@p9`R"93S6c'e_nEC+mSrAp?8u3%/nWDn
%1u*IPj=V->$X4U;B8rdL^SB^Lg4me__iD%(VUl<0Q&SD]U'Y#61\,5jYh=pRrV!eB%Jh53kNO0p9Mc8C6X!A-)i`gsr7Yt5?SmKb
%mFPt!qk>h3XgRu(\$o(+)uBAN:I+%s#@osja(:[WoPKcIZ+:0e\Ki28AL60CHZ=tg)mY>Z.aA_\J%?j<9ML]\R[3?h/A>5t!E;F$
%%a)*`iQUaUFhnhC2mNf%mo0B%9.J:G1q,:iZ*\]BE>S,8OkkD6+#;OT;bdnq4V]_u`flg\4QcN>Gj%f`ria7-PMK/2<&'qmRH]#g
%8eltc^Gs&eR4Du)Y?]@*llMC><_T+l,7LN%<fFe.-X/<R-Ho0,'*$.VQp)1<F4/*30ka9_9sA*h$9HnM?j&Ytl`:p]@?Q,CJ(l^`
%)jbJ"Lp"gVTkPZ5GAAkDn9'1I>;7IQR:SJ5k5-OX:))jPMr9q*0mA/X=UY?d&si%Y&Aa3S(jFjGMo@Ag_W_Uj:"\luZ'^a8CgOe:
%/MM-1+NCg3r^iX)77X+,0X9,]++.s?%_D5*2J'I;9tAsWr+;/TlW_tXY9"77nS#Oc!>ut:#Qca`U+q'#<"P."O7Tl3bg^=M(mYWq
%MOV(pHd5%\R>_*jdlhl',u?Ml&pLgqKS%F68#0d(hRO-[;McO5H9-QL-K]V,6gq.JjQ`Ml&);p5;45P@%\kA]AtElE^HOL>ldDiK
%$BOPK^@o]ii%tlRWLh=P$CiHOdg#\Do#)R;2[)gY9b[J7^F=,j=P7eFe"+H.^W(1!PcZkL:ZFC9m6CA&'J^nc.1L$HIf5YJGA#NG
%PBH_D+'\Hln#H"pN;VR1l.)9J5&$kFZu#I'a.M?jPO.I&+#:H??9^Zs]Qpi,r;aq_dNu(UkbkmM8"_uCahNiqnA6*LEbY:66d6Pi
%cef;0+nOjIe"ed<g*k#12/dldApC??FQSPi5Q!_:``Y2DeWg(Lo;2g*T@1Ad6Tq=s.g>=kg>!tF7Q$t=s.^OP>5K]'W.25tD362k
%k?=JsPrRoe-sS"[E,PWl-<0`a-KDJB8M8@_E_k!sUc]F;-AT4RO'_OK2cmaY=uG?Pa`S_^F(O355d^OT.Za:Q2J.%1"4ItQX=q4U
%FE$R-c2?GtiEn)O(4H=nGC0[o.?*MBm?)\al22j6pq.ReBC/qe42BS?G$:[g")Gq5lFe:Ml[<.NW_5V)@ue_u?$ga"%Vg2GSU5[%
%M(^%u%h,,'Xq>TFHQ%]Lo_#-24cTFNFUpWI3c&^Ea)bSOSdEYU-Q+tHCeb/g_tg%C+"T:\kMpg?Kh[igELtJ-UK('j]RO&R=s?1S
%cpgTf[s"'5AF7GH]6c4rQ)pQqlXp':l\]r1cG(8NXVS:44,0VNp.';b`OAhqMTZCnQdTqI.J_).Bqf`LR\*s'YJ]CHHASN\kR%Q/
%ZH\0t'ppqlW^srbo1f4pI^G5BID!&J@)VroY@"0aID-)5X![f9BIC@!_Q'q<-0^8Y<tg(P9R(W*p47uP4h6"dgR:2D?e]k3GP0PL
%imEI0:8s:8ATJb,nN_N0pHq4\:ZR%s80@eH\\`ZAnFlp2jR?m4<)WJ`Vpn3LC3B%o@)R-E!F=p@7p3:>?ZZ,Df't6SVtH1-N(d)?
%Vpe/2:*8FL-ZHks52&/hm(6/J*ds9u*UK&eJA+u>IHSAOZ:XLdpm55UJD*KHF#CZ4Ybo_q^j67/n+UbfRIU-=R[j,MC\36<HaK4`
%p6o*)G>7G\,j0#kS_Y^FA6bokTBpVgM]B\p>HEg5N@J[!*WpCB65?VlC/jY&(QJ\BF!R8g0K<\`1?[Kb<AGlhmrTURM]gSGRH0G-
%.=AD`fu4`BCAi6X/')EN=8lP$hG(<egW?hRU3X+=Hhg<$p@>\ncq>2(QT$"h9T/u9:[\bmbVWlpa$bGaIlhf#'`G1h,u!TAJ"goR
%`)s@,6au%:bO_O67iU-8\Qd75&uTi_*aNgfdOkTCj5**kPPaW[ZQo);FT1XE^KS('0]5(R9!FbOo>g.f.:UTnWL"$8`!0q@O%K(Z
%*uB/e:\aKDI;sMfVU)u)Y:$9>7FXF?XZ(!mfPQB@c8"C4M&$YhP*f=f#YP)a7Ie:^4'"G/gof_\:TL%S',6d/;EL[o*mSXSJ%rM,
%IsD"4f&f944a["qr0<&.<aiAkDb[C@)<?h@:eN4%T'8g=2]6l_5Qj7!^2Y(^(FQm;]imES.YQp_E4s^`X[2T";K?&r!IlR/rAK<7
%Sh(BMp3TbIhIrU)mOiS4S59S&:3ul/(7GiB3QG^Fp2;%DMT*WN*EtFC[qbO2qQ4TKJL&q^j7pu-qX"+TEae?*H9Qb&j7><[ofbBN
%F6A%?n\Hg08T0'"5\6YP?U)<5#,LdL""Gr+d'1+'O!-s!Fb&E0AQW!ZgR(j9fQ(qg?#CA2_:@ZAq)5#21-0Y%Ucm65<7\C*nOq<T
%r_LRnAgDg%f<=LQIun\Cp9o.2YC?8#OWoQ're6rslIS5/C`m'BB-Thtat_F&gHPE0fjoobFB`EJZ1AA\LSeg[It.A!:`7#3=UVpU
%\N<q%c,dW/VlGFfUkR_@T%G#D\LiIDI@N=)#l]W1Zn.8.o$M7]*WC%:h+ce/,"Q5lfg=a[R>hpk&@9s/Y2*rLI#S3RA?n3`LZc"N
%Ks#:-=pG'()TEKmU!=DT)"tEBKJX3=7h=]8G2G5.hMPXs5CE7=on)F4s#g.I?]:#rj'8&]JcS\P%i8li&hKC_84(dLc24\qnNdZa
%UA*pJYM19]iWl7Pf9SL#!_r+G/PdV'AnTlmI)ZB?m-I@9Z^(@SB4go6b2qaj)iNM_]!M_@?uI<>nEe3eNTLJt'D34<$D]AH4"25a
%^Tl-[T7$;1hGX(MR`##0l//Ws2nJ`aK&a;$rE14jB2a6YI`cDoo_nO<O$T'BU_`p&\:%qfdJQ5krQ2QtIDd<nU2l`@hIk_P)u@l"
%r:Q0kPg8iLUUFWCma':N6Q[jD^9Zr:m/4<&jI`FlcqA;Lci(3KDm=N0RslBpJ5+,i@DMn?5tDpXmde[4e;SE4l1'O+]"%]WH0t4c
%^!6QuZG&u@T$BQE>BXo^ke5FeC\bZFh,#cdC;.F=m>Y3(pO7PB>sp)Vi3h\cp/gDu/Fd*$Lr(@:<K8f]k.,kns28\EA%^"\N-M9#
%j8BR-#h.prQWc%NM%854._cI3JWI"_p5NBO$K[?;Cr87&,]CH[FgcaKn"@3USh07[^Uefd"c@]k1W#\70R'5dcNUg?O*95Biao[t
%^->oC>@N)!cFZ<7<6P6>I<1QuQgqgJf6VL0q_p!r*$$$er,_kl]oC5$O)/<-50JM4EHXrtiViQ[D+J`K\a<Vu?io!$X\F??H12!H
%r<O<V<bSF4VtdQ/Z7Ks4d.:rD1FE>$=X^&O%Za!OdMI?[(EhR:iZ:\55M,99Z5=X1D0B]?g#3nL\\I^b^I7r@pOhWJIsZn&reG!h
%A3_=fEc$ie/hR4V]SlH,`/^uPZnDkhs"!`-CYQK4B5tjSDB5>GD\'kAgLd?j9,?+$#7'!:5An1AoN(%")NRq/5?kO'9W+'<d^(t5
%3c]^5piBqjkN_/)$#;+nJD$Q]hJG0'[sIB%_LHGJIJWubOY3]73)ep=F_:I;O2JG6Dgd'6meqWJkWk:!Zb1S&R/?osq6]nhmFuu+
%s539,T>j*UhZ!9JbfZ@8c+g]j>cI:b\)U8&hO[mB2GtD,PdUoERhV*.^?a'/p&<!a5OP\ggA*+A]G?+Hk-BV>Zu1YGM<9JX?&QV>
%J)C9a-LIS7$U7\k6=[p(ZV/E"e2^++KM<eDSVh_k*'LjFoQ'D!q(PIu":"`3;l?h5hH]u+oBO?'qV,1rE;AI+n'_sI@/'!E:D/]P
%mB(9/NkO#Yp%CQe.aQQ(lKu4<0W:;dQY-hH@J;mGDpmY6]=)!.&QS"/PS[CRHqNeo_lYR&aQ])L=fC`RjfRA2@"\IG`mp&umbbXu
%/ThlpI!'k@rq#QIm:TN#3*?(KkL&tJI\5jcKg)#LdFc`r&=;@X\,Ua;c_HOol&10QMd6;si+q3#DSM$QW7+Noac#tUO[JQ,U)8H4
%'DtoRk+G*,rqc!9>JA]AAq+.$r6j8"F:@'7-Ukc4@e/DLrdgQGC\.+0gZMqQ^U,D=E8S<BIk[$MGdmO130;r,QN"PfYB\:93Ifbc
%T6o,0hcp``jFN<F+"YMUHsQiKs39-]\s]e%&&pF?MVN$[lB.K\^)d-sJs1NZfcX(3B;n$GIlcJArlm<L6d77g\s%*^-[=hP=#[9"
%5C$u^o3lQgNW-[VU?f][%kj>$<nb)]E5qP>YOfAap"]-cQoum4(26V^rGfR(^#`TWA34*1p_F>&Z<4_WDf1lehTWQ`2>?18Z[NiX
%IbJ)X0=sp_cDZfKV`tmm-/CR`Kq8*[e>s,>pY5f%);juhp<MXqeGndRe)r?GZoe$IL&Y*J%Z:'jm\]g!P77rrAAl8pKQn1)].\Wg
%29c;m^79QBDt?Fo;Xm400>72.rkJlAUALCG&'o-;l*IM0dC]5!gZ*ddZcdbj[c'RM+1=/tG2\)?r/WAqIJ%F0SbNTWII$9N92BX/
%Vk$nk"nsQ`-7uk!i+OooUKcLIT'bnbSf;V)^%_9?h:G:=C_'j,@VP2rn"0tnL!t.W(%)!<>W;aWSnfQVSDX<3$N'38mPDTUD#`pu
%Q"RQic*@u<RQLFnS$ZsNYdKsZm`CLL`S&j!ZBoX%+<$1p,[]mu)>G<"NL&Io]7%NKT#p?_>6D,M!V?&1afUR$`2_9h4K[nEX8Tr)
%o>Oo)#d+%<kE+)+DU>n#7VjYC+$FWC=b@/FhlX*nR3b"#i3)f[^TW(M<3=WUXA2=*IeGEhm[CJ#S2t#hZCL!ZYH<!u[^2)[D^XBi
%=hA6+7k;gUq(KCk+=h)sF-er9WN=oHSM#83lA_^N3&f-6g:o-BVlT(K%s"[.jrO%iZ^3j/kgh'n\f+PMWsIR@+Fj@cVNZ<+d;]eb
%c*(nD.:S@Lj!;A$f/9+hfQ#?Ac*(kC3O.W*9[eISQSb8'fPtrO1UR1NVNVZT:9k9!bF20Y9PT%kifAPkl/]dCP;>qR_dCi6EoL^#
%@)lX(FRl?@K+2`[3O.W*bYRu,P>*DP*fHHHqp:n<l/]dCP;>GR_D?!h3UqLC9Q&hbZ^h,.a%:U$05N[0EIaIk(7qFA3nXuSG+>)e
%>'U$uVNZXtc-J8<9I=nPFHcF!RSHWE3&r3eGlE*>ab^,D$uN(*W9NB]PO9uk?e'8(Pm_fXKUm;/VNVYu#^>"K24[DfFe"s^;7"nh
%9d_:u+ElHlBKA.n]+<b4K:5P1CZ5)IRSHV*M<;PJ2,,GGG+@'KoZoFdS@C070u'sWjM[(BVn/ZO2P$AjEO#TL9kZS5odIU`K%f<1
%!kHVr=7jL^XcrLR9,9+\h*)O_"Lg:MIGB>Jqs7u^+r*Q`"_Ie_&0JV$R0A95l'#A.&f`Ch4oMSO/PGSiN#XHVr:`YG2:'AdeDK$M
%hDH04>eIet`X]2ofO:7%n?L8Mq6SE%?%CGGJE,2sB]tp@0Y2a`[LJ2PP_%6\GI@t[h.5&m/24@8/imPRQM,9$D]56S=MKd/hN<H*
%I^ajL^#Kb=j$1^%mhRM3E"k,/39*E^=ltMd6_;o5^_ONB`uX'Jcf8V&0DrX8,0"Nt'^1^6'#,gV7Ut;$UKpSn>t;NP#I0@Cg'.EK
%jT,Ch?p('[SM9,ql`2`qYBm\Rf8i/Rmll#<)e\W2l*dk@DEiTA2(nJ`.oGb:d[g':h(fM->_I+[c8JY<_rW6&s,[G7r<sJ%6dp^c
%*\nMm'E46(J$NsBh+L7lS$XPla;8>mr?lIOqFT-7aiN[VqRhgf4iuaqG!>oi_aPY3jDA)-BE8Sj$O_1Y$,aX+6rY8<(X22$f?X9`
%6hkcL9`(_eMV`T57^gWZcg0B>HhlUip<Gu^\$rhnj$DcO<Srl.jR)8uK!QR>J+]b%-_.IU!QpUW:1&EPC/bt9PT#h;Ft[fRNULXi
%:n3La&=>C;:-cD\?g0e95E1&JA`N,5T1R_ud*1lGc@%@\J+S0MU4)JH<u+nfF.KjgM5J2qs53b`Lm]mGn+6LaDsmLQ_-/iH^`6++
%Y,s<507D(qKuNq$j>9u.o0d7_g];3BP;[e*W&)[$m(O%YdD%W0fHCoOrdh)^([("c=.BO_WjltPmZfVsELNsJ]MiIGk6UH$A4(qB
%7*bDCmXK.c^6AQl4T3`9Dnl>IbTck@XgdcUs*+Fls1BWuD9fZk-1jG"\#doCZoXE53W18E^Kr94Ga>2PR(5$)a\YRSCr2EaZ+To*
%qp,*/p\1<ZHhI&]cE-NM4h>Y3rfs$1.qdZ+]V+/mFCpiq/9sP@oV4EA\A#cU^>Q9cT1Ap>s7gd"s7q41gqnORs&/XLUK@4,j8\Mo
%s57fskt`Dbhu;4FPFT1'k3955baTLHiEc:0>E?oh8PG`<<E[jbdP;ir\uptF<iJgB1SiB7R?,d+KarH_o!BHLAWEBO:H@iUI=puG
%+$G[g*ndnSGuj*>A[A\:Nu_f?[&2(2mo>Ja)?(r.9L[8VP.W9K8>@H0X1Z[)Z7*m)^JqT?LKVfX@V#'e0ubJ=<n#K_`J@j$Y"`Yo
%3iaqL=^afh;V"iVo>K.h'.V/9c:h[:j?j3@;.\1eb`XfjKjc-7Mn2T?]L_W``gT"]ZRX'hj(-SkIOV]&4;Q)?Of@Xl9eq$9S$Gk]
%QF3Oo<f&E!O<)jT4fYT)CD$o<UH2&3Uo:R=n(e8sUD!D*rMT?U<F+e[-<]Vfbc%I<)S4#51bD:t)O3`lQXu=-R-7!f09`au2:feS
%PmM%I1]HEN'i&='Z:RNlBsOHimc,j8Qm,+8e"kP5HR>j-g'RCUeeBB432(GYcu^+gdJgq.=6V-6D-bZuL.\"u)::[uV6.q2<h"eZ
%6N<,bC[%s'.&5D<BVQl-Tin&_Y-Lnr]>Z$PZ_ja++[aG7<2HG!EC+f>=F);'jH_aJBnOi!\`Hg=+e%1AVs,T:)UH*AQI=C4k7tYt
%1m_2s.VY''S:6^tGG8St*Cdf5VoI.I<A\]]-FViXZVDpH=27GYV("s4:?\@ue(hFC=%^pRD34J<OAJQa7))*MVJ.ig&=nV<.n_h[
%,ZGY-WIj<fNF_6`dep#OUq<q.)6!.(6K;+T.VPHaOUQ)QqRNS=hJ>b*=-o[3ZZOi7J#leKTJPT:L(gia%:r[N!h9h85ZW'WSL&As
%C\hsEB-O>2pEqg=3Vn1cdJQI:6>Mb5!i/8MkPc#<"Xt-h36V1:67%%ME%^Ak8S?N9DXu(`L(5@Y6BtubrCMQ:6>+Tlq'$"%KP7?+
%dNl8?qh-;9<7+8m[@qN7D4-f^L<f'FXm*V^V);)J(_qd+gnqG8o\QG`<<ZFKR*mfebNS!IH`%`UDH7Ph$8?ZZab\55GFJGt`jVp]
%44+,YYk[r$P>J8XL0[Q\eEoVnK*&(!T-,M7[4/\^Qs%jk\Y4XPQ\F<\:b0Q6kk&>[UrtPj(V-6W8h389P]fB8=R"XY<Fnp]-Di7B
%?7dOhN@LAGqGiujKKbih+h\j9TF0l&5E<*0SP;-_2/,r,WM$RhkCCROlK6'D13ddWg5t`dC+UaN:1$cfQ^b@TrL/iY8V?V,lAFFi
%$IK0SI7Q"_qQfUSR@!P@ic1dh7eC#06.\M%q;ifK9H1ZlEOlNIUpas.lE#DRRMH!j:@hNJUfV@>I8'*oP5=bd#ouuO@/=8(C7.PC
%as8!ofRb_C5N>kGb]ZLrk-XNK%=.3,Oj")46pbZU#G">YS%,+s6[)\]XrW2V?=Y3WaCS3p7:G"7=]/*C7\\'G(Ehsu;42/.$)*6:
%FcC0mFtsG*:i*cpr:[O#Q<]J=4/":-[&!B#NKDS;&>G)5DM["gO2ETC#q%T2@dP_KGXC#A]X[1td$?#\7;GpMFHb'X_O&b=ZdG5%
%C78Hr]9C_W]f4aP$#);F$RmgbC]^.'p3NVeL@uT-Cg)P8X$:DJ;YKKqV4CN3$IEs:\u'X;F>e-Fd;uF`UKPJ]TRda4:o0A,=[:k6
%7M,NOF;E[W\6IMSdTI`OLiul(98Uqd"\X`E?RB?.TJAPm8Z0":<p3<cM9qu`DGeI^Tc#-9-EfsA=+':2X%bKWq'8<GgZ$0"nYNjX
%7SZK#g.(n#hFSCW2FEPG4T\&;IoKGT1mitHnf.T;%#4oQBNb@\+gN:`3E1*if._eIUQ=V0dM=O@K&!*IBs$o2"kcZedmUd/QF5lR
%mUqCKE=+!aMriFuSN0p%kp84D>U7\_UatXc3N^:.).k%o1eYB;,h3)(Y#]4c^;p2pd1`nO6Md#)Ofc5b=5X-RTe=H7ASVW3&m^6f
%5A?Z-)i1Xp4KC?71YPL/YN__.bI<fnR1cm?]o>Ia7$"NbUZFCTb/7E`=Rb`*Tb"-&&poX_8n1Mif\]Hs_#g8Y_)l(7)f(<^QQ5n'
%dIXRgE(Z"H<(QDS#s&Nfhjd?pG*[%G"FI1(3m!g7o<CBDFG#UH?qd$[k&'Ij'H=\FR+N+[qD@/YHs6sh-?*UA=/;8tZI'<?I+C1[
%-*0;aH=RAh)+_q=+%p[/"ZDA=RUF9P&l"cqCb+3po3/poN\',t41mSA[*e(sdu0E$95]Q&9PW"&U`Elje"4HW9:Ce4>Z!>4!\F,h
%8:ud0(epC+K^"Mmq<1R#N,o*O&@a)*<nEs;>fTEO:-#EY5:8,MmUY>$B?j3AHYKLljSUo<n73fqUu1*l'`;r1P-g_C_s,H/lCDmH
%92&VS4\LQUUM&':[C\BS"R2kQ,L`0]BKOW<ROZ/HOQ4"GDp/P0R_0!e%8NCLp&nZ6=Z;Vn;'G$p?Vop%I!C^/%NY6ch<Lt\@E>%X
%n'ELp,Gk-FiY9`S7^%W)9`*-qc;U/9k:+mrHnsrShO5s@oaXZ?*8K8Y#2VBg9<f%P(kbL@'t!:2(R;(C$U<&]%b;EP'5d*'8/"&U
%R>//qh!*Fin-.I5DUp_sc1LKTc'>;b[6-Mg>(O`G"jL4b.rE$k(QU$<6&G%`1'KFY!.&S#PjVYT5C)s&F+8mFC1a2G)rJn"22V$m
%i`i!*W"]I\WS,J\[hhS0dJ]n:;J^W?"tJU&P!H@9+qo\>o#R[6D':r]jMMcR@q_JM>#cI&QM.Fa[a72_gRiR*fk2%[Z/5PDTgp&P
%2NuQ8Z,oNe8#rF\8Sk)4Uo74m?'*.Y`Udg'$M$99`f//7)!RTg[$W63@;4%rVmsdpkV1H>j)&d;"?$[V27+aqQ#aD.O<KC7:5fU(
%oF-u4VLXB?b/O"f&mRAa9<$iIQs,mIK^ONC3#eE+#'-8Tg@UB^5jOmFB+]Rp]iSU_B>LU0Rh@dG:'ejqo/N6ONR*&_o1kVF-126]
%T$0G:nqKL@8PX_OA#-G-CIq\W7#mi/q.QU<CQlc3EsWWn:0??jf3,HCe18>*9<qSsg.nU5i\)hsNC;rr:+f6h/UNYepR&>%KqADo
%7)tnCG6F8&&3\A!'K!Ntbn3-[K+dA@_IfP0<0=_T1n"D2<iQN?.KT\dk;Q+ghP#;*,/#3G:eh45:m/8<!eX;daC(L2ZN06OP=C7?
%#u=P.@D`!;3$D1kg3"UIM[?<389(WG"\IqE(3$2#`i"Sg/HRU;U)U5OG&9'S$2_MqGRl5@RNspW#/=\0+_df@LfU1*7Pq-32CGV?
%aVOq-b_24B]F$Y3MU@upc(+'q^Son;KQ?;Lk1DtUPb:(u'kYF..Kt^$Hm\5C6:ffa/7a?7"=[2M-Y/IXf"ai;daK]qQNojQB'>CN
%F'`2dU-Fa$-+3(e]RhJ\R7phAf/G9q/VB*o+YjVW/9NluKEBa+GAduWZ:nE/T7I`2W3;5PER_<&O0]C3?$-S.ZDkd^1uoV)/Pc!?
%:6]ULD!OnW);77hXa#sbhBR:ZoISYm/o!hXR`,WDc"oEaRMRa@',U8H49MC[88if9NiX(d%N=)&-!MIGY(n8V)p'/DC[k"'cFe#^
%HJ?LTLg\TP\4(sFNbC.[-aL`YX(W#C8<H/#_e)N`-Hb5uH53N'gc!_qfPrH1H^%f0+0d3jLR`E`(/AMKM,queC]4f^lTp?(];"o@
%&O7,S6s.PMW>:%l;DfbUouUqoAZc-mZj=$/V%?p8VH0B;#gl_\df^P)_:En//%\9pM8#]l09&>BoV@A>F/H5&@3I#jV9hWs3EfUB
%!nnjk?On<c?q]O_2(')!Kt&,0B0g_b[$eF(SIk$3o%Gk_!%11(YUk^`Q-8(uObP%RWcIPrHSkYH%R#[(5\4Z[oE>F:@qa3)Qugpm
%bJ."&-/!HaRiNZCL(mePSK2b*3ZBqlgu?!3ni5udfd<<L6fZYo4m*VNp.(.q^EmBL9ler]7hA9)2tZ5r=[9?rBepnS`4!$3;W%b&
%Td:>o82"@eh?[++6lI-DZD;t%=bps-omsKT7iD#8Ok6hL815#)$eX71=n2\-eKCG"IhJ0DoK6^'LF*bN#]5?KK=kM\dW47S[mhZs
%BN`l?K\])j,998j#N?Uh>c"i@qB(Kk?_X<\;qJmi)/3i.Vt1R1dM.)[3Er#NQL5_09Qa[XUu4hG!aCIM.\OAoP[T%H64$<f^4dM1
%(C@pZM`$]h6AN+I)_SV,Z?7CF?_`r@F8.L%U.Os&dMkkY?bH2"(HXQNo,IF-o(_b\P5b`eX`6ZN7%9u.&b/6kgHu*rEi<U@E/G9:
%TB<PUOU>qOZOg8?FdLQb+^FYMdo>_J6^+*6f@7JI;Li;<pj6ZMf1fN4P1)_!e_ld^riO@q6E!4[g=-o+m=Z!$8'##c4/I<5S#J_b
%MkAq!()^NM5e+e&cpY4>_H3IYQ0(qtUuIFk);U?>6EE3/aOnlh<sb5WY`MZka%7n5I-cqt-I%sa&"5@B\G"\C'1-.&W->$_$V\nA
%!$bM[j<RpZKoAm%6`2QIgD]\XJ\Su4UhcN;+&Z(FdKq:fnqqn*.LM\PqA2OHBILI=/%XL!?ZJ-<3S'q#V58Z4Bst'o]F+LGZB+N/
%#p:7C/:Ld>,jkCD+>liQS4)4:'`:BT<-/6dZGuK>c<D1*PNW*=3OW7X9'@!>;?f)dA_\X9,MG',\=FaqCf2i<TcPBJ20-XFfUGY$
%#sqCbemqEm^:RaNAp6aYNZK>D.M<?5mMF#c`AYkL_A$roZgKBo?6P\C&f8nJP`GfP8]hIhT*\Fm=$#[!-U\2K"NQhp5I)3url:j3
%K2pcrJ,M]E)e=)(mIpr*1.>St2^-(f+ZmQig>HJU&34L0=$2(EZB3;=4!CYppCr>m/qpTCrt[A8@/dKo%!AjPToDd\fX3G77$\i$
%OXb+J9df!gcX)0cY/*Oqg;b>+!/\^!.(t659+77OWQEiuk_&=[H<0:W;6<0SDUT'$%P>+A.?uYuO3Afk8iI!C,)DY`XUqe\KtG9+
%.$:FE>Ag[R>8,H%[[5.:&aJAX)%49G<7lq6RJ&p,qa&p8+ZP'>LkK3hL*7t%6$S;raGh>[O?mQC@CVOf#aZ]:R6dd@@JHB:8>&O.
%U-T?d+],%>T-;3BR93"XE(FKuKI^PU#eFa^QtmfqC_4Bu#ZPXPk\V/aD?()`#b5fE0Q7lIE!TKa#j?7>Hu^&8EtG-g#WQo;b]F\0
%FV+1f#`*X0)L!%"G7[#a&Cbq1BR(0e\_n;tVm0-%]g2]8ai(1n0i/.<+/Y,aoE`l#<>V*Z&F$-hadkL:]!l^R/0H2^o5:JQ(W-c#
%NON4;KY3D!D\Q<g&D^P[\?u3$-#Q/V`?ttS9j5rhRrJqP:Pb#Tq-*F0el7W*QsCspUgqCB6?I-W_V+8hZ;>;$\4HIMptcY1LgD79
%[q]oLp'Qq[DlcL[p'YGJ0=H^tINc;A$B[O?(TL!5hS)->F@@*uEEZ13Y7Qk`\Ngc"$IQNg/$H%*e*<8CNEO0mD*^S'6H'4].KLaY
%'121MQQW"D+jtG.a9hR`ONjA$#pSXJWYngc_BXA\ns&P%(1klH7,#Ibf=T8W"JH0(KKd/5&:+1-cdhiNKlR.qp%aT$!/F,;q2L%u
%44Wg=V$`-7U*?*n6C*9SAR"dhY"'mhnNNX[$MoFMam9UsQ_dJ+>2VT<BWLb2`LF#+.,)C`6K'rgObjTJT29Vdqh1\2hBN_KMa!P"
%mIU]R$EQ`G<eYrgO](Q[MUZ^>:o*<%K]4MW:FNf%qLkSY//IN]&Gq-TX0k_/J^[dfmNr7^*-8;[`Am\=d=MpG!h,4P[Ba9UUe`Bo
%ApT,>Z`$ZU$nNp'@hXP)Y`ND@2!;Y>.^`)@VQo<I+r.*9&nt\nK4i@]+cD+N\h3j^HU"GrYp.db2DqInJlA+57UrJ"L<\ET]mD'Z
%=`c@'f&^Nf"jUYP+ONkp0*9f9qS:dXE/*.GG![Ap_D4+?,-_4I8R9DrFU;VZeDuaebckc7d^2AFYY]lfP&2HDYj#$"fHHJfY5?Yd
%(,\f=KG?qDD#!>7.,5Oug[n>qXit++blUS@XhkNK70!of3._T@ZcDDP&O5*;;0LC25WjQT%"3,Z5TH)o*gHLBQ:)gXN?=>7*s<,l
%"uR5#=r7Bl(]pM#L;k&7knjO5)$D`5!a$<CI2N6`)$IttK'O9S&/k[/)@0LbJpnU@UDa9V)?T:E";2XX2]Dm))[(^2"K!+>b8Z'%
%)[6ur"??l6iMa%S!j!Z.,`@U8;H;5ZgkE[=:5(tD!E9P\Ae"og%YBTK!hKmRYR\Ic%Kb/jKBE^Gq@8)c%g!g`Jh[c:6k=lM%g-MV
%JpS"0NXp]6B4T3/oEnK;?Ggpl&6'Lf\kU\eKGg[Ri2&^nW75S\#b_TsX&H)O5UOH%Ah%VD:9*I8nKjH[)mha3S=?(@SaI/Ko%ZAp
%EQ5Xe.*B6t#t8"p=JuH8cmKMN$i5N#N'`S%N-=CuMJs5W64j9o7juAtoEdsbO?T?D?d^/5,?=Sn,0W]P:kYG)&W1QfI6nO?Vb\_X
%"q;3&_%d"6%*o\%YB`SEY6;NK*ACC$=P0]EmXkJ@3+H,aR4-Jf<EZ!Yacm'`=D$.k,AhOpF1IO)HD`0c8/m5noS(ae;5=Y`+CJ.L
%]0]DWKu-A"@S1m0bc+*p2@Hu?n3Ng?)ha;tYK>sB*u@E#nDY_o$8B9/$Pl1b/5jq+:2rUr%;#;%.ZNG'>`mq/E'H?kHk"sBK1qTG
%8+AGNF.n+dQ840a28!a'l2njO^4q1IMPOM*ZTl/.Tfge,a!e[An(=$SDO/38)MH8A[,91p(geL89*9JMHfAfPWf=/%MrJN<Y1A3s
%;OP-@;^W9tf5S@>^l]F@'OQJ(grtG!pX0F<nML\Q\.jh`YU@/>O[>R:'OTn&'0pc:S/ZXC!E0-gLt5-,6YCW`WDp:/UX0l=QuTr[
%(cm;2%A6HnkR9dT*BBj'n;5m%8`pFo#;l[=_[(>hP(iP-NQT!fP0l+$?HEOn>t9oVU5ts7bC5`JG/JoR9/^-`=:_\$d`SSs*D3(P
%_l:q#/8Tfu]X>+nK6#J?g`B+$_sJ-RmUJ??FI*gAYsfTm;AJG@>\?toFlYhW3i8k`/#:(?FQgshYNL;(Q7bd0UgjaFqpd]Zg9W[g
%U`<3ieD];B[S0-?UdM'd.0.5RF>oA?kCpn;Zq!qo$TJnl#+JGK.Q414Sm2f,oM/A%:;9Np?0R=](7W3nYGr_:'@qug]`uANDj7Iq
%*&h1@c&*W5QMe<V?n[>9`:6TrRiW?%j5W0(j'AOd8=[+6C=75rE`a]L4.h`DQQrt.ImKL4/JCTa-s1ak-B:k0bP%]u!!Wd5!hqGi
%]MUn[N.nqND-uE6"_jKE<?#hD+X3jt%VioW4T`KkLaIm.fF3jdA+PEo+XYu1pcZ+fA*P+3?V%fXqmY:G/--SFRW0])%5.a*Z\mOL
%+>6U1E)\WP:3h%AeW^)V-q7NM2m\0WBY1WK(5UIK=H0\+"^!8m!'*-i(rp7Ri[0ST"/6f@PjZ,?9L4FNl^3iCaL3]=KP2!H1kSJ8
%87[P1egBEb+=)!UhD@;3P74sh/inlY87Lp,7&E!8>6Q6!H\MP/L</tj"BY[seBQ@,Vp&CRoGD-`0#k/KXb)^dX8ut*fEt)J:c4jI
%L6ctD45.jLQ*cm&gGuCWTcJdp)TXYun+3cd"%"[dl,@CjSQR?U/lr^'_RC;>as@o=h(Ol;jpHc\HT$]s8AKW;[MVT#ifNt'8.0=/
%PH.5^llK)8%fL,+)$D\<U8ooP5((q-+-7U\Vh6+CEWFLIQCqmWZj&*eLPj&STjTImiYGg10U(EjYTP&S+uM0u=?XJ$c4UbD"F`[(
%Be`.XcrakM0FSs7[.5g8FmQJG63iSLmDPPE;?aF_Htf"`DZD_nF4b(^=^U7,'8/c.$]&&C[+-QVO[uR3eW9ZUcu/8"AE!V^);TBQ
%9B9(jfhC-Yc2$;08'p4kQfb8kVZ_!K;ERbeA@/SLWWVQ!(Jo^?DJ-[o!4^1(5U_>HCJj)eYT"V+5uN`+UPO^Yd`fB8;#4`>eDm$Y
%[ROsO"Oegu#+CO(2YP`G?)*ZrZc(%CE3p8iWMFtLH)$)q@gCN'?4tjZ3(i;VSsBP8^K@?`(^:?2,+0B1RkC'f]'7oOq:O@#Ur18'
%0rEt%Np3E\EsH[W('h.&=VkB+RkF1mR+4g+(iVcb&S^HJ:`^bjf-I(mK'oemNV-=FQXYq"`m1pt0#F2ga@L1H)(-SG4GL$I!]_WZ
%inB,1C$Z6[^oa*U3E$:-&+UK?$Jggj*+e8`9P5i"L:9:D@3FIM,0hj`#tZO8cEY406AV`-Y25MOB$/e9i.=L2_T"F>@1:DAgRSO*
%H*lStC:WS]%%KIaL2N5LA1q$dC=JY>Q'W'=W4->HRAMT.&5)^&=n')Om!&ud1CQMXA]>;IPU0/E5SI5)56m&!Q;S0SRqRLK0QuT&
%SceOheCJ=>\pTE(qn-I\-R`VFBl">U1KJ'3+I&/nD[djiOTGi6.,D"(JqC,ippZd6J3jN26s$Y3fXhmNTlLa>@:U:A"XO$d"DV(s
%`=e=;B^Cr(Z2t-ZY0$?Z_W60AinBh;f\a]'`48.IK.=2OCPDS;W_jEb_3G!$pa"q]-4CB7J>aQGI5:cmZ#e[$7"k:C;,ktY^cNgY
%k(<dScL_UBV"sj<C@0N2IE_mh,UlcQD;9+>CBdUIUg=jA+f+g!aW0lX9o,<2Q>0^6bdhS\dO`L"nHaWH`XX^Ue,TLW'?beqi>amM
%>R?6len.06H?3R$WMkmsVIaj5$i*kt-??U(Ol']C7)Z+abT#$nT3*3:k/0*8&:+/H`7TbH10JDC4,a62\2R!jp`Umi,j>[l<G^e#
%E`'(qp*CnbhDS-L$/>L^"O^#[\S-/,G1;Bn.Rs]-`bO,[7\"0(;NM%)?nTpuMF"!#lr:k8[_WY#?igWS'B/>A"S0o6^hE)N5DY''
%<Wj;aASQ=`%>5;bBg=L+A:jRj!(f!lA-7@?N+LL*GT"(=g2nF['PY$BnafYSc<28+:'&D<OFO.b.bK:[--#@-Kdp'g)[<"Ic:HtS
%&Q_%ecoLb:@fInZ@)WY^=A*p&@:J.r_1HLSP$Hcn7>AH'Sbl`T]bI4?8-hXEXaphIU^:8bVn#*%3h7D-GR>.g$f@99lVQ3pX&E<.
%9'JH;8sV`?jHXe76#B8$Z_B=b'mZ#8=P@h6V3,uD>Ao@\E&t*q5DK8B-_*Rgj("Loi!C^LmP/u2n)M,j8sOpXKI"Kh"S_u<3D9HX
%_riFI-D$F!\jd0\5'R;!^$k!kFkU;?h!Ro>jq"+NJf>jR[?X?4-PDi4,1X<M8"G:Z'6;Jd72nTBe[5N'NLN1pS((nKL^'Q[Vn=F1
%j41/::/rLa?s(T/64!OO(<N)P-QtNr*Le/s&:/"%I?6_RUJ4V]\@aMk6]&'p&A<d:,NE44+LmsIJ3QT?T'4TfO:VhPGYX[j>#CfA
%X=u-gKG%H"0@EV=$f2O&p'6Q1&.4d8knB^DE`RJIR>g[L14DM%#`e'8)m_>?nfsA92q;+f,g\W3Z8?kR8u_5\U?K8EZ-1a,0#_Ii
%g.h:/T0/GDj`uCkV^>MWLJTQ_ChN>=E..Qo&8cF@(X`Z9O`dQNje/V\$514TV`TmIXqMGhSMS>g+gdNGO:C#dH-Yi$>9Y&"ZpKVS
%97*YLbhcbZ!m,_&SX7Og>D`lGn6@-jUMs=@g(@h]KJSn;`6p3kXp!B)iTfp=D+pa[P%GqKSj5C?Ufqj%N97"Wk!jAQb?Q_`[qoB[
%DI]1q$minW\QH5=.-htP1^JrmbU&NVU?jXn/0Q_X/E*_(-IS+.QD<"TH\9ZOI?C^IFe<M.*ZHVpaQde:AEo9>Yie\]3=1N^;hB<f
%2P+qSd02R[m'F#j+k'&;gbZ;Nq51"s-LliqD@ZV_b#%H9&HY).7\r6)+!d(DLb[>s7Kk8_<9T7IHCReA-,qS'Cm!Uk%I_#>B\L)0
%=snk'm8>Me;+Q9KQB92AZ-.]2!-cf><:3$UVe@CS(>3e74!gj0__+Lj1g?eQPn4"aW_4Lt&:Wu>9_8kRN^>qZgOW*dEXk>9@Hd-.
%#2W-Z])9_3O!TLiTBYW:CCu[gF@*Bt&IA`jWgX(G6up2@RTS5&$Tbl%87LpN#Wg5\2bXR!MJhlL6=BU3U$>0NJgRFUe;kUq,'mV7
%pE_g*5`coPB5<OW991%uMuXAb")6>[a<?ZHO3lC*3,"6VS]3(<:h&db*gJ/'mMuKq7H\3cKYU?h"L:3?ZO(jWO`)=ggds)AV<*r@
%9Lmen#t"VL^i=XaMaj<#M)LAV?3WOb?(`33,6=;V^`,8gSYgu">/9uWH.5:h0t<+BlW-Q=_EbtMC'H0tdq==E))ARmaAU0nJ,k+Y
%*E5R"=($p'SFfo\LF:7?53bl_q$q,$Wa6#DWYJP?6:LtNJR-\A/mIVd"u3\<PScIf<!l"-N?%[%UKB-N6LkUQ_BLFpPt^?"?C$&g
%[ZD=f5ZY)kX,(TrcjZJ'ZuDd4"g\4h70<s7c#k*@5JepEL/-l%p"]b:Jsh1DJ8h0>PYSd^W1G2B:M1]A(DXuZPQj$t\&_\!/)M7e
%%MeAM$gYQ@&Ti:NeL5K&#h4XA!C^u89B:[0M,AN)&_]K8."J;:KqdqFGSF?1,^>L]M&(8co@ebl<?;,\<oi3YHeb9Ip%,8S<.VI9
%5q/<eY?sPA#GE?dUh0X<V0a7F@TB+dBs-83FrD[#"&!lmiggoST<pIOY'gc7M-N^S.hs=[KuBP'&muVOBid9-%O=^aJ;_73TnIob
%4@C2Y_\<Ap\*0.II9E;/M.Jr?,a85[iCS1!$EIl_MOHo-qT-T'0[@.-Y[=HJCG-VaeVQoD0p9XO`V'uR0qM@<lDK8G%iLVdo=tF\
%IDu3+&/!P\D+Gb!%<Rlo64/339>j9`9f&Y?F1TRB_XR-$pQ!F]-")Kcpj>WZJi6YNi?_HXQk@'2eneV9Os(?(@>#a+X1?Db67Bt+
%IEPh,/rE)[A'1EMUO8?@Zb^22BTuQ;:8+A6qA]5-V,\+cKX7J[["^pg8r)A'/d):c&h0q-kXceR$:kOBOc/2<TgYY[E)L]K)#p8#
%@>$,s'e#m?T(!^t_9r^B:^_WfcNE?]4ua@p$CeZq>BDGEDF7ggA.u)Me,;=>KZtmpQbR97FY`S<1,4sK#Ib^EA%P,3$nR&u"RHek
%+9McWR6hBrKssg!IjdK+W&ZY6lJ4b-V1@q'<L67\C2Pkh=q&ji-,q"LS]Phsmk?/3C<H6r,o!8\P=RaIgt:9jMQI=S8V!jPr25/+
%@(cUlQE6@eWD#Wr1H(ff.'t^,=Nh&h8]rn7B+P!-pUH`e)rur$'Y*7]LA`fr>bsS,+fjH:!NqT'/0Sb*fEQsY-KFtg>6.5AV^F&n
%<?_qV=%9-/2V@0G:a7,n"XkE)#RHP%A:3_qkW._nn7mscM6VD(L5X?]iS,R[#t:B''$=1.,D#]>EpLAJR'C5hI_jp\.8?IaS!69m
%&k`Y,?k]D2W?CXSGY'3cg*JO!]!E1SNp0?HT.6PCZ(5a+Z<?g?!=geROstKA1HL("IYLs*f*i1-Das/gMT.=jGNZ'=1'!.Q#pm5o
%%"r1dn*ID[h_;$ikZA%mFHpp/JB'1XC7o'S%F<&E\+8)tTan!YarkP!#*fSCY`_#7L$0=QSr'c[$EX[RK4&ri*$SpQ'&oeP&eUT?
%`>l"&!KAb5EI;&E8/m3p54FaP.f.LJN"mnB/AV,:>t+O..VhE@o<,7+NFN]dhN1*C!K%cb3TW]j.$W?UiK2/mFW&p=$:TO&?Vp&o
%e@X9Ck."#.Pi,qXTo&/`L'`JTCoRa[#84K38-[^?.7N^2Z)\'p5d094jNr3\h]UQT.pk1fi^/0q$@Hcf>QU]SU=FgP`')pA<"6_(
%i6rH5HE;]$CrB=$TnJJaV`Nqf1CR/n/_Vce)OmF3<fQ8&9g(VRWoOif@=DG`FTJL[T2nYH%Ds9)1qNgB.VN:"NFn-bP!#pMn5A#T
%)7,0A`#4Z9-.="F@"B?]MA%[MH,^"Enu"Z]PLm#[k\->5rb^_9Bs/BrI1:ZuD]nD[HK6k8mH>;d3<?PJU'+2KN7+4OPnkueok9A+
%c67N]$51L`KGYH'p.$7!K:7m``F*Zp:ak;OHe>ANj[mcP$*BB_d0n"Ucut(m"PQXpFXE33Y#1CdPZ/\D+:-(,)/,0=n/;9.!6_s*
%q6hJ=gR][dge:7<b5?iZ;aSPcGMkh&aKPq"QGtP"Cicl3!1kfYbnupkA[=)<cq??o8OT]aUU4uD`$<@9OnEW(8lVK!KHs:mW>u/?
%K+CK_7o:rp[QWZNVZatS,VaJAq*N%nqM)8</;W1Og-ch9bc9;#T"'eE0PuIqp;pd<*&bZF/."Y2VIPDfKt+Q^AipQ//XN>s/l56t
%.'A:/#R+;XcUTO@FHGiU!MKq16bDbHR56UDa*cMP;G.X[qSCdB#o>din48noLgHI^_\Coc\5sgUV.2)d?6b+9>5K$IH&t;q^^'D?
%eh&H.?;iqR.<LOtdbk\#DX`G@1n<omKq]t>Y&;V_Ask(.7mOs-3^*fm?1EfNLKk-.^N:lS,a>k!X5JY:*_MB>WE_&/YhidgD=q_q
%r;oFhmiZ%<p_@I#>KBj'phCa)E)%"7PZDE/0HN"P'BgnQRjZH>=c"SXK[H9`dK(q\iR=>7Mj!7-<JeS(JYeSkDL;DbYcs0>Tj$1M
%-r3A8-k6P4&mqf+P#*-1W0TOXO?fVQFWKKL_GF_.b7((N>K<sd(r]t(&r"PQ6NU4I$($KZ?:#?QGap3#Hif:u`@**tC75tT.Y/?e
%Qr/\:`$V^&a`;?[!dO8=p`9k(3:ks@U->@cCs*l(S&'Shd/q*e="uA=U:8-5FjSYZ6?t%rC)D":Qu*t>*GZ5OM#_BtH5R!5kV?7a
%3m^OG+;HI#%XJWddAr*M&/f>;m?!D08UaDMcYmM"qu`SnZ9&i>r8DrYe/sGULCP-*K;,$`FdLiWR5(d:K),[%*Jq:j1mIK[GP&SB
%rK6tHWmNL8",')89n<\OMi'fp7%0;$_A,#V#K\C"8+:;Q'2;15Oo/iX<YCLkJ/'.mV(V]H]pu1WW%iBH6AdJ8kuqb_!g(KSMG>&a
%bQ;GfdPf,_]8cu-/qK0.ndG=cOV#Zm4$F"Sa:ST'W;NS-=g_BY%)?Z[-?0W8.+&fle0;BR2iOkHS2rdBHPMC8KEO+f\bipq]Knm@
%$,.ZS1&l3t<O`7KIN`CZU1,X[Nn,Ng2h+YJ.S(&#YAFZZ:bec-+_[AUA%q)_3ld)\D:MJ"(EOIURJ./#<!J7,6r"^7RLc&H;<X0'
%eC6>[+a;8;qLjACjQ(Rep80:aB@_K&M/M!L2'%q&QY[hX7Li,N9GVGP).P[K>ri[**S3FY8MCE]+@i7!SM=@TQ&Ur;#8.?AXkNG;
%QP)mQ(7/Qe'#+8rLJcn[A^<%GaJH$X2J%t>gW'I13["ogE,J9;D91$uU>d,VJWp$XZl70upet^j!3K<p"k>mr=JjR/&40d/%8rnU
%"0&]F"W(lg!J`2Mo.#8_66Li1e<XW16FrW"\.kj?K5S"lG;<;dES<ZCj9o'TQbdD;rtLjU>r8Zr&8Peg8l]O7*_<(t#16"`"Y[#D
%:6c0[,Zj0"!<]/+eq'7e'urIZ;W7PH@Q@g+ibglhXChS31=`0c&<b8&/45l<?)'bg7%GLCcpIN-.O':l&<[Z3a9=o95*Tif47\]#
%-$6sGQh$'olptUPlMY,qq1u!6*sUPh6l5JfGN4?E->:V*66R/7,'?I^k8#o'm$Idh+G]280^'UD7!Ug!,t=3>idR+d4h4Eg,.b0I
%_Fgso8E>@B`^r_lbd$19aC#+YH+M]`A6ALJ[Edn&g.O`Qa9lY.%b)+-aV#d3iWp$)Sh?8sDj0,)ClWS_0U\doE:5:i"Y??d</C"o
%)Y&T;=Z)j<D4*6f7@b'.&qJR!S4tY*i]3t9C,chEfHucpi37t<!\MP+F-^ZC,/srWd7QW(FKZ:#"Zc^-kqCrA5%ML.\_F20\Vg2>
%ck4Od'NrZ(Jae+#$3^h[1m^Y6gXsGD+Xh"5>b.7("APj,_ihqj;4W)O\I)7i.RmKVm3lYuE=Ii?EUJIV.PW#<S\ttB,@VH/kp#Kc
%'j@NCM(#!+Z5HDYjGKrsB!#L%O,elRG$(c-eYEPR74^K5;("sY&,YR8OF.<9[o!_djt,$`P)(9[Z9"h'fZ,jKfn`]fAhC$/\FH>?
%a=>RHndbPAP[Ka\a#dmDK#J5M.m;:9gF8r3n:<RD&k*!Lm8Ff[DePUa^*tBlO1TLLjsjKV@$<JgdjpotW@ei6JZI;D)j+j"'ecEE
%_i8B@pq8PD,prC:CN_<F=aNOO#"Aca:d1D+3QL&RKI#UjGo;QQ'Wi1s'QcYb%2ubH"`DNH@rs=,'9Hon7pMR;Hr);;$%.=tVl7tT
%V$p*b`"n-4;5Ll8a&P03%hW'29>nlubcAu&e[,<4(M;eR<^!7=Rb5%81<_fNM\m-0etQ;Q>aU(Y<tZkV6d@rWS7t1BR!l2pD9SBf
%&.DQb_IGpN&d;FD=(r)b8&./.3/]4(!Po1J9#kJ'W,iK6AP=$L7Z"R"ors4!&oQ#p(/#p"ABiq=+!2hi%Ib]=jlg+pZR3h8bFnJN
%,j%K=%`q+)^`>e_MCL)uO1@SS=6[Wi*GS>jNcLDmme.^.QQi>o$EAiu4s![VpQ6:/c;VrcMOMp\1FgE6?V]>[#hXsp'sp[n<HR+Q
%";Vk5X'#F4r%%&T_bu>j+PFZ8T=84=/P(Yo9L"+E'o!TC.lp`8D+B+K$_-\$AVKKoI0Q\/i#`",d,F[pST0j^Y%[!sch7Qp!/Lj$
%]OI9T:6/AO](=sd0"XLJokKRA>>0>^^p?l(g9A158)'ItIBua8pcX`+D)uIfl1jFn7<(Bm`9;?l!#75V2<Q^Kh"d(r8JQFc/7#B"
%#Birce;lU!qb\SX)Dnl-JSuk&-?bklGIKhl6hfF@_H%\`FMaPXasfH<^Xqd3%eW+ff1tKdkgH0(Mpd*t:W$`QdehJ69IGUJ70J?(
%JDj[\`0fg4$OX%`eP1VTJ7YFR_c#D,'U`7#9,(OMkcU[SF]]@C.YU]rC.R!t/%`)o(1Qd8_"Y1mWN8>nUh]sF/m$W8L>L\GP1lhr
%1*!tDBa-7Ogg+!&*T9N"8</AEXQs!W\5e&/S4"G6<#%7J=IrpUHS'SC-o#lU;S=N*L8hQ#`35?V2N,TWP%4qbQcVWX#5$tW&tRNT
%*)LHp$T_Y%#j<VH12XXK[1p&"?oMB"J]>,,gD-r6*=tk3m0`>gRFT4g;7cm_(W$[&;7clt@8&p['=B@[gIe_j8*pX7\m>X1eC1Q#
%h!h-IT(KB?0N"13Sot:'iQ\\&>#2a33'=YF&D#)hm0Xh^6-`D)])kK>6r,R4cXBaUmY02+=U9_`>;/r]MKseM*d!:u`t\Xe_a9dZ
%9@#7DYsK!g5cM_`q^K<Df>7S36tWRd.>5geN(DJa-rf,,(=cJ,Tg.m@f`qaK!-bim!#Dk,Po2Ik"B9mtN$q/N6ilXP_c"ShZI4#W
%SHN&H\d,S*Z8=F"7>ii>)Om\IpU_@k<I;^TAVk[INJSd21f^),l=h#cL;=BG#S-m;D@1l<3``.L@dJh&3g<"f5E+$i:87"TjX_Rs
%Tie%P[$u/t8h2mm+AiBh7Z)74]0\dhXkP/3T3`^l4s;Oo;Ak[LP#D7.+9S3>'i-`BXfd\QTZ5'LdQ^QuC?In_UoL757.O;$XWSh4
%$V1ts7!q7VQ(g8LlXrU)]8m:E`a4KP-AoNGC2!8E+j:"^OW+ZB&dQ;eJhMeL;h?I#_qY>cSn9I(LaG,OnN,1&c:B]f5tIP`>UY^P
%+-0r_UXSB"eGIGHF(lAnj<1TWB)qZG_oV%cZTN;*:aT[g[BR-3EpYJgG9i=`%2(/4_\,KX1a!d*42HMg^9EN?N1Jq'EK!^$61GkH
%FQaN-AJ!?=1G-]NG9C]%Ja"e0b8N"!d4OBFX,q80YW5jD$e9@+#2GImkc>V(Wjkl&U8SpY,F]K\'_j8"S"sb#7*-?J`F>_uIq&t^
%NLK(#a"o$p+kRdOpSn'uc1lXBd=i44XB9O%4[KqR":DO&?C`ru*@)nnTX:)!.bFJ##\DoqDn%2u-n*ZDj3<m6Mhg8_>!\qf6>H8#
%ODI;lQ)t<T=MeYOaH@Cbq\2UYRU;O;4i?4=[k(3J63'5Q_?c<>pTf[8$[7[^+,13HI\]bM_Z#MHfO:0TKM"gT"sL:[3dt/JaZ2X[
%`tD:&(acpr2`j(_MUk%&B9Hk_F#96t[XBDUZaX-JE0C_;/6buNL1QjS<mCn[P[D?aV<5rec_kSM^TL,+YObgHeC-c9(@(-R((0a.
%22d073i'_]4h]Dj+_*@BDnf,G0i0m*3`DT.L@HCS9A)r*%(8O$M:,RQ!84;<cSl@b:n8j=;.02'c)@N*[/UfEbV3R\YaLWhq4jP>
%'2ihYo-V[h:\T*8H'#5#KKcB9c;[mhHBggL3KhIjkP(5G0+1@'2\lHg8oj8tkXDW&<5X#6ecDQe1!DK%@"kS<dDR_i5F)miQu*J5
%F6%ue#u?0S(pZtI4]IIG`-Wa1X-Y8s@VLZ9&/34WY,NrtZ;P.r=ga'W<GpWNY/DZM(qU#%hSl'p&p=7Y=L42&4\]$FiFa<b/d?,A
%4'nOfQHC>6B9;X?cjWS?Q0-^&)T0<%)ULd6/"F42T*mIYbtl6\A%so:1Y\G->.Ko4Pb]5M7!..;'rp_%@9pU#2>3usGJ[5G[93*,
%Yb31?:o>A.hN<D#iUh=TN7p)9ooT5M>uiR#!,PW"du6OBTIQ&<R;Al1pdk_'[lbW)YLD^a1sOEEPr2D4@0RY23"(GZZi%1&"hItk
%G8I@*R'B*lfYJ>d/.YK7M@#:g`pQ-m^:%qo'u4c$Z;j:nC'0\Hj>Ah:RReBdP+/&u)jVfjE5V#O88]FW4KjCl#7o0)c76WUJ2UE0
%Sq^jt#3=GAAaH:lrq;'pfqT4ZlX>Z8;=7+AC9%sEEK0F]]I.BE5aUs`=X['f#Ibj88?8l7HcdjB%%8t1qiWaOU@Ne:1WN4)HSfg!
%'=UKr`nbcaK]52/I6pfOh[)U^8CB.jCO.<5!L+t2,C<T/pBrET+:AA>.Z"&T&oitm^NmW'`3FgFaU(:7A&:5&Oc$q+AGSXmBL!p"
%UGBsr6:arT32*^;Tg>D>jTGo.XaB51G)1nRrmnBF6,H/>bOIh.HB9X@bc.3M*q2MFUC>Tr'upPAL5&I#`aB]\h.D43/p&uVPtDX1
%GHm`-e36Td?B#31_$3?XL;`3Y7JV\W$O:q@#f,&ToEJ/*H,+hJ=.r<YOQfrg$kF9f$:%ApAc%kj[#"L=W;?&#q=26[mrVp]gBP6@
%#XYQ2#d$r2dBeT+;jgdZlK+$2]?AZC.`26>;enKtaD1U*91:*<]5*^8LD$P'Ej_r\VO,>B1!-dhRmSP[X^5Xdc-NcFTts/g;p1TA
%:a$a$\@O,g-Fc<6;//?_5&5Hj(r,X'P-Q7=BnNG@L=OIAX1\$j5t,XA%Gl(@EuRb_Rf)!dV%JQg!!_")%]F]D=uU_Sod(E$%]SJ.
%<Y7Bp[aY\MKd[=ARn@XMTib@7Nd2=A1GlcpGAr!!e4O.&1qhgl9$Qq"b3+k0%mmQ`)-;0c:a[NaEBh-MI!GJ_ZpJph"D:ncGbXjq
%Qf]et1F.qCm51@9J;F?)O9lmfRH]q=dqK8OB1EfaZS7*;JS"*YZ4pT"#Sa>\c7R7*O`i#::4cG<)d&M'FYTCC@iG<cTjnaeM*go3
%m^W*:,WYrn^fHWC#';*W('0-H<7[5Kr$PF2<"<2^fec$]+f$a2;T!aNRc?D?%NT=[U3\bm78b>04X#q:P/K,cO/LIuN/&&E%&+0!
%8j;<iVK3SKk<V/#:9!2q3gQ/tcj9m"F-VLM0Gg#>K8%aF(>:X:cY>S,)/C)0ee#9mWOuSE8FtCJ]!;c5AjLXaSGQ-krR.SWVMtgZ
%Y72Xp)ajoiN*'s97@b7;1Fmc!"pe!W=01L<L.!J"WRJEV`^<l1LX6K*jXp*ke*.C@;(,1L@N<VV30bNTd+;>kj-=.q.q4)AJEbGn
%7:6fA^7A$"3Llc6GbRteU)hb=[3'>12OL@@,(^esWU+diPn%q!PZW&F7I)e9f0`=`MaaL+k*o>\l<M)J*3!bR4&j`KEAO.3G<D+.
%G8PDi'FJ5$;l-ek/#HL9dk[h@f\<Z3I&k`+PD>;T:T&:-6D`tp9gWM`e"M1'MZB&NR,h[d0:-B(f]/ZIg4P3lVc%nhTtD'sgJG(/
%28lTYWdY_Y,bi'AFE7$D@%-a3K^FDjhhR?8:SX]Z6<8i$RFPWh,#dtY60C/)jn;$4cK%4"-c"7"!f*q<_6bNm6Q-sbh_1\f=Z*VW
%_LMh#6Q/6!lR4Ki2oVKV[LmGsc9lX&\C0A&2\(n*E"JV?9g-K`gOfoL1bu.DagC1X?>+WqQ"aN+#./EM_4`%]$l0I5Pcf@mUp&^:
%-R+7$]a;u/BKMbnNHp8#p_hL0BNi_*0/L:_dIcisa#?j6]1V\3'Z.JuhQK<aqJ^C$W?FF(#'IDDg*b&Ojf#1oHYIH2X\L*#X5=73
%)Zlk?Ml(\8o,HoG<b7&h-/,_\B1&,b*T)3\E#6!_rSY="ZIO%NNUMa]Pd0W(=jSU.@FKT<eounn8Uh"iIsNKUn_g!d6b<.(l4Z.Y
%j5?$UKnHrZ:@4tCL!\ki9q.k-UPu*jK1JFX":<UrA83L7_*'BJ295>Edp$W`DpruZ[nkm:BL(J%5oiLOoJ.H8'QmT#<A.hs6OPf?
%8k>\KCauEI0hc4)6=O,&g>NKYVmXZ1C^>//lOKO[!P%0e^l"],Fm\Q1lI=D%A&n"YI$<PW-T&Ngnaq:Pa1#=qhS=D?.qgT#V#jo?
%68E*X#t.cS%KRV?..HJ,["nD9T%;TL$VbON5/#)5n\*(n@,Ug_kD)gRlL&`S"#`k`?s%HIGEnQ20Y!.438*qYn\3,jJCa>@Rb2s1
%S\`AJfFmlL*5s*"JXii8/4)\M%$F":W`0ZE3tTL6(S('"%&C?I/EM/=-pI8iWeqEU\^aOj,eFE6@AkG/,GOsgT(>Y/4aF$mjh-\+
%_:'b(=@a-iA4V*t!hmOFmFafO(ASX"n#4[2%_eEl7dq,-_Mc9L%ZaXVZp2SGV*JA2$)_'q=u/ESS8K,s0U@gA>=_.:V&[F6Ul(?_
%1BSCA>cV]LZ,10.X,d[e7f)'IEl"LDgC*8`c9dsB,3'5rj:$qY3fkN@.<IAi<rW^N=i:hTQ&PKZJ8;!,-$`Wh%][7IG64pdFJ*Na
%Gu.SiAu?T%F*`g>Nf1E*&ltI6%MB%rFBM3P+73aI114ur(#SREk;<?CgRZ:i$ikcG20b5d/5))G_:2pR&6#f(OU6+L,[`l<3..,5
%UMTb[nC%e8%bZ?'4YC.H/j3@uCMYGpI\8MJ.TLGJoMDO(HAKdH5n#hBMT^l`d$u9leRFU?hgo5[6U7m[K0k0u]SOZ3[ZGW7KX"0`
%!W:Ld[Wpgd9+2st[?3c>!9)/OB(X@O^eB#p"laj=NX2D?8ocViOL,99U$*Vdb>*ZX+CUOPJt.^oAFYLF>>&$>7,B9WEs#rf/Jo(N
%"d0eYB2o>t^p"g0-'1g9Gmg#KR9+LU/:AEhZ,.E26mDMoZ%.WmA?"P+?&LN$kEJ7Nh,JrtbKqMGZU+j!JK5SaA1Ah.JWL/#L4q,U
%Jq,9qV`=`P[Dm/.6*A=;iU\EN4W/WURqt7/;<_b,%Y9<jOA$<03cI?\!#VA-P^D3od@Ls%,/Pkt]nOd)TTE]<-6s:kTn6]%ZM!i0
%'=R!)UcMH0Q5k<M1l3*FI3h;rI9$V)K2;TF&#J^JXI(,ISH+A7$.k&U@%sM%&iqoY>!WJEndS/U$JQc=&YbuLf;qr1:mK;Gd!s>U
%p.G[VR/ip:9EWn##<p[SWs_@HZl^iV`XRY*q8ED=@IukDpWZ(><YE9(CeO"1GofWf>g2nt6R&RBHl!_P#WRHH3JC>[or';`VFoGe
%6r792=tcgk#5St>=`"_MF<pmL(m__+$Q1/h2GWeg=%,YHMkes7kL&-2kHin(2plCb([)Wq/CRm3;=$QVEUFAt*Xe<R$Wg8gqKM#+
%^iW\$5GsXG=X(%CO%\<[3<P+;&hQD$Y3O;eA8^ck&YW#laAN(/-.\S,ltg0"&LFUq,go!\BCRIZaS8"E;$IuR8@BH+9f5fcr66P5
%bhiGA*O[HnWhMXP("pP;JdpG%X!OL*U1=<<R?<=,80ieM&JD)LKccO]jjoVBU2`g<p8F.1\#o^<Tesi8=X82U8_??D5!U<mKl2MG
%Ng$HY"ja$($+i>ES&e-%<V]Wt-;Tj0-M1PncUG4FLBAJ^M9<X:e<uY/\s9he<KH\X[XeFY66ZTJ4rm;)F\/5=2-:?2>U.'-^H9oD
%WC&>7&k3GT'8>.3ab)o:V7Tq44"bV3R^(9ho;E=X%:MYE=Q#84"fh1h:a:JkG4Vpn&dWDR.AgL!1ukH:mL;]8]H0_m!G^:MaTr*k
%=3#Fn$!$N3_"P"o2fm&Q?+9Sr#I?@c?r(5M``d^D!sqbY:o@&?0_Ia>h983BD!6R>`D#thKnKlJ9eXa3cO=AN(rW=+KUH6ekMi29
%9h/t<;1Si/pT.jKA!T\(Ic+W[Fl+I%b43\PMT[/RRAL>hLUr;Y4js_N]MOHC\D>@?P)q$Q0N4NQC<"8:<D_/#d)IjD$.T5WZOPo=
%)akH#J9Gf;H_$L"IM#66icm4M+-76Y6Xc^pQIDi4`e-hbLX6Q,,r5*Ze+jQQF"/5,br?b<ni2:TEY.d%0FGuhA=1/"#_p$_4$X"H
%[4'JRP\LkbEhP,!OMX5%9s>4@.(u-BE=$ZH:gD6"-PVh7pBa7leq8W&E)@m2m?@4%gnF=)'BZ6gZU#CJ8[bpIe_R!pA`'/3FRt<Q
%Rn':1/j/F`ScPOH;`a3]6&LQs^e*7WW1sSK?\@apQmRSOX[0Io8(P6kp,!ZGP+<f4[YF0AdLpW!X)FcQ-P-WA%\a^gc@H6De6t-K
%p`Y5XoWY6m9?Lj[cl49I&*&&8TR0/\BI;i,27Wf72TX%FAIY0?YiAg7r$LM@A<j19Mn8,FA>VWQ;&lm?*tNbPYZ5,]fEY`f.B:tQ
%E^"ou+pb"rSPo&SE7eh0FXT/L`=,rdiV?K6?G;F'WH"h9o-:CK6!12ip986/C"5\0X<h`kWe(gk6RG^VE@\/aZP,Z,0Y/!]He9Ml
%9=).J2Jb::JKBVRaZGN"P=-.[cSFR/!2FSu%d3Zk%BqUlOq\g\(3\-C8IbRe6nPsB(_j"5E$fJjPnclt_kT+u).J1`Dkj8i=9efZ
%kgX7p\h)l..,gCJhLpQ,An?L`5+IJooeZ"o,kA\+#>c^e^f/,PdZe/@2&co`Mkpsf?6&#R-.2OU=_hh(+t1*\.UkO,Tb_W"IZ-=L
%&LAkILH)=;RmpYgR%6oo1A'/%if_:@MEIQP%(X_>''qX/?R)?[`(8Gd:ZcUC-76YFjr+--5d&n7s,c6%;=lVmHItTNaRbW!(/%31
%k]Th=4!*rciLRP$;Vir7W?<qU@FcU]6K]64eHUl/d#kD`#*f'i+t@\bo!>!&-_`ptVHPkVM7?CG.1rU[A?Z*BJc8AYN^=?p@#*3]
%IjhVAX9FbTGIoOWk#'D=EgBuL\/!FX7ALUgn8[Aa'jo"<q)Sh@85Kc:nd9oF8;lU?\!"-cZA=0f6H?%'1iiuM5:GS@3:-'98l4TG
%aH=mrb+"hT,Z-gNWZX\>TgI_G!-/AfLY/G<$L=\Q<7_*UWMgMa&tQp!A3h*Tb)NNtRWNkL'\@e4j92/E2MZiO-G-Yfb5nHnSj5j-
%Z;h#Q.Z'@%(Fc"Cb[;&oU*27`,l#"Rc%pt7.d02$Tj#r<5mHSa(;>P[.rfSI4*`%3kRP!]YUJe;]@@fY-XTh?6paX8:c_:3OP43]
%K.=#!UL=M,Rqp?1qrFQ2i'7@7$_+qnRl:pt)>EC-g-dk.S8Y5bU63*Ml3G>t,L'%UW/q*,E`n.tM)lG-;n#B0IV$H`;#]*X2BcUo
%?pE.lrSrS%0"o:<Q%1kT$'Fq@Dj=/9^Q"Kt^NZ&M<qiqR,jo3gUMs[ApsemMWQ'@6%EO4!^J]232+Sf%1p(seVa`)PPFC>8&B\i/
%e\]WI*%n:^0'u1HQigP\SK\BdJK8Rc^0tP,V3@#*,*3U4:)>9$Y%)oWW_o!37)j647mOrRC<I<[8KSQp,6E_E2Rp8uC'^1X^8SGS
%&@8J@lOU6a=`&e6.K_.O#bd3\c*sp=]H'p_.Vl4o-_QWPYeqaR<$X3l`gSYOH\Xmt\4P(-$->Y'&m"X+Duq6%i1lqP<KEP>U9LcY
%TP'2I@Nh/`A]cID:Vd[S9^<S#NsKhT91[F+mhq64W7L%,U!t8e6;n*X/?Vq$9b&>B'#stP.a82)*!N%A9&1:2[a.<tYrCYgZ"<qh
%WF4NFQ]V")8Ir*rE,rGi:/R#Q$.ZP<^UY&0-V.3j]XFk5;dT88&&A*eL-*j=Q($\Vc#gW@^PtqQH(irL)X!%m2mVaKd.e:V$3eA,
%OL6jNJ_QtP?8*AK2Z9f\$_Y9=TNT[hCF^4CEX8Mi4QTfUi$V6U/kZnq'_:(ijAH0pT'd!H$++>%%*6c;Ni7[)*pN3b'6DNI#^aZ3
%BYFtX8&[B6--QQ?$E%[[p`nP`+Bo#qYR+aK4jbJg3%>>nlsfT9LH"G+>Qi\r5/@]cj*@\tO.C?`B>Hre+\E/.)hOhnr,^Q+gMrOV
%:#sm?VQ:@&XLF'1%pCV8"!?AH\s+B(906>/2lOtqo&D",!YQf*^GI49/0U.W5.2WD<$3o=&#rQ*-eLLS/J0:(,3t+,385oMg.juq
%il?K+R#:d'X$fr-f;U_Jdi\c?7Ymd&!!)3F!\8o?I^'W9XN>5HD$GY\(2t#.TrjO[>j?<KO::Q4?^dkJHk^E"2d$]QMSaPh/Kk^9
%)uqNZ?0/e7Td)U_R,K&IggNuDZ5@`>"&3=T@7=@a1SU0`fkbrjIJ?au<@E'oFDj&QP+@tC892joZkX-A;%nOPC51(So1(VK-hKM4
%h(BR;)"dJjoK8=f",+tcYZkTW!<uH+da>fhQAj-I?.BudV:#39!(O;jk>6dF'tafH=U_%Q;:cs]MCQhrYTm;%@:p`CY+eSkA5!`R
%k:-!7[:$ThS=Y=N6AM`(^c_Q_QR'd%K_U,Ye#C9WA-$("Khd??BnnOFS;Iss.-IhGpbbD^OsGj6&5>>klY2.+Ud`=\Vf0a\n#)]B
%/JS^H@n6cM*6TTgVTP9-;g1cGCn6ZS!9i+A'^a/L#pZ;R5\q_J$:5"ll&edY,:FZo@h^a8Mb'(7aQTu5E`e]o(3.V+.T1A*dBXRo
%TWDo9.p8f2W^R!oB1KV8B;5tU_<u0F&hIQN*=7aSOU%kg$q7:@#IS+dn.9pTYnLTtf$7NR.LMSe)-ef[7Ndp#a9EtOP*Im9$6tU>
%-peiF7:@tq@'/0tpLZ02;eR:nDb`.5XS$.+;&'T-7Ct*24C+X9+]PiA"obaa&sJn3P.>"J*=.4$^BGXa:lrV`Si],XR;(#MTcf">
%`Y,@tB:*P8KT^uqVJV$:6-i81>,8RJSj53']JI.E1/^E6!DD<!+n9jD9SWg,rKZGm3pN7m/0q7!lB[L<BDU#Bh;s@EA2E^qJ6'5:
%j>J,UM81V8$rl8MmfL?(l\M<8W68WGa#+NGaEG@Po=`3YMi++3!ppDAg82bFP,AWU(gTUrlR##HR5RG6<,5&]5+pk2D[.IsTE1R$
%*FNP[A?B'`nPNY^)@i2`8o([2@?MQ!fmn(R8&m^6(mTW4Di9eE4(U>O!:#]uCi(g2Kq1MV8'4Gp1$j<9@!#C3>PrUDM!@_k4gSZU
%K)0H-Hln)K8PXsG8R4ke=C0pnOYrCo]qu>Jd;kB2_F90k5+,l%>o(_;e$5?TOHaolR%BiE3ps<lCsb*\.QJ<:aPtC<T$0:o?eM6L
%f?hcOJ/9_(FAAS-+Dkq0>Jg,$d<1YEO%)Hq"5SbCE0iJ;DYQh$.X^Njq)JF0#@\!6jU1F]63a6HqV2+@7mqM#?DkqOA0%VV=mnni
%#\^WD^6=%j?pc^b&`VkCG>O_4UM7c\`SkN&:rU87<9$B_kTub$Y(aJu?#m;Z_F.u+G%n]V6:It9pk4,>`P;s%$OEB:#uDf+'`Q<f
%h9.GCg+*.GA4+s4C%t).s*BDkd&gKiDt'GEP^s>:[>`QjqH&?XHos'5-'>I%PB$@EA@;O?5H5`.Z96F=-+X?g6B]<Pf1+nd;Du?[
%'D]l:bDqY#GP(;#c:GfBB1kg>h`Hdu^178t/q=&:P2MAX2/F[O\:[ri5/]r=ZJ="9ifPQ#;+eao^&lmdP:;?!0p:NHpHgp5"<f8t
%:M=/h8HN$]<F%:p6@dl:M6Y)$9-:]W(op6G1<+>BEh8Mpi7-=Nfu\.'V*9H/<&3#7&3j<2/^FPIg1nk9LC"Al2B\g2!"eGBc^ae5
%el`^%5XI@.MLcnDKMRb&b08^>10KU^&sAZB6-Umm#ROD;D,f%urJ[g0@=Eb3=\Z=p/_KHYSNtRk)Qj[95T>e2KItQORL;*dX=LsQ
%p6*FVNKIDeC-(jUe8?Dfo=oPp+PaZJUk"gj=leKm5T#f2]F*&Q1g0Feb+t#,pQUDuW>qP/Qo5nOOXqd4+g;N.fC"TqB7RUn-(t^]
%Y;G8_!PbIh&EAtd!$fsj!LZkeU9P!Q8d<ZP"!]"V*S,bRmg;HcKN("<9T;MPJjl*eA>)Cm9)q\LqnG"4Va8RD,1:?/YCs'65p<XJ
%bK'de:m#GfI`KR%kmr[`4s2ci8?u^+&:!F@Qs5M1b*^:=7JJ))P"!.R/6+s^#R1J3RKs07!ideL[^liXKZjKN-6eX_eO#&ro<1F0
%[poPRbHginNG)e:)0m^_lDi\HA7-8X)e(<!h8bI/P(NV9%o,WU/*\S!4Nj_o+IX?<r33B"2EN'a&:?H/^`ON)YYT(2'AkK0MU)ad
%`.UrX]Jp[6P$u>&8hM3gop$W81M[KiC2@A.<#>)QJ-IRM;?>_gltPn[=G[dr=^V'c#``*_'GP3<:6NG#gbj>-"q\a?Q"JV5;mG+m
%7mV69=,R,=f?7$fn8M5t$sCn,#804IAn<DimkCbMR!TQF1Wp4[MmP"dj"IE#!l8LO$QGfVU=R:qeBunr[C7O,NmuhlFf`DNk)FA#
%0Hae8YP?bCDa;-emJq^52gN_f-^*9'96;.L/0W39S:k!eILrfA<O:ir-R:hX83dUjQN@$l'%&'P96=03j9pp%G_P"$"TP%R*+6iW
%F*`r$53g<-@ZuQb%Sj>:WXO[K#Tt(7,Djn/Kr2Q4U$*H@D5:'9RNfib;DrAb`hjcO+qNTiK;G5<p$ES(X1EHiR_._/$)nh.#aM]q
%arlNiPr^2;7'A0ZK*3a22YI:\"bn'[1I1V-[EKq.'\e?UOsQ?Xl[L,#TSJmS6S+Qi2UF-nC4K;B`4DFQ-[MJ#k2pcLFdhDRgkMD4
%NI.AZ%Jo<!_#V5ZWcp5K]/e_8)@uGHNcijKH$YJ7<<O,'blo[.,\gR`9gPb"3^jqbF<>e,[lrPcpHn]UDXZ;&m'r)A])_iJ]EjUM
%GguI\r'V\TTYQ'efg5OJ&CagJE=Q\ZFDUu*C=V`Fh9PAUThOdg$0!5k@X"I4IApM[C+\qOBLJ0Am:q:pJUkb_8V'0+\*TuoV``gH
%P:*=d9JrNM#Er%7R.kUb29@9uWFoN-Mo$^9SdA'Qe>h34%5b9R;pYjUH+-,MC,qX5.!cH5CH8T)\]f@h[$F^o-"l+GZb2.1TH7QY
%TR*D3Mfqua;leGC!(%S'B]\@N&5!rJFcF/3k[plNRJDB@(A_nkV1?fFp.j)UM1^G+7=#)'C:Dbi%8?Kt3FEHJ%^p7EA/XO!9)>-S
%Y!IsTZ>lc.DW:=mqBc4D75OJ=&/GQJ6ALFhIqftndk(":h.IEd14GQP$H(-9b)\g8]ho4Q4mW-H3Z,5*UnJKTe67_V9!ss;gt$e;
%Rt/l?'HnfKep112Cs$u,qNgHK<ED7Q>U$\NV%WJiBY0e2V9Ob2\p9UV-5N?'`hO)QPcg$#,\gPiO$G-i0qf__]SbspTNRa'6J-5p
%bde^F>g;N_!%M5$FiefcqIW*i'kOl.T'iV2N/D3'JaX`c"k_,DR"-n^2P:-dMd?]iE,as0\-J(srY0?B]lc0ES.8"L&0[pQO>Sl*
%pad04GE@[qg<ph4MNX>_;LoiHGGD9F@ei@&FV2kN,W=CW#3seA6K0VA6]ZT/1$poC"k$`(s67/+e;9kQB9F*J0aNo>?!E%L9s;.n
%^hW1:@7L?=>%^GUi5^gT(R"IOBVgjK"SMdt^*JfhAn1^hqYr$=JFGaeY2#l#cCbklXD:LITJcaGL1Cj9RR]S<WU)]e"$S])7D#s<
%a$I(EZ(o6$,<"@Z!VY32:5kN+"B31n&9*7nfj;EH+N2i_Ia>HoL?f+J"DJAS*nZ>[a^#g0_ghr4&rpqlOf>TY&RiHrGaP.Ilmcc,
%A\VoP033\j(G-(YZs'nnlg&3Y=?%EjVZhSf6n^n7]l82m.)JDb"td4!Q-d3,e%hLaVfrm)c?d`HAOT`N.:0Mu'6B`TO3"SN?#REG
%9_t/OZBm;Z:o%T_Bg7A3>gk2h$g@T;4)3NfjIDQG$JeH<,XaP:bp\+PDa+PD%Ap"nlZ[UV/7^f6[Yk-b_"P&_)^F"fI@<Dq>:o:M
%\rG.:![-^s8B3(^%>lkG&.P)FO"AUfoq@d+B>!05&\J]iit0-<o0Vpu#+=&((c:R0\soAckR?=?8XoVL/A7b0GpB8J>/cjE,7'>O
%]*^g'=-c-.2"_#H'r!:ChLF43j/"5J%-f]C-O*;H:3!;+6m1(V(TFeZe8#;o(c66aZ^;"1B[tsH+UBXm\WLV_&I@Wl;6i>0&=A*J
%'R#:`!L>QTLd;^OGR76=#dil?fap!ui-l<#@a(dQ)e77;*`E<7.g1hPT4e^\Hji?sJhV=Y0tSBt7@,Pld)6\2HN&6;W.!?/d"3I$
%T"bbg[Lm42*J6hP4&(<Q7un0u(P)F97j.O5,*7/>!Q]bV#in0g"EHjU!;SnsJ_]aS5^"1O(dF]<OIM[NaA)4*jAq0Ej-H5Aj;+s"
%jHm^hj;-8OjHes7j;.RljL:'Rj>NV9jL-cRiXN./<S*]_e5UT!pDDDt62itd5akc#c>OZ43jSo6Phc-\,T+Kt)^$sZ19#GXT7$hT
%JQs`>J:(<1JHedGO$Q<P[F<q(,ma*)>.3?0i.A58`sYs`Y^?!j1Thar/PPem6imfV3[M5hOohrV63l$.&=Hp%$Rns,'k_c.8^8M8
%U6nhDXmUa+QD>7$5l=5rV1a7MF:<oZPh$mKp0+9'2CMgKKVUYa`qGhY>sWNslmo#F[>J%9oEm]b710M`f8]bZ"&o7*h53H$?>0u3
%RV>Z:3Oo?d<3&iqkpY#pP\Plo[8`ukZVkXHWJ7ZOlWL6E/_(;sC9),m"+J;_c0=Sd^Qdl?Gnt9'S5(ej<t&ht]J_-L%!AFcMRV-p
%DM.)2`[FL_K\gp8"tEtFNO]8mMXk-[Wm<fnjpcPZcuslH&?WqJ:K;bW:R):9aEfF=)dk7HPInLIP$V2Y[9+#7Z?$`>JXXTEll=:B
%TV@7p95,8%FORqWN&a6CL.FoT@n%545@Pgm-Ou;0GY,C9Af?;#/]P>5AI'aXU-R5QpICA,BGgh8>-,BXN4GH.=GhaX2$F7W<`l^K
%^CI:=d`N#.N>/Uap@3tCMbXKS!*c)hUa^4)FMr$q`fWRTf7Bm2#]In87!d98@K;R\-A)`YULW]HF0WLbBp6'B%+6;`5uL((61E/5
%B:=:$D:tqs3(L%Z15S_6"&'&^DM]C0=C_Q?<`ic#*,T!*L0n-HLo=!+'8M853%?Tf\tqY5$eq^K27/btpCE'O1ha*O+HlRkrL!Ym
%qGE@,FbR5R8rrU^IT&jM8pdLL6AB4!JMqs1N6@)n7&N%\cuWlRW?$UP+Y+%U<`f@]S20J;?,IkgL/HLOfK`V6#bG]r5m\_Zb:;DS
%OnYd\O^o2$WmW:7BUHbm=A_d,2*5,<UoGF0S&4'WXsp^!k<H+EF"*cNaA#Y^Vl$ndf'TFd!,\C?OAK5A.%t?31OJ4++YZFqJ0O#A
%,E\HIpH^#n;-aS[0.U$9W7jLZSZB>&f&Mot4%&0cmB0*uJ464e;XL'pb!8,E:Q%ZC9Mk?GRV-p=[$hKZ#-,kWeKj*Ob&YI0leFK:
%_\6Q44Y<lrh$_4!m]J1aQPK7qb62]*XTc<RAMNU4OA>1\ma`*gh\<cEa0cg="]Uh9XNO'sY!/9)Z)e7@DAZq!bKhC`3%W=Rb2t8"
%.8&9-.FF"qBiWTg-B+CZ=KRIgDP4T'CL&mmEV\9HBd)5q,]64Z2^?e@')^!G#H'tG;f]l,@H<Bco!iYoGe3:JTp<(EUA8ccbP7+r
%9P@(gMA"ch-(#4jm:^(KW$q<1?L)U\q=9kH7>")/N3bPsL]+H9@,/ZO);R>(-?2Ok4dc$3.?RHo]=A+d4Q)>H<?aF47gi.O':b2@
%[lm+]G^Y`gH3q0F:c/8&>,gSp^8AFP$)Aq2U*+"n1OrqNS[&fEaadc,1>bBIh3st_3$qD3Ck=#2?Q%?4HanpSUZP2Ir?NUD"tB?Z
%HJdG`#=@CO8SAm$E-MKiri?K?!"U,!N&?ZM"dKf0EchIB5]C)`R=P?\MeP`JOh9pS!]B6d.WdX8JenO9kaJJ!k*XKAC1p5b7\pN>
%D"St\!=5bS.7M0\=isEH>r?>A".?TueX??4HHrl+#roH%U+i8]>S`o>[.p>g@U<`ld8>VtbimE\Z1(G8$soP[RT4B`rQ(ehl(nO^
%XgDg)2@^`=!M_5u!MVfG$>[1HcQ2X5Tu>N<]mki=(Z\l`EK7`4XK3Qd?&C$?:hqla1*9.MBjT$^m7,C3qFm6^Q\h#R\i;93D27af
%\+_W5&,a2c2ls[AC\"(=Vb_`4qKI,R3oII+@Gn"O1E'bjjuCUQqUdL[h0QT2$;3h;Wi"YgMcp9V?n"gTS2seFk:BU>9%B.k8uI_:
%#6CVQpmIWg&W#%@`9;8<qh#E6Gg1@`3!dgsbZYMcg28NSeKEAG;k5q0CIrI_<OGm]&d!^;:bjM^.SP[?k2[0h6B!?ba.t\*8nKhY
%S&c:('%N.Eh'H4?8_&Dj<M`ZC.T>S(e]]ekQe6J]R\[%^Pu0Kbl(k0j=&Tj-9PGqQU<8:tZH?3BjH`fS;KB<JdG9b'Db:-lV'_^p
%,u+adkG48>7@[=;-rF&<'rZ/LY#Ne"<IW+*nkpdM>]DJuVG'N?@hr#iZS;hcinGn"n!"l<9iucJ%>u\G+Z$GdQh0,#7OhB)kRBfK
%"j9KNCmH`ieOk*+W*0b6eJ)eqaZ%lsB<#4*/%d2Sf3c3^F9Zcg,pco]&jgl8Ue5`*:*$mmGg]2INe*IYeC$eO3LZ@3f0PMqKblT_
%=D:CL?>Fchb=W8UiC&O$1nULFC6/(t6/1/>aJI;XU]?D7.atG?kt)-NWIE,[qa-mQ-lSrh0HaFQie?_HW8Wj;L$Zu.q2b^Q4NZ'%
%?s-.=>&-62F*bs=,=4VOHt378b0Q,7[^BU"8leUilqO[;9j6-*^igp$*i?))0%DUt<-5jfM\@0AI!a7FBh4rC[s)P64RRTD([a"U
%(9rF/DoXmOdN1JhmY,"lDm&/kHO%$W"jXdp3[,Z26q1;`N_1K'SlE)s2ll?[Zg(G$?tW(o3YH>U,N@0MmnuY6kC>\dO`=$U+7:1R
%oGCnQg:TK2-1Z!:h+s/YQTG+KIqR8%Ohie"cj=3RIhVd0%&.+ki);d"eW$-$Kf40T1Y`_T's'R8ibCTJeI5#;X!e4oTHBYM^ZpCs
%50))B\k`jQb-R?TLfsV+dKVE5=pGThg0JB3gSg8u'ZnWejF.ZXM5/,q'l3=1Qu^InrN>,Z4mC%B-S)dl2`7qRSg@E['*Ek`0VPU^
%.$GD/EDqc:=.Qj5a7do:iaX8QUdtZ(dE"OF>6&!4ApUlOAN_fI3FnVW,Gg+0k#AQNZ!rp93DT,F+e*o$VEbm7oS]%NRst:V5C)<)
%Rf[Z5M1N'AM5^-cI;95!fL=NQln)X's'aQ%W-1a[lpm4KeJ2q)-%_.r<X'K`;YOf%!!^Rs[*Waf,(j[X0/Rl%Lsn5A#f0_,QL(H=
%=eYo.p=SUc"[KH]S?`G$g&;Wp,UT3;J`tP%^rR's<)ArE'a>^E[#Z"]i+[&YNH4<96eHL,&HHL5cP'7'2PSp:SV+4KdXbL#h39lJ
%"Ip3>#Vriq$7RIE>1d+n#R&L^NWFqq[<`+l'3_4-Ap`\[@TRgnk=_;XSYKT7n1#_"@gp5s_P.&F)2h($c`s$tbRc!MVfc!n>9(8U
%o,BrLqo_J5\Nt9)LK1<=.hBeJoI@l^VkE^3e++,@,p8aQVt20!P&>[s]g]<-*7B73V-0YYialn'JmD0qS+"9V-*(!c\qKHG,P0HN
%+dm8=6?I"sk?)kcXu+M4g(/,8)'n#-KeK`)a<TL-D0H_@a"W<-=aiP2dMp\6/^.bG3X!h^m]L<3jOsfAEKD)rmn<bA3['.9Ef8OR
%RTkZ<8O%Oe/)'<##9al&AKA5%c$h\q44tARc5m.%8mET5"umcp9Hj/k$ddCkO?DcAGgLuW+uWkN=hkfL'ot.9*R[qEd@`lr974hf
%SU$p.@7h%NC8RtPP![Pa*5&GNCU8XkpV7lYP`DZYfKZBecqi'NjdBD;-)1g()OuH*fukLd'^@WW*))dCN1-.8VP9G#<AcS-BIY*=
%b:k4nTu&;dc,f:?T^L@O%X(hMHPJ'_hrSG0c@OZt@0<ALK;,?WL1pi*St@pnO_q^DFVnd]d4=FRTGB81Oou(2OVFp+BlqR?NA=1@
%glu&7*hLHO_DuD#N[q6lW!IC11.s92b]0Is'J\4*L/OodhNMZP9'ToJX+E=cU=1;M=#E5InWYicQBl-KMG)='e<7["h)%Y?/?jZ$
%^@)9#K8.aC!pDJNg(r;.ae.S'8(J2&6/^>0ln`-.U6$ab>$4$FL4tk`RD-mZns+1($Epg=,r#?m1WV1P;9S/$-J"=kgQ_^bLb9Ub
%a:5oPIdT;kBp[::rQ84d`+.CE.Ze:CKL^u,V<W9H9U1#1s!VZ$eKF<!nr5U8U_D[Sk>&_lHTPI=S1gT/S9"=M-:o'=3p";4-u`E[
%LY+J[nZ9B!X4>A@GS$:s^&pmc_56*!Tt*@I`\Y5IL<iW'XgU^16pqU-im*2)=\F%LKicu@`I?P6O48_pVb1\&\#k%,T\X6Cbh]#&
%":Z9p%GuWlF?XNc!ZHJI`PZ96`.hsG!?@c7$1\pceT(/`fkd]QM:^gpk?^KlQ-lgnT>B93glh.FAZr^sg[AZI0P/9@?>2(uZarXN
%o8RKkK@c2W[,BT?k@;Mi0>,_J[d'+WiN!b$+2M_`?s<$.[H=,/)>_d;0r9Y\V_:bXH.?*pT"[V]A?Z4>Q^Yq!CLa+Z#rpQ0]_WOA
%`W@?s'!-!dL"S]=^`6_3([?Jib#m4rhRt8?`!tte^$ioTqtt(G)snqlaUE]:TN#beXq:sG]B.[[M^"Wu7amYo]H7Gl['cGgKK^0&
%E&HeCTuN)3$KQLCa_V0@=pg,[>$%cmH=ToA.k\D&TRA!d>P*J"@T>gW$5>AJDsPF?Z]BmM1mVZVFnr\#7/Da+-FAO>HS>#j#,EYP
%D\4[tjVa_o[4OG!(0hk^CqMtO";t_hOPn>j.u-r^QV!TRb;\_@fmY<mhc>Xkq9CE7U9/e,hKjl\Y@XrLhQ<s>L/FB$E@da`>Zc'I
%$Uu?_,'BI&Nba08icN2-L>,3l;[YWRPgLBC<kp=VLtdroF/5Fhc"K;p-6TEOT;Q5lfe&s1XM:"S.6GXUTN3st'i:ecY$oBuHZ8N5
%1`<^"GkK\efSQI$ZX;1"+n\#h'FpV8/"5f.A?CR`>IX]s<iQR[Yddq\11019gWifip=Jp<P$*[r<HDs&kG)i[[k!FD*VL+!5c?+"
%V9X$S6^u):f!JN?L5d`_U5_b//7$GoX*T/-M!FUQ>8)%MkA,5=C>^3@p%f9slI1"K"Y]*t+u(0\1V<Jj/l-7;X*qm$Ftf^uHfjQK
%_hq69G]=+mC?`X`g45#Y[Mas$Td#=XTpnh6p?nMX,ju:Hp@PJ59M?@K3"8bJ!V`d7dU?.N]lRAS%c[1!J6;coT9P!=3sg^Hd(JQN
%bEgN>#@UA[jN2pUgf=p=F#@-9SO.$@G0?OEpcC/8@QG/maaH?cS'1f.P"`dl+r^p[lP<Gg<`FOVPWM-6;A5c$glu(?0)o7)RE#>X
%*@QRY.57B.7%g$2D%YJ&>,/IH0>*%J?llEeq)iE^;>^%aMOH)#X$CJQKsRkeZDp%c/,GO(RN;?KFUe5<)EoZ08MOPM,Y_Gt0_<SQ
%Da3n8;^3KO^eA8QKDnQ#-C=4,Y`heVkJE043`@rWE.<%:aB+`A[Aok=g/P2a>RP43&2<Vl\psuhVh[,5Z:2-KDq5Ucb>p#_IX#,!
%ZZM`\cp9SE#(EF#PH4/J.Rf2_e#RsbK5ul5m]am&R(,4/677[iJu`nU!4CCR(YFCP=X6c[9?s8s9L5kYn78EHU[WVLOLL[WhA?G[
%%)%PJd.L#S_Tj`D&PFLZ!"atc]6Z(p'>e32+`4bE1el3Cq$->(l'+uk%suoujuF,'*MkW*C7g*lV[\]/(P)mO>ph<me@l3s_l9`F
%;h04YMM"]o,XB7TBU"Gq<6&hK*(>6s,E-\Jnhbci*@).lHRe3!^S7tL7;B&*G'#mSD$NcrKC6'Nh6=Lqg'WJ^mD/Ka-:@ROFB0A"
%bOjMZXd0,In-AE.Xt)3hbjg2@G+tc9T`_F>JIE->2ao1l==uM//VL8Rr-)'VWtXQMN5$!+gI_1eU#iED9U?@&04BZ2+)kg)*5mu8
%0cbmM(;r76hI,s^.iV&a*fIX;]/E+",W$@U.m=AdR(Cq-l4FT0<+B;=%N=^%<?+$XM+5=>q">7@[]F)t8!SX7Z+a(9g]2&H:hZg[
%B=7n6':`iOoqVSoBMQreI:hZpk7)D7#9usJW,+mHCc@qa;L^5FAL*dEftp_B0pf\'Xoks'14F-;fd3q&)=^C84dDg=Ac!-0K1,.\
%[od/$R?"*+(J]>a-;cbmc/ZL(cM'I9$eIV(h!jE8.TO4F<NB(&?2llCO-9D;m!>n:/>m74\S?>_DP!lD-YrOWMQ'MSTm,g-j(cuo
%:F9PSdYP&[ZEm*L0P9>r30CFUj<hC_ha+3P5^dhK1a6$H;H,Vleo`M;FimT"K=&-Oa@GX#A@jl"9jBY<'_9V7247W6l,/\i2>#bR
%L-JH)Eh"0/'o4]fd38pI&A#<oJ>KtnDJ\B'=eb%"ght,XXciinen,=!$uJofjtP@1dB;Gt,9[Js"Q,fs&p&H,*-3^JJU<[L?*7aB
%p2it]Q]\g\m)hME0HDqd,O]0?ji;HsXQGXOrA4*(cl(6%9!Zg&'TH+_kCl:MH7!,&Z2Q2^:5_RYLkdT'@i!fh=1QrEflSsuI8nD=
%Ls8O-LT]b4&ECD4g7GS8AuVIAJac-^g*&_^P_Ql)[gR!dWXjRS&ZLKrKc=Q^#Bs+ol7S)EK)l52Sf9_QLM/,hA/cU%fYrjr,U79M
%4hJ]>WCb?jFk"S"\aP[WZADXgIm_7!SZkW2QU"8aSTp7E!IWhaO.N_"ORg#%D9j(1#;\d&dS=sd`?".Dd&ICp+UFWJ?mtAsV&4k\
%YsH\%#de>hk7E:n0I^`WK4kp^&O?h/\M6ck1Bnu_m%hgH%"cR,+Siqu,>0&/E&s::DD>hSS`):/k"J+R56=-4*9$ErZlOcgW2?'f
%q\Xu47nDBi+P9VrJq\7RKH9q\+-tI$n<L"0H3<i8.XKCAgMo&2!\rrn45:SoXhmJkR1]%hWiPW\Rnq.W2sEA?VW+**nmk9W.<\RG
%Vj&;dV3k1A%T\>/Q-';2o1Bt#P+AU#\8$;pFN1GO]A#UD'OX(`pin^f9ffJGb)g4UXdPu%-MO!$+_PiCWN:7q5G$$)VfML!m!l$q
%:p3?aC)WN*8?0suX4X4_5D^jfVAtl&CS`LkR9EfIooMdTUs^Ec`(D@FP=kQ0dRL3J[nPO]Xr<h1/#OlHR23^\HR?_L8MPNHWJ=Fc
%,M,>QC<''@p!T!eLjV3u@ZO]5!6'ac\e'!g]O/%@2C1;`ngK5d"%MdW)qPp2f*U_lX6d;"Lcu+A#&KqM\h*JPBQHP3".1/#Df+/[
%$c[JZ7NgmJ)h>U$DZk)U_@^J4:-p+;7=KIrRDTS(CCq!g+W;/JS1CoN"ocdZa>l[Z+Qka*J@p5O"EH]Y&]ctI7j.!>*ItfGG6Dr8
%i=X-LNs?Nj?ljlh(O?4)Y3H&/fs=0ckOTaGS7?pHo%rsMaLTqnTLJ$[64f/IIIm6`Uu./H^uJ@WQ9-MQ4[(`3s0CXoHmnK<+PQfa
%RFKQ6HC#c`DARj$K1@'Y$6kRYR/tBYQ3cP8E!12K,lma,(P1B2NBhY.";j@s,*8:_&]d];!9@1=#ih5A#ilc*!9BK`#ilcO#iq<7
%#ilct!9CVJ#imn9#irEK%gk55#irGF#imo.!9CWd#il&B#in=6!9Ad##irjs#h8ErnBn5W+:?=hP_,o@_.]qa7!#[a-PC*eE).Cn
%+F#a.3BbEq74rAfgGH-q+/DksH#TXX[o+Z\&$;'nSHm_oRYpl=[tEB<7WWh,9a8*je@E$BNO.(4"D36*)KSVrq;POM'f*jdm3S$S
%;]<[o[H*R#9?mei-!-<C5"\Bpji!NaZ;)j"W/T5*9!g&qJ!CYp8kF&7`4[oU@4AUhN+uKbr[]@kQBPj[/%_V\i_iZq$.6>Kr*<2k
%0."`,')0Sj"Ju;,F4,ak&]Bp(@Rc_>-1RANMKC&`'Q#J)U')3m][4h"Br.o><QK1nQPm'PPjE!W^b[8?RM$@[aHNKS:32St.IkrI
%N,)#s[ONl@Ja*TMFd:_%`H(QF&iEIB%90gFW7YTZ>rM2n3?QM)+_SsN1Z]4;EZ<9uQ=^P%F&&_A8(Np2CW7SWk?jXND70*\&?Ak,
%"OeIp3R0qoEpO#A$@!6sa>#FoOQ1Ke+O:[W5`TaqJK/_W!-o&J"EJ=I#ip4j!Q['E,*:gl73KW3$:(2t'S.5;.KVV*<=7gO/OlOe
%7LSj@(>@D+QXnN'_I%W<;bndO*cs&I+6%cR-@!)ng+]kp`$qj0%FT$Z\VaH%V:Ponh&^^7Z;A(')YbX-)p3$IV:YK7#f(UBpF*]Z
%Dt2\#2_Md%JAg.KR@#,1L:c.;fVR3hgdA:!pg&%P:BZj%K_'#,,DD.ZBb/`P]*?L/C[Qr#XpmqT(o\%4?/ruFia.MH6^V0>gDP&J
%QX.MrXSJg<XprUXegnDVXppmj1*E&l_h1l=[$I)UO0`U%/]O@#A_1l_,V2pNfk/iL9$gt7oc_q!fC0,.1CIH2X]XHGB6)Z_fKtY$
%;$j\a2<]jH=YIJ3>]pSQ-hQ$E&_1LFn6,,R`F[Y?-$W9X59-"q__]\BgANhQ@OVb+0f)mMG4[4!R57E6#DhfMlgr?\):+_-8"uqk
%A1sCRTPE#:nLjQbHIE%Y&%2q?)]eYT@b+k/Pe"e^BYIRr)5e.`1,QGsh?m9@9%M_8M8liXq:M5cJ]eGY160D`4b^'7HsjQo9=Q[-
%\9K@NM0K>q-?(8H2riUF!2>"7_WKf.le5[+n<n+E#bC;M@JqCp9jRc*FB-gcIgJ/=!29^p'q#N;juqt'HFRW`1/gWaMn*`0!T$eH
%&VRE;AIsLq6U3,\\dgT&Bgfs,'(]qC)d^>\A$r1IV!_@seMW-:;>@-(05ZUgK5<oND$NJUD:MF!o-&@XX#.#j"C6u]EQ_f$*O]Yp
%=(6L7/IPg\^fke$gC/sPSpT9tA@kH(o^K!&/BkQ#NpsTfVH^LV'j'[:H`$1tA^)IroeN0'H>df8g#Vp5X"Q`9POP^bB0(qoeq?H\
%Q3LRfZaB!p`\W2/-DblO3EjseE%'TmQL,iD#H$e&Ak#%#osKFa/Vp6ffm3)B3#;05UFrA2bT">S0f^BV0"I`G^J"T,Al]G/1>K_?
%L#_0oQJGrE5bFn%4gAnGc0XnHA1"%Ub92&7'r@E!`[kL&-ggHjkL.:r<7U)@B-fgLbpg0e4hF/7XV3[=p[WtTXZ-=*a=5?XEbH`P
%[>R?LFt,HkkfkT5kFP@4mFG3@WNE;HI,mU>_aTPCmeGloR;(T&$_DJ3W;@Y'^4Rqq0UCa3gkn7<#NJn4l?oSc$ZWemdrWLqWZt^c
%p83j[p1K\7_qs.S62TW0U3:jqVfp^kgq1qI#oR]kep=:Khue1E;3MH!!-6qa2B_!0)2Di@>2bm>;l'rO)!$'?9t5tDGFX(E;h^2n
%#UZZElCq)21;J_YH$gFAnu(f\2Ll6hEM5juY[')FVcLJQ;-],ueQQV^#Tl&WYrV]&!dbn/Mddd"3:P"I0`cK2Q][2,8(fR["lZ.h
%+K9a]4&9k35dR7c88k'CTLj#h#5f@"eN1Q',(>aK0_M><KNle+&_iU9[j'U2Fo'[[J8r2p)&:?JT;Bp?e8!Qb5F'\R26C1+r:qD+
%'aqI347JX>7):_Lj9Fgh%^\PuUWGO+lieHcPkeQ&"OF3i^!ERK&364ROitr+S&i%=0Ymj@mp>V)?)@o+!NW@OqNOqNo3LnoVjCE0
%=.][a$"IgP;V`_Mcnqt4p:QP_c/H9C_?^;\TB&@PJL4@nCuO*YF0;;2nV)onUE^'(O[(1Sed[XSaCe,?A`?!P5ac^+a57@U`C1RE
%rIZc"(aFs=on;R@dq#<]V\?uP%UPrLm%tqbLXO>[?)o2gFABn$,):+8+a/9a*l$P,=CYie&<H)lQBb/h[F8uVZa95^4(<\,F8Jo<
%?/)JZ^Y:(*KSO";,%rg_cn`RLFgRsml8MMG&E*GN9Qjd*Y]G*lgeV6>mTa+DV/I-[Kcdd_4fr<U+8CqMPoA8DkW!%)$"$D1!d?UF
%ok.]u@mI1$*X+9MTHfLE54_M:MN38H'sIj^\&VnSnTW+.K3$>.RXW.a9pq)!7-Y'nLmHtP^@@kkEd5GB(!H:NTcLmEDDmTYc=]U:
%C7&.0Aj-HOa<L1;:.Ci$JHV-FN(uj6gO/hJ,%GS>;,2!cD-:`1)ae)n1mmP5oRdMV8R(9#*4RdppK+1V$f>;kRo?,f89#TA,I`#5
%-mTRsglb+8l]sh9EPY#0FLJ:Igue`jAHIEe9,fI"']Akn3YB=4#TkC<!^kG8a2FVe8i)9@2f;:1YUN+-4s@,g&:l/(U4Q)\Csk/!
%5up4qO3$Ql2#A=qK%A76#iI5XX0g;H]qs6Ec>>G<9e384D`-pqr-q&g,.LMR8oAG;74GXWjVH"gP+,Rb1HRj:/#dDXYKC+f(dqfC
%V7!3S1CJ=XMB;$A89SG8ouMNhFNgS*4r)bCc:_6*WTRjq4l%4jQIkJ>85?5K9Mk=OQVCP86@tM(FBXsW8W(;n_>b%6)-YDOgl&X/
%O,,K\rd7"L'PeAQ=_OF0-5tb]k.#VVlXa(ofCd/Uns0k:o8/oV`<McQ??_]MJGB"M(nd*^#JD^].2+^a%A,T*?Oifa-*]j@M?V6*
%aL)Nm"a0ut<Otncm=/GSr$i1V#A3N#FQDdB0BeBh[&Xjjl&Z,Rj8>@RD\*:B73B[OU<H:M;'h#hGUV!48dQtI5A=t.,U?5"6hJn<
%U6^.cSu<C:+b-?Ha*[AZl:U$ALTE0+liHFqh_DX(J+eDLQF]uhm,dm5%BkCW^C9>m(f=dRG=%`NoFbhtcm`d69=2YV;nmg=IH8^u
%h;-sp"EZ$_4L*12nBdc)'nAF,.fqa!=9NXqZiK1_C_=`Cj!'TFfEEDDer)eRpD8B#K.n2jcQ/9OC*>GaT0Inom;`m8fdj)7>nj%p
%:iqq=kFqNAgi>gCM.tE(_)Wei%3A$ma]k#*UML'R8(l;!L\S//Wb@A->Oc95OIFGigm<^bV]QM8Kh($3iQK*SKDVr.b&=`1^m0V+
%gUXWZ^ut?LN"G;Zj"LuFN>@CpARUfS;#]K%mB'g7Q%aR'RHMc1@(&"s@mu`<$]SI-c[Aq5/Ap?:a1/Eo9<n,^W]`XN2urc[0[u=p
%ZIXuT\]U7m>=T25b/05n*u$jp-jug3dCNOA'%$d'Wih6TZ>d_C$YA/RbJI(J25NE2O]o<C7Ihu2Z;pBfT!h)V`%^q<Z7sulN"(fF
%P$r(OFHh<?(>R3agLercPltDYPbSn2UME^-jXtd)8)@JK_@t8rK4jas_O9QFWle21Q&)/h-%C5A@rN_eO'K4K&grh3,\(#L-%VS!
%[:=%$,;&[l6U<HJ=,)-a92HW]$`<:7o6f&QQ[[K"l%lI?lp4oQ<KJe$2L:X[CccrG/RKL;,Ti7EI8CnQZ!J^u4Hk"YgPtp"&$!Q"
%X+!_892HpP\M%p_rka+o2d;k1,R(H2mW$f(X:e#G=!d9>j(2%5G&JLrPHU"N&J3DmDN\'IE*jma,L1AlrCRogmZHS!Q(V)Q-3hpa
%gStBfieH@3&_^TD1@_[F\udIr07H%jH5sRnLG';o*"9!^=%<;%13%AbFBNMs#@Afio*1c>%sgMcO=cVJ:gV`@[R%HH7bWfM*;bk`
%=5XFpb_"I+#selB^8E)o41:AdqQ8'(TQuh-eO[MdgJ5iNN:>>Lj9(=?iX^?=nS+U]6Bclf*P:trCo^RYfppRP_W(!G&H>=A7bBMB
%I.6OkrYp'sd<C*aV:*gY&@.n?P\V\Y@mK,l\r2Og4*$#+f`1BZ5E26Z!$Msme5#Pgi'7u^/-*X*1GNQf/VaWc'c?fCCB^C#@Y%9J
%nDtkEYioQH0,tLTn7%FfKAc33iA3Vod3fX[#lZHjL-7\U9=V_DYM`!!k9Y_p$a8MQJXdGRn)A-<RQU,Y$Eo"Cfp=A,DVO&3r;FOh
%IptS;o%!VmL];YsmCU"1f`'d[f8$QeIf&X/m14[CiSFB\*.Q>kI>NINo'M5$?XLNsrPSAJ^V_/nil,O1du&2?kI[&2'I;=[s6Y`j
%VRnL1G5(n6IH#+uVqq&VDUj0H>P4WV<l:iIebE"N&fY<%hu3b%7APU/YVY-@l98f_IEp,O1YCA$)HhVl9&)lPF.c_RUEsoB/@t=[
%(3JkO9;gHdiPdA3`l/-7^5qp*Mk3jl0aG:4Z#SjE)XTk"04mMZ/k-):M>iQ')'Z_\"XQ'1=4;E>aE0J#iM^c5MaiuDfSrbi0,BKr
%J$F5tq25EOb$Q\@<Beb?7[61n`1tI^//VCd@e$B(W2b;G"f0ah<';:=Qttn_p#Hs"qU`Y&o;C=eQVVh+p!_`sI:@0j;>9p?&RkPC
%6c/QW@`%9qfB#etbqj(#e6%[$'O$<MNe[A!Tq.`[.'h`Bk=gEK4YA\^:4MlUVnS^_$Y/peEaH;'I=V=5#\MT9&'_W2a_7(hlk@IQ
%6G4IeE=9]X39ok-@78QQ8gAo/,dLL'fNmK5o-YKnhuu^VqMhf<-T@deXA7E(4GkT2ldK1u'8,m@q_`MGM;<hD[MFGo@aW_Bs!_Xr
%m[*K.>5>!1o:01a`*MHD%T7a-BY7#jJ0IP5,LP?h^\I>+4#PRWC,+'1[85Sj*rWKBZXeFTfCs@b>8te-If0rSe&Qt:EsY55f=1E5
%D)#6qpg8I7D2o:uNFi'Wg_E`abO#bup87DuMpEfSr;7(4^3ot>^V53hiVRh;?bcUG7a'tETE4W._s>M%(GEO0n%QO8jk]eEG@/&\
%le??-\GOgo+$]Z36fCnl=78>#G^%t_Y^a<Br8#!"Cp9me"SU+7hu.9(mh]q#`ddpqU\6j*jqhBQp%$@s^L"[#pYduYabK]srW=>!
%2F)cb(&btlYK&m*o'Np$HMrn[pHS[<rP@[3H2ZR:n(thYrpoRX`Fn*,nG</+mU!YVMb?52L&UB*]Cuh#d-Q"eqr(?>re<YR5<Ae[
%kF_eFf<8M.pAb";L2R~>
%AI9_PrivateDataEnd
